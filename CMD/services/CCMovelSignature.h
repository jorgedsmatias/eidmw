// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* CCMovelSignature.h
   Generated by wsdl2h 2.8.49 from https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc?singleWsdl and /home/agrr/cmd_services/typemap.dat
   2018-02-16 18:53:48 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on CCMovelSignature.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns2 = "http://Ama.Authentication.Service/"
ser = "http://schemas.microsoft.com/2003/10/Serialization/"
ns3 = "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://Ama.Authentication.Service/"
//gsoap ns2   schema namespace:	http://Ama.Authentication.Service/
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ser	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap ser   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ser   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns3	"http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"
//gsoap ns3   schema namespace:	http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:anyType".
class xsd__anyType { _XML __item; struct soap *soap; };

/// Built-in XSD type "xs:QName".
typedef std::string xsd__QName;

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in XSD type "xs:byte".
typedef char xsd__byte;

/// Built-in XSD type "xs:duration".
#import "custom/duration.h"

/// Built-in XSD type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h).
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF".
typedef std::string xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h).
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__QName_ to check runtime type (see soapStub.h).
class xsd__QName_ : public xsd__anyType
{ public:
    xsd__QName                           __item;                       
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h).
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h).
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h).
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h).
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h).
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h).
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h).
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h).
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h).
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h).
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h).
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h).
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h).
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h).
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h).
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h).
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h).
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns2__CCMovelSign.
class _ns2__CCMovelSign;

//  Forward declaration of class _ns2__CCMovelSignResponse.
class _ns2__CCMovelSignResponse;

//  Forward declaration of class _ns2__CCMovelValidateSignature.
class _ns2__CCMovelValidateSignature;

//  Forward declaration of class _ns2__CCMovelValidateSignatureResponse.
class _ns2__CCMovelValidateSignatureResponse;

//  Forward declaration of class _ns2__GetCertificate.
class _ns2__GetCertificate;

//  Forward declaration of class _ns2__GetCertificateResponse.
class _ns2__GetCertificateResponse;

//  Forward declaration of class _ns2__ValidateOtp.
class _ns2__ValidateOtp;

//  Forward declaration of class _ns2__ValidateOtpResponse.
class _ns2__ValidateOtpResponse;

//  Forward declaration of class _ns2__CCMovelMultipleSign.
class _ns2__CCMovelMultipleSign;

//  Forward declaration of class _ns2__CCMovelMultipleSignResponse.
class _ns2__CCMovelMultipleSignResponse;

//  Forward declaration of class ns3__SignRequest.
class ns3__SignRequest;

//  Forward declaration of class ns3__SignStatus.
class ns3__SignStatus;

//  Forward declaration of class ns3__ValidationRequest.
class ns3__ValidationRequest;

//  Forward declaration of class ns3__ValidationResponse.
class ns3__ValidationResponse;

//  Forward declaration of class ns3__SignResponse.
class ns3__SignResponse;

//  Forward declaration of class ns3__MultipleSignRequest.
class ns3__MultipleSignRequest;

//  Forward declaration of class ns3__ArrayOfHashStructure.
class ns3__ArrayOfHashStructure;

//  Forward declaration of class ns3__HashStructure.
class ns3__HashStructure;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/// Imported simpleType "http://schemas.microsoft.com/2003/10/Serialization/":char from typemap "/home/agrr/cmd_services/typemap.dat".
// simpleType definition intentionally left blank.
/// Imported simpleType "http://schemas.microsoft.com/2003/10/Serialization/":duration from typemap "/home/agrr/cmd_services/typemap.dat".
// simpleType definition intentionally left blank.
/// Imported simpleType "http://schemas.microsoft.com/2003/10/Serialization/":guid from typemap "/home/agrr/cmd_services/typemap.dat".
// simpleType definition intentionally left blank.

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelSign
/// @brief "http://Ama.Authentication.Service/":CCMovelSign is a complexType.
///
/// class _ns2__CCMovelSign operations:
/// - _ns2__CCMovelSign* soap_new__ns2__CCMovelSign(soap*) allocate and default initialize
/// - _ns2__CCMovelSign* soap_new__ns2__CCMovelSign(soap*, int num) allocate array and default initialize values
/// - _ns2__CCMovelSign* soap_new_req__ns2__CCMovelSign(soap*, ...) allocate, set required members
/// - _ns2__CCMovelSign* soap_new_set__ns2__CCMovelSign(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelSign::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelSign(soap*, _ns2__CCMovelSign*) deserialize from a stream
/// - int soap_write__ns2__CCMovelSign(soap*, _ns2__CCMovelSign*) serialize to a stream
/// - _ns2__CCMovelSign* _ns2__CCMovelSign::soap_dup(soap*) returns deep copy of _ns2__CCMovelSign, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelSign::soap_del() deep deletes _ns2__CCMovelSign data members, use only after _ns2__CCMovelSign::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__CCMovelSign
{ public:
/// Element "request" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest.
    ns3__SignRequest*                    request                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelSignResponse
/// @brief "http://Ama.Authentication.Service/":CCMovelSignResponse is a complexType.
///
/// class _ns2__CCMovelSignResponse operations:
/// - _ns2__CCMovelSignResponse* soap_new__ns2__CCMovelSignResponse(soap*) allocate and default initialize
/// - _ns2__CCMovelSignResponse* soap_new__ns2__CCMovelSignResponse(soap*, int num) allocate array and default initialize values
/// - _ns2__CCMovelSignResponse* soap_new_req__ns2__CCMovelSignResponse(soap*, ...) allocate, set required members
/// - _ns2__CCMovelSignResponse* soap_new_set__ns2__CCMovelSignResponse(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelSignResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelSignResponse(soap*, _ns2__CCMovelSignResponse*) deserialize from a stream
/// - int soap_write__ns2__CCMovelSignResponse(soap*, _ns2__CCMovelSignResponse*) serialize to a stream
/// - _ns2__CCMovelSignResponse* _ns2__CCMovelSignResponse::soap_dup(soap*) returns deep copy of _ns2__CCMovelSignResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelSignResponse::soap_del() deep deletes _ns2__CCMovelSignResponse data members, use only after _ns2__CCMovelSignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__CCMovelSignResponse
{ public:
/// Element "CCMovelSignResult" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
    ns3__SignStatus*                     CCMovelSignResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelValidateSignature
/// @brief "http://Ama.Authentication.Service/":CCMovelValidateSignature is a complexType.
///
/// class _ns2__CCMovelValidateSignature operations:
/// - _ns2__CCMovelValidateSignature* soap_new__ns2__CCMovelValidateSignature(soap*) allocate and default initialize
/// - _ns2__CCMovelValidateSignature* soap_new__ns2__CCMovelValidateSignature(soap*, int num) allocate array and default initialize values
/// - _ns2__CCMovelValidateSignature* soap_new_req__ns2__CCMovelValidateSignature(soap*, ...) allocate, set required members
/// - _ns2__CCMovelValidateSignature* soap_new_set__ns2__CCMovelValidateSignature(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelValidateSignature::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelValidateSignature(soap*, _ns2__CCMovelValidateSignature*) deserialize from a stream
/// - int soap_write__ns2__CCMovelValidateSignature(soap*, _ns2__CCMovelValidateSignature*) serialize to a stream
/// - _ns2__CCMovelValidateSignature* _ns2__CCMovelValidateSignature::soap_dup(soap*) returns deep copy of _ns2__CCMovelValidateSignature, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelValidateSignature::soap_del() deep deletes _ns2__CCMovelValidateSignature data members, use only after _ns2__CCMovelValidateSignature::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__CCMovelValidateSignature
{ public:
/// Element "request" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationRequest.
    ns3__ValidationRequest*              request                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelValidateSignatureResponse
/// @brief "http://Ama.Authentication.Service/":CCMovelValidateSignatureResponse is a complexType.
///
/// class _ns2__CCMovelValidateSignatureResponse operations:
/// - _ns2__CCMovelValidateSignatureResponse* soap_new__ns2__CCMovelValidateSignatureResponse(soap*) allocate and default initialize
/// - _ns2__CCMovelValidateSignatureResponse* soap_new__ns2__CCMovelValidateSignatureResponse(soap*, int num) allocate array and default initialize values
/// - _ns2__CCMovelValidateSignatureResponse* soap_new_req__ns2__CCMovelValidateSignatureResponse(soap*, ...) allocate, set required members
/// - _ns2__CCMovelValidateSignatureResponse* soap_new_set__ns2__CCMovelValidateSignatureResponse(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelValidateSignatureResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelValidateSignatureResponse(soap*, _ns2__CCMovelValidateSignatureResponse*) deserialize from a stream
/// - int soap_write__ns2__CCMovelValidateSignatureResponse(soap*, _ns2__CCMovelValidateSignatureResponse*) serialize to a stream
/// - _ns2__CCMovelValidateSignatureResponse* _ns2__CCMovelValidateSignatureResponse::soap_dup(soap*) returns deep copy of _ns2__CCMovelValidateSignatureResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelValidateSignatureResponse::soap_del() deep deletes _ns2__CCMovelValidateSignatureResponse data members, use only after _ns2__CCMovelValidateSignatureResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__CCMovelValidateSignatureResponse
{ public:
/// Element "CCMovelValidateSignatureResult" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationResponse.
    ns3__ValidationResponse*             CCMovelValidateSignatureResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":GetCertificate
/// @brief "http://Ama.Authentication.Service/":GetCertificate is a complexType.
///
/// class _ns2__GetCertificate operations:
/// - _ns2__GetCertificate* soap_new__ns2__GetCertificate(soap*) allocate and default initialize
/// - _ns2__GetCertificate* soap_new__ns2__GetCertificate(soap*, int num) allocate array and default initialize values
/// - _ns2__GetCertificate* soap_new_req__ns2__GetCertificate(soap*, ...) allocate, set required members
/// - _ns2__GetCertificate* soap_new_set__ns2__GetCertificate(soap*, ...) allocate, set all public members
/// - _ns2__GetCertificate::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GetCertificate(soap*, _ns2__GetCertificate*) deserialize from a stream
/// - int soap_write__ns2__GetCertificate(soap*, _ns2__GetCertificate*) serialize to a stream
/// - _ns2__GetCertificate* _ns2__GetCertificate::soap_dup(soap*) returns deep copy of _ns2__GetCertificate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GetCertificate::soap_del() deep deletes _ns2__GetCertificate data members, use only after _ns2__GetCertificate::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__GetCertificate
{ public:
/// Element "applicationId" of XSD type xs:base64Binary.
    xsd__base64Binary*                   applicationId                  0;	///< Optional element.
/// Element "userId" of XSD type xs:string.
    std::string*                         userId                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":GetCertificateResponse
/// @brief "http://Ama.Authentication.Service/":GetCertificateResponse is a complexType.
///
/// class _ns2__GetCertificateResponse operations:
/// - _ns2__GetCertificateResponse* soap_new__ns2__GetCertificateResponse(soap*) allocate and default initialize
/// - _ns2__GetCertificateResponse* soap_new__ns2__GetCertificateResponse(soap*, int num) allocate array and default initialize values
/// - _ns2__GetCertificateResponse* soap_new_req__ns2__GetCertificateResponse(soap*, ...) allocate, set required members
/// - _ns2__GetCertificateResponse* soap_new_set__ns2__GetCertificateResponse(soap*, ...) allocate, set all public members
/// - _ns2__GetCertificateResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GetCertificateResponse(soap*, _ns2__GetCertificateResponse*) deserialize from a stream
/// - int soap_write__ns2__GetCertificateResponse(soap*, _ns2__GetCertificateResponse*) serialize to a stream
/// - _ns2__GetCertificateResponse* _ns2__GetCertificateResponse::soap_dup(soap*) returns deep copy of _ns2__GetCertificateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GetCertificateResponse::soap_del() deep deletes _ns2__GetCertificateResponse data members, use only after _ns2__GetCertificateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__GetCertificateResponse
{ public:
/// Element "GetCertificateResult" of XSD type xs:string.
    std::string*                         GetCertificateResult           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":ValidateOtp
/// @brief "http://Ama.Authentication.Service/":ValidateOtp is a complexType.
///
/// class _ns2__ValidateOtp operations:
/// - _ns2__ValidateOtp* soap_new__ns2__ValidateOtp(soap*) allocate and default initialize
/// - _ns2__ValidateOtp* soap_new__ns2__ValidateOtp(soap*, int num) allocate array and default initialize values
/// - _ns2__ValidateOtp* soap_new_req__ns2__ValidateOtp(soap*, ...) allocate, set required members
/// - _ns2__ValidateOtp* soap_new_set__ns2__ValidateOtp(soap*, ...) allocate, set all public members
/// - _ns2__ValidateOtp::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ValidateOtp(soap*, _ns2__ValidateOtp*) deserialize from a stream
/// - int soap_write__ns2__ValidateOtp(soap*, _ns2__ValidateOtp*) serialize to a stream
/// - _ns2__ValidateOtp* _ns2__ValidateOtp::soap_dup(soap*) returns deep copy of _ns2__ValidateOtp, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ValidateOtp::soap_del() deep deletes _ns2__ValidateOtp data members, use only after _ns2__ValidateOtp::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ValidateOtp
{ public:
/// Element "code" of XSD type xs:string.
    std::string*                         code                           0;	///< Optional element.
/// Element "processId" of XSD type xs:string.
    std::string*                         processId                      0;	///< Optional element.
/// Element "applicationId" of XSD type xs:base64Binary.
    xsd__base64Binary*                   applicationId                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":ValidateOtpResponse
/// @brief "http://Ama.Authentication.Service/":ValidateOtpResponse is a complexType.
///
/// class _ns2__ValidateOtpResponse operations:
/// - _ns2__ValidateOtpResponse* soap_new__ns2__ValidateOtpResponse(soap*) allocate and default initialize
/// - _ns2__ValidateOtpResponse* soap_new__ns2__ValidateOtpResponse(soap*, int num) allocate array and default initialize values
/// - _ns2__ValidateOtpResponse* soap_new_req__ns2__ValidateOtpResponse(soap*, ...) allocate, set required members
/// - _ns2__ValidateOtpResponse* soap_new_set__ns2__ValidateOtpResponse(soap*, ...) allocate, set all public members
/// - _ns2__ValidateOtpResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ValidateOtpResponse(soap*, _ns2__ValidateOtpResponse*) deserialize from a stream
/// - int soap_write__ns2__ValidateOtpResponse(soap*, _ns2__ValidateOtpResponse*) serialize to a stream
/// - _ns2__ValidateOtpResponse* _ns2__ValidateOtpResponse::soap_dup(soap*) returns deep copy of _ns2__ValidateOtpResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ValidateOtpResponse::soap_del() deep deletes _ns2__ValidateOtpResponse data members, use only after _ns2__ValidateOtpResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__ValidateOtpResponse
{ public:
/// Element "ValidateOtpResult" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse.
    ns3__SignResponse*                   ValidateOtpResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelMultipleSign
/// @brief "http://Ama.Authentication.Service/":CCMovelMultipleSign is a complexType.
///
/// class _ns2__CCMovelMultipleSign operations:
/// - _ns2__CCMovelMultipleSign* soap_new__ns2__CCMovelMultipleSign(soap*) allocate and default initialize
/// - _ns2__CCMovelMultipleSign* soap_new__ns2__CCMovelMultipleSign(soap*, int num) allocate array and default initialize values
/// - _ns2__CCMovelMultipleSign* soap_new_req__ns2__CCMovelMultipleSign(soap*, ...) allocate, set required members
/// - _ns2__CCMovelMultipleSign* soap_new_set__ns2__CCMovelMultipleSign(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelMultipleSign::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelMultipleSign(soap*, _ns2__CCMovelMultipleSign*) deserialize from a stream
/// - int soap_write__ns2__CCMovelMultipleSign(soap*, _ns2__CCMovelMultipleSign*) serialize to a stream
/// - _ns2__CCMovelMultipleSign* _ns2__CCMovelMultipleSign::soap_dup(soap*) returns deep copy of _ns2__CCMovelMultipleSign, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelMultipleSign::soap_del() deep deletes _ns2__CCMovelMultipleSign data members, use only after _ns2__CCMovelMultipleSign::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__CCMovelMultipleSign
{ public:
/// Element "request" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest.
    ns3__MultipleSignRequest*            request                        0;	///< Optional element.
/// Element "documents" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure.
    ns3__ArrayOfHashStructure*           documents                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelMultipleSignResponse
/// @brief "http://Ama.Authentication.Service/":CCMovelMultipleSignResponse is a complexType.
///
/// class _ns2__CCMovelMultipleSignResponse operations:
/// - _ns2__CCMovelMultipleSignResponse* soap_new__ns2__CCMovelMultipleSignResponse(soap*) allocate and default initialize
/// - _ns2__CCMovelMultipleSignResponse* soap_new__ns2__CCMovelMultipleSignResponse(soap*, int num) allocate array and default initialize values
/// - _ns2__CCMovelMultipleSignResponse* soap_new_req__ns2__CCMovelMultipleSignResponse(soap*, ...) allocate, set required members
/// - _ns2__CCMovelMultipleSignResponse* soap_new_set__ns2__CCMovelMultipleSignResponse(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelMultipleSignResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelMultipleSignResponse(soap*, _ns2__CCMovelMultipleSignResponse*) deserialize from a stream
/// - int soap_write__ns2__CCMovelMultipleSignResponse(soap*, _ns2__CCMovelMultipleSignResponse*) serialize to a stream
/// - _ns2__CCMovelMultipleSignResponse* _ns2__CCMovelMultipleSignResponse::soap_dup(soap*) returns deep copy of _ns2__CCMovelMultipleSignResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelMultipleSignResponse::soap_del() deep deletes _ns2__CCMovelMultipleSignResponse data members, use only after _ns2__CCMovelMultipleSignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__CCMovelMultipleSignResponse
{ public:
/// Element "CCMovelMultipleSignResult" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
    ns3__SignStatus*                     CCMovelMultipleSignResult      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest is a complexType.
///
/// class ns3__SignRequest operations:
/// - ns3__SignRequest* soap_new_ns3__SignRequest(soap*) allocate and default initialize
/// - ns3__SignRequest* soap_new_ns3__SignRequest(soap*, int num) allocate array and default initialize values
/// - ns3__SignRequest* soap_new_req_ns3__SignRequest(soap*, ...) allocate, set required members
/// - ns3__SignRequest* soap_new_set_ns3__SignRequest(soap*, ...) allocate, set all public members
/// - ns3__SignRequest::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SignRequest(soap*, ns3__SignRequest*) deserialize from a stream
/// - int soap_write_ns3__SignRequest(soap*, ns3__SignRequest*) serialize to a stream
/// - ns3__SignRequest* ns3__SignRequest::soap_dup(soap*) returns deep copy of ns3__SignRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SignRequest::soap_del() deep deletes ns3__SignRequest data members, use only after ns3__SignRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SignRequest : public xsd__anyType
{ public:
/// Element "ApplicationId" of XSD type xs:base64Binary.
    xsd__base64Binary*                   ApplicationId                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "DocName" of XSD type xs:string.
    std::string*                         DocName                        0;	///< Optional element.
/// Element "Hash" of XSD type xs:base64Binary.
    xsd__base64Binary*                   Hash                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Pin" of XSD type xs:string.
    std::string*                         Pin                            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "UserId" of XSD type xs:string.
    std::string*                         UserId                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus is a complexType.
///
/// class ns3__SignStatus operations:
/// - ns3__SignStatus* soap_new_ns3__SignStatus(soap*) allocate and default initialize
/// - ns3__SignStatus* soap_new_ns3__SignStatus(soap*, int num) allocate array and default initialize values
/// - ns3__SignStatus* soap_new_req_ns3__SignStatus(soap*, ...) allocate, set required members
/// - ns3__SignStatus* soap_new_set_ns3__SignStatus(soap*, ...) allocate, set all public members
/// - ns3__SignStatus::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SignStatus(soap*, ns3__SignStatus*) deserialize from a stream
/// - int soap_write_ns3__SignStatus(soap*, ns3__SignStatus*) serialize to a stream
/// - ns3__SignStatus* ns3__SignStatus::soap_dup(soap*) returns deep copy of ns3__SignStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SignStatus::soap_del() deep deletes ns3__SignStatus data members, use only after ns3__SignStatus::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SignStatus : public xsd__anyType
{ public:
/// Element "Code" of XSD type xs:string.
    std::string*                         Code                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Field" of XSD type xs:string.
    std::string*                         Field                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "FieldValue" of XSD type xs:string.
    std::string*                         FieldValue                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Message" of XSD type xs:string.
    std::string*                         Message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "ProcessId" of XSD type xs:string.
    std::string*                         ProcessId                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationRequest is a complexType.
///
/// class ns3__ValidationRequest operations:
/// - ns3__ValidationRequest* soap_new_ns3__ValidationRequest(soap*) allocate and default initialize
/// - ns3__ValidationRequest* soap_new_ns3__ValidationRequest(soap*, int num) allocate array and default initialize values
/// - ns3__ValidationRequest* soap_new_req_ns3__ValidationRequest(soap*, ...) allocate, set required members
/// - ns3__ValidationRequest* soap_new_set_ns3__ValidationRequest(soap*, ...) allocate, set all public members
/// - ns3__ValidationRequest::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ValidationRequest(soap*, ns3__ValidationRequest*) deserialize from a stream
/// - int soap_write_ns3__ValidationRequest(soap*, ns3__ValidationRequest*) serialize to a stream
/// - ns3__ValidationRequest* ns3__ValidationRequest::soap_dup(soap*) returns deep copy of ns3__ValidationRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ValidationRequest::soap_del() deep deletes ns3__ValidationRequest data members, use only after ns3__ValidationRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ValidationRequest : public xsd__anyType
{ public:
/// Element "Hash" of XSD type xs:base64Binary.
    xsd__base64Binary*                   Hash                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Signature" of XSD type xs:base64Binary.
    xsd__base64Binary*                   Signature                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "X509Certificate" of XSD type xs:base64Binary.
    xsd__base64Binary*                   X509Certificate                nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationResponse is a complexType.
///
/// class ns3__ValidationResponse operations:
/// - ns3__ValidationResponse* soap_new_ns3__ValidationResponse(soap*) allocate and default initialize
/// - ns3__ValidationResponse* soap_new_ns3__ValidationResponse(soap*, int num) allocate array and default initialize values
/// - ns3__ValidationResponse* soap_new_req_ns3__ValidationResponse(soap*, ...) allocate, set required members
/// - ns3__ValidationResponse* soap_new_set_ns3__ValidationResponse(soap*, ...) allocate, set all public members
/// - ns3__ValidationResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ValidationResponse(soap*, ns3__ValidationResponse*) deserialize from a stream
/// - int soap_write_ns3__ValidationResponse(soap*, ns3__ValidationResponse*) serialize to a stream
/// - ns3__ValidationResponse* ns3__ValidationResponse::soap_dup(soap*) returns deep copy of ns3__ValidationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ValidationResponse::soap_del() deep deletes ns3__ValidationResponse data members, use only after ns3__ValidationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ValidationResponse : public xsd__anyType
{ public:
/// Element "Status" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
    ns3__SignStatus*                     Status                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "ValidationResult" of XSD type xs:boolean.
    bool*                                ValidationResult               nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse is a complexType.
///
/// class ns3__SignResponse operations:
/// - ns3__SignResponse* soap_new_ns3__SignResponse(soap*) allocate and default initialize
/// - ns3__SignResponse* soap_new_ns3__SignResponse(soap*, int num) allocate array and default initialize values
/// - ns3__SignResponse* soap_new_req_ns3__SignResponse(soap*, ...) allocate, set required members
/// - ns3__SignResponse* soap_new_set_ns3__SignResponse(soap*, ...) allocate, set all public members
/// - ns3__SignResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SignResponse(soap*, ns3__SignResponse*) deserialize from a stream
/// - int soap_write_ns3__SignResponse(soap*, ns3__SignResponse*) serialize to a stream
/// - ns3__SignResponse* ns3__SignResponse::soap_dup(soap*) returns deep copy of ns3__SignResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SignResponse::soap_del() deep deletes ns3__SignResponse data members, use only after ns3__SignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SignResponse : public xsd__anyType
{ public:
/// Element "Signature" of XSD type xs:base64Binary.
    xsd__base64Binary*                   Signature                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Status" of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
    ns3__SignStatus*                     Status                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest is a complexType.
///
/// class ns3__MultipleSignRequest operations:
/// - ns3__MultipleSignRequest* soap_new_ns3__MultipleSignRequest(soap*) allocate and default initialize
/// - ns3__MultipleSignRequest* soap_new_ns3__MultipleSignRequest(soap*, int num) allocate array and default initialize values
/// - ns3__MultipleSignRequest* soap_new_req_ns3__MultipleSignRequest(soap*, ...) allocate, set required members
/// - ns3__MultipleSignRequest* soap_new_set_ns3__MultipleSignRequest(soap*, ...) allocate, set all public members
/// - ns3__MultipleSignRequest::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MultipleSignRequest(soap*, ns3__MultipleSignRequest*) deserialize from a stream
/// - int soap_write_ns3__MultipleSignRequest(soap*, ns3__MultipleSignRequest*) serialize to a stream
/// - ns3__MultipleSignRequest* ns3__MultipleSignRequest::soap_dup(soap*) returns deep copy of ns3__MultipleSignRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MultipleSignRequest::soap_del() deep deletes ns3__MultipleSignRequest data members, use only after ns3__MultipleSignRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MultipleSignRequest : public xsd__anyType
{ public:
/// Element "ApplicationId" of XSD type xs:base64Binary.
    xsd__base64Binary*                   ApplicationId                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Pin" of XSD type xs:string.
    std::string*                         Pin                            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "UserId" of XSD type xs:string.
    std::string*                         UserId                         nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure is a complexType.
///
/// class ns3__ArrayOfHashStructure operations:
/// - ns3__ArrayOfHashStructure* soap_new_ns3__ArrayOfHashStructure(soap*) allocate and default initialize
/// - ns3__ArrayOfHashStructure* soap_new_ns3__ArrayOfHashStructure(soap*, int num) allocate array and default initialize values
/// - ns3__ArrayOfHashStructure* soap_new_req_ns3__ArrayOfHashStructure(soap*, ...) allocate, set required members
/// - ns3__ArrayOfHashStructure* soap_new_set_ns3__ArrayOfHashStructure(soap*, ...) allocate, set all public members
/// - ns3__ArrayOfHashStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ArrayOfHashStructure(soap*, ns3__ArrayOfHashStructure*) deserialize from a stream
/// - int soap_write_ns3__ArrayOfHashStructure(soap*, ns3__ArrayOfHashStructure*) serialize to a stream
/// - ns3__ArrayOfHashStructure* ns3__ArrayOfHashStructure::soap_dup(soap*) returns deep copy of ns3__ArrayOfHashStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ArrayOfHashStructure::soap_del() deep deletes ns3__ArrayOfHashStructure data members, use only after ns3__ArrayOfHashStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ArrayOfHashStructure : public xsd__anyType
{ public:
/// Vector of ns3__HashStructure* of length 0..unbounded.
    std::vector<ns3__HashStructure*    > HashStructure                  0;	///< Elements.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":HashStructure is a complexType.
///
/// class ns3__HashStructure operations:
/// - ns3__HashStructure* soap_new_ns3__HashStructure(soap*) allocate and default initialize
/// - ns3__HashStructure* soap_new_ns3__HashStructure(soap*, int num) allocate array and default initialize values
/// - ns3__HashStructure* soap_new_req_ns3__HashStructure(soap*, ...) allocate, set required members
/// - ns3__HashStructure* soap_new_set_ns3__HashStructure(soap*, ...) allocate, set all public members
/// - ns3__HashStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__HashStructure(soap*, ns3__HashStructure*) deserialize from a stream
/// - int soap_write_ns3__HashStructure(soap*, ns3__HashStructure*) serialize to a stream
/// - ns3__HashStructure* ns3__HashStructure::soap_dup(soap*) returns deep copy of ns3__HashStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__HashStructure::soap_del() deep deletes ns3__HashStructure data members, use only after ns3__HashStructure::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__HashStructure : public xsd__anyType
{ public:
/// Element "Hash" of XSD type xs:base64Binary.
    xsd__base64Binary*                   Hash                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "id" of XSD type xs:string.
    std::string*                         id                             nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of XSD type xs:anyType.
// "_ser__anyType" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of XSD type xs:anyURI.
// "_ser__anyURI" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of XSD type xs:base64Binary.
// "_ser__base64Binary" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of XSD type xs:boolean.
// "_ser__boolean" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of XSD type xs:byte.
// "_ser__byte" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of XSD type xs:dateTime.
// "_ser__dateTime" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of XSD type xs:decimal.
// "_ser__decimal" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of XSD type xs:double.
// "_ser__double" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of XSD type xs:float.
// "_ser__float" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of XSD type xs:int.
// "_ser__int" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of XSD type xs:long.
// "_ser__long" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of XSD type xs:QName.
// "_ser__QName" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of XSD type xs:short.
// "_ser__short" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of XSD type xs:string.
// "_ser__string" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of XSD type xs:unsignedByte.
// "_ser__unsignedByte" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of XSD type xs:unsignedInt.
// "_ser__unsignedInt" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of XSD type xs:unsignedLong.
// "_ser__unsignedLong" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of XSD type xs:unsignedShort.
// "_ser__unsignedShort" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":char.
// "_ser__char" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
// "_ser__duration" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
// "_ser__guid" element definition intentionally left blank.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
typedef xsd__QName _ser__FactoryType;

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
typedef xsd__ID _ser__Id;

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
typedef xsd__IDREF _ser__Ref;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest.
typedef ns3__SignRequest _ns3__SignRequest;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
typedef ns3__SignStatus _ns3__SignStatus;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationRequest of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationRequest.
typedef ns3__ValidationRequest _ns3__ValidationRequest;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationResponse of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ValidationResponse.
typedef ns3__ValidationResponse _ns3__ValidationResponse;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse.
typedef ns3__SignResponse _ns3__SignResponse;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest.
typedef ns3__MultipleSignRequest _ns3__MultipleSignRequest;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure.
typedef ns3__ArrayOfHashStructure _ns3__ArrayOfHashStructure;

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":HashStructure of XSD type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":HashStructure.
typedef ns3__HashStructure _ns3__HashStructure;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns2  service name:	BasicHttpBinding_USCORECCMovelSignature 
//gsoap ns2  service type:	CCMovelSignature 
//gsoap ns2  service port:	https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc 
//gsoap ns2  service namespace:	http://Ama.Authentication.Service/ 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage CCMovelDigitalSignature Definitions

@section CCMovelDigitalSignature_bindings Service Bindings

  - @ref BasicHttpBinding_USCORECCMovelSignature

@section CCMovelDigitalSignature_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCORECCMovelSignature Binding "BasicHttpBinding_USCORECCMovelSignature"

@section BasicHttpBinding_USCORECCMovelSignature_operations Operations of Binding "BasicHttpBinding_USCORECCMovelSignature"

  - @ref __ns2__CCMovelSign

  - @ref __ns2__CCMovelValidateSignature

  - @ref __ns2__GetCertificate

  - @ref __ns2__ValidateOtp

  - @ref __ns2__CCMovelMultipleSign

@section BasicHttpBinding_USCORECCMovelSignature_ports Default endpoints of Binding "BasicHttpBinding_USCORECCMovelSignature"

  - https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

@section BasicHttpBinding_USCORECCMovelSignature_policy Policy of Binding "BasicHttpBinding_USCORECCMovelSignature"

See Section @ref BasicHttpBinding_USCORECCMovelSignature_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- [7.3] Transport Binding requirements:
				- [7.1] Security Binding Algorithm Suite requirements:
					- Basic256
				- [7.2] WS-Security Header Layout requirements:
					- WS-Security headers 'declare before use' required (gSOAP default)
				- Transport requirements:
					- [5.4.10] HTTPS required:

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Custom SOAP Header                                                         *
 *                                                                            *
\******************************************************************************/

#import "wsa.h"
struct SOAP_ENV__Header
{
   _wsa__MessageID    wsa__MessageID 0;
   _wsa__RelatesTo *  wsa__RelatesTo 0;
   _wsa__From *       wsa__From      0;
   _wsa__ReplyTo *    wsa__ReplyTo   0;
   _wsa__FaultTo *    wsa__FaultTo   0;
   _wsa__To           wsa__To        0;
   _wsa__Action       wsa__Action    0;
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCORECCMovelSignature                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CCMovelSign                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__CCMovelSign" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
    - "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSignResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CCMovelSign(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns2__CCMovelSign*                  ns2__CCMovelSign,
    // output parameters:
    _ns2__CCMovelSignResponse          &ns2__CCMovelSignResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CCMovelSign(
    struct soap *soap,
    // input parameters:
    _ns2__CCMovelSign*                  ns2__CCMovelSign,
    // output parameters:
    _ns2__CCMovelSignResponse          &ns2__CCMovelSignResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	CCMovelSign SOAP
//gsoap ns2  service method-style:	CCMovelSign document
//gsoap ns2  service method-encoding:	CCMovelSign literal
//gsoap ns2  service method-input-action:	CCMovelSign http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign
//gsoap ns2  service method-output-action:	CCMovelSign http://Ama.Authentication.Service/CCMovelSignature/CCMovelSignResponse
int __ns2__CCMovelSign(
    _ns2__CCMovelSign*                  ns2__CCMovelSign,	///< Input parameter
    _ns2__CCMovelSignResponse          &ns2__CCMovelSignResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CCMovelValidateSignature                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__CCMovelValidateSignature" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
    - "http://Ama.Authentication.Service/CCMovelSignature/CCMovelValidateSignature"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelValidateSignature"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelValidateSignatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CCMovelValidateSignature(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns2__CCMovelValidateSignature*     ns2__CCMovelValidateSignature,
    // output parameters:
    _ns2__CCMovelValidateSignatureResponse&ns2__CCMovelValidateSignatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CCMovelValidateSignature(
    struct soap *soap,
    // input parameters:
    _ns2__CCMovelValidateSignature*     ns2__CCMovelValidateSignature,
    // output parameters:
    _ns2__CCMovelValidateSignatureResponse&ns2__CCMovelValidateSignatureResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	CCMovelValidateSignature SOAP
//gsoap ns2  service method-style:	CCMovelValidateSignature document
//gsoap ns2  service method-encoding:	CCMovelValidateSignature literal
//gsoap ns2  service method-input-action:	CCMovelValidateSignature http://Ama.Authentication.Service/CCMovelSignature/CCMovelValidateSignature
//gsoap ns2  service method-output-action:	CCMovelValidateSignature http://Ama.Authentication.Service/CCMovelSignature/CCMovelValidateSignatureResponse
int __ns2__CCMovelValidateSignature(
    _ns2__CCMovelValidateSignature*     ns2__CCMovelValidateSignature,	///< Input parameter
    _ns2__CCMovelValidateSignatureResponse&ns2__CCMovelValidateSignatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCertificate                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__GetCertificate" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
    - "http://Ama.Authentication.Service/CCMovelSignature/GetCertificate"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/GetCertificate"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/GetCertificateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCertificate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns2__GetCertificate*               ns2__GetCertificate,
    // output parameters:
    _ns2__GetCertificateResponse       &ns2__GetCertificateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCertificate(
    struct soap *soap,
    // input parameters:
    _ns2__GetCertificate*               ns2__GetCertificate,
    // output parameters:
    _ns2__GetCertificateResponse       &ns2__GetCertificateResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	GetCertificate SOAP
//gsoap ns2  service method-style:	GetCertificate document
//gsoap ns2  service method-encoding:	GetCertificate literal
//gsoap ns2  service method-input-action:	GetCertificate http://Ama.Authentication.Service/CCMovelSignature/GetCertificate
//gsoap ns2  service method-output-action:	GetCertificate http://Ama.Authentication.Service/CCMovelSignature/GetCertificateResponse
int __ns2__GetCertificate(
    _ns2__GetCertificate*               ns2__GetCertificate,	///< Input parameter
    _ns2__GetCertificateResponse       &ns2__GetCertificateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__ValidateOtp                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__ValidateOtp" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
    - "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__ValidateOtp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns2__ValidateOtp*                  ns2__ValidateOtp,
    // output parameters:
    _ns2__ValidateOtpResponse          &ns2__ValidateOtpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__ValidateOtp(
    struct soap *soap,
    // input parameters:
    _ns2__ValidateOtp*                  ns2__ValidateOtp,
    // output parameters:
    _ns2__ValidateOtpResponse          &ns2__ValidateOtpResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	ValidateOtp SOAP
//gsoap ns2  service method-style:	ValidateOtp document
//gsoap ns2  service method-encoding:	ValidateOtp literal
//gsoap ns2  service method-input-action:	ValidateOtp http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp
//gsoap ns2  service method-output-action:	ValidateOtp http://Ama.Authentication.Service/CCMovelSignature/ValidateOtpResponse
int __ns2__ValidateOtp(
    _ns2__ValidateOtp*                  ns2__ValidateOtp,	///< Input parameter
    _ns2__ValidateOtpResponse          &ns2__ValidateOtpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CCMovelMultipleSign                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__CCMovelMultipleSign" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
    - "http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSign"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSign"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSignResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CCMovelMultipleSign(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns2__CCMovelMultipleSign*          ns2__CCMovelMultipleSign,
    // output parameters:
    _ns2__CCMovelMultipleSignResponse  &ns2__CCMovelMultipleSignResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CCMovelMultipleSign(
    struct soap *soap,
    // input parameters:
    _ns2__CCMovelMultipleSign*          ns2__CCMovelMultipleSign,
    // output parameters:
    _ns2__CCMovelMultipleSignResponse  &ns2__CCMovelMultipleSignResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	CCMovelMultipleSign SOAP
//gsoap ns2  service method-style:	CCMovelMultipleSign document
//gsoap ns2  service method-encoding:	CCMovelMultipleSign literal
//gsoap ns2  service method-input-action:	CCMovelMultipleSign http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSign
//gsoap ns2  service method-output-action:	CCMovelMultipleSign http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSignResponse
int __ns2__CCMovelMultipleSign(
    _ns2__CCMovelMultipleSign*          ns2__CCMovelMultipleSign,	///< Input parameter
    _ns2__CCMovelMultipleSignResponse  &ns2__CCMovelMultipleSignResponse	///< Output parameter
);

/**

@page BasicHttpBinding_USCORECCMovelSignature Binding "BasicHttpBinding_USCORECCMovelSignature"

@section BasicHttpBinding_USCORECCMovelSignature_policy_enablers Policy Enablers of Binding "BasicHttpBinding_USCORECCMovelSignature"

Based on policies and protocol requirements, this service requires importing "wsse.h"

  - WS-Policy reminders and enablers (when applicable):
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Discovery 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Discovery 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsse.h"

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "http://Ama.Authentication.Service/"

  - <ns2:CCMovelSign> @ref _ns2__CCMovelSign
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CCMovelSign(struct soap*, _ns2__CCMovelSign*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CCMovelSign(struct soap*, _ns2__CCMovelSign*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__CCMovelSign(struct soap*, const char *URL, _ns2__CCMovelSign*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__CCMovelSign(struct soap*, const char *URL, _ns2__CCMovelSign*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__CCMovelSign(struct soap*, const char *URL, _ns2__CCMovelSign*);
    soap_POST_recv__ns2__CCMovelSign(struct soap*, _ns2__CCMovelSign*);
    @endcode

  - <ns2:CCMovelSignResponse> @ref _ns2__CCMovelSignResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CCMovelSignResponse(struct soap*, _ns2__CCMovelSignResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CCMovelSignResponse(struct soap*, _ns2__CCMovelSignResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__CCMovelSignResponse(struct soap*, const char *URL, _ns2__CCMovelSignResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__CCMovelSignResponse(struct soap*, const char *URL, _ns2__CCMovelSignResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__CCMovelSignResponse(struct soap*, const char *URL, _ns2__CCMovelSignResponse*);
    soap_POST_recv__ns2__CCMovelSignResponse(struct soap*, _ns2__CCMovelSignResponse*);
    @endcode

  - <ns2:CCMovelValidateSignature> @ref _ns2__CCMovelValidateSignature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CCMovelValidateSignature(struct soap*, _ns2__CCMovelValidateSignature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CCMovelValidateSignature(struct soap*, _ns2__CCMovelValidateSignature*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__CCMovelValidateSignature(struct soap*, const char *URL, _ns2__CCMovelValidateSignature*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__CCMovelValidateSignature(struct soap*, const char *URL, _ns2__CCMovelValidateSignature*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__CCMovelValidateSignature(struct soap*, const char *URL, _ns2__CCMovelValidateSignature*);
    soap_POST_recv__ns2__CCMovelValidateSignature(struct soap*, _ns2__CCMovelValidateSignature*);
    @endcode

  - <ns2:CCMovelValidateSignatureResponse> @ref _ns2__CCMovelValidateSignatureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CCMovelValidateSignatureResponse(struct soap*, _ns2__CCMovelValidateSignatureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CCMovelValidateSignatureResponse(struct soap*, _ns2__CCMovelValidateSignatureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__CCMovelValidateSignatureResponse(struct soap*, const char *URL, _ns2__CCMovelValidateSignatureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__CCMovelValidateSignatureResponse(struct soap*, const char *URL, _ns2__CCMovelValidateSignatureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__CCMovelValidateSignatureResponse(struct soap*, const char *URL, _ns2__CCMovelValidateSignatureResponse*);
    soap_POST_recv__ns2__CCMovelValidateSignatureResponse(struct soap*, _ns2__CCMovelValidateSignatureResponse*);
    @endcode

  - <ns2:GetCertificate> @ref _ns2__GetCertificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCertificate(struct soap*, _ns2__GetCertificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCertificate(struct soap*, _ns2__GetCertificate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__GetCertificate(struct soap*, const char *URL, _ns2__GetCertificate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__GetCertificate(struct soap*, const char *URL, _ns2__GetCertificate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__GetCertificate(struct soap*, const char *URL, _ns2__GetCertificate*);
    soap_POST_recv__ns2__GetCertificate(struct soap*, _ns2__GetCertificate*);
    @endcode

  - <ns2:GetCertificateResponse> @ref _ns2__GetCertificateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GetCertificateResponse(struct soap*, _ns2__GetCertificateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GetCertificateResponse(struct soap*, _ns2__GetCertificateResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__GetCertificateResponse(struct soap*, const char *URL, _ns2__GetCertificateResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__GetCertificateResponse(struct soap*, const char *URL, _ns2__GetCertificateResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__GetCertificateResponse(struct soap*, const char *URL, _ns2__GetCertificateResponse*);
    soap_POST_recv__ns2__GetCertificateResponse(struct soap*, _ns2__GetCertificateResponse*);
    @endcode

  - <ns2:ValidateOtp> @ref _ns2__ValidateOtp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ValidateOtp(struct soap*, _ns2__ValidateOtp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ValidateOtp(struct soap*, _ns2__ValidateOtp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ValidateOtp(struct soap*, const char *URL, _ns2__ValidateOtp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ValidateOtp(struct soap*, const char *URL, _ns2__ValidateOtp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ValidateOtp(struct soap*, const char *URL, _ns2__ValidateOtp*);
    soap_POST_recv__ns2__ValidateOtp(struct soap*, _ns2__ValidateOtp*);
    @endcode

  - <ns2:ValidateOtpResponse> @ref _ns2__ValidateOtpResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ValidateOtpResponse(struct soap*, _ns2__ValidateOtpResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ValidateOtpResponse(struct soap*, _ns2__ValidateOtpResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ValidateOtpResponse(struct soap*, const char *URL, _ns2__ValidateOtpResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ValidateOtpResponse(struct soap*, const char *URL, _ns2__ValidateOtpResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ValidateOtpResponse(struct soap*, const char *URL, _ns2__ValidateOtpResponse*);
    soap_POST_recv__ns2__ValidateOtpResponse(struct soap*, _ns2__ValidateOtpResponse*);
    @endcode

  - <ns2:CCMovelMultipleSign> @ref _ns2__CCMovelMultipleSign
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CCMovelMultipleSign(struct soap*, _ns2__CCMovelMultipleSign*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CCMovelMultipleSign(struct soap*, _ns2__CCMovelMultipleSign*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__CCMovelMultipleSign(struct soap*, const char *URL, _ns2__CCMovelMultipleSign*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__CCMovelMultipleSign(struct soap*, const char *URL, _ns2__CCMovelMultipleSign*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__CCMovelMultipleSign(struct soap*, const char *URL, _ns2__CCMovelMultipleSign*);
    soap_POST_recv__ns2__CCMovelMultipleSign(struct soap*, _ns2__CCMovelMultipleSign*);
    @endcode

  - <ns2:CCMovelMultipleSignResponse> @ref _ns2__CCMovelMultipleSignResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__CCMovelMultipleSignResponse(struct soap*, _ns2__CCMovelMultipleSignResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__CCMovelMultipleSignResponse(struct soap*, _ns2__CCMovelMultipleSignResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__CCMovelMultipleSignResponse(struct soap*, const char *URL, _ns2__CCMovelMultipleSignResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__CCMovelMultipleSignResponse(struct soap*, const char *URL, _ns2__CCMovelMultipleSignResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__CCMovelMultipleSignResponse(struct soap*, const char *URL, _ns2__CCMovelMultipleSignResponse*);
    soap_POST_recv__ns2__CCMovelMultipleSignResponse(struct soap*, _ns2__CCMovelMultipleSignResponse*);
    @endcode

@section ser Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ser:anyType> @ref _ser__anyType
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__anyType(struct soap*, struct __ser__anyType);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__anyType(struct soap*, struct __ser__anyType);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__anyType(struct soap*, const char *URL, struct __ser__anyType);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__anyType(struct soap*, const char *URL, struct __ser__anyType);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__anyType(struct soap*, const char *URL, struct __ser__anyType);
    soap_POST_recv__ser__anyType(struct soap*, struct __ser__anyType);
    @endcode

  - <ser:anyURI> @ref _ser__anyURI
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__anyURI(struct soap*, xsd__anyURI*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__anyURI(struct soap*, xsd__anyURI*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__anyURI(struct soap*, const char *URL, xsd__anyURI*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__anyURI(struct soap*, const char *URL, xsd__anyURI*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__anyURI(struct soap*, const char *URL, xsd__anyURI*);
    soap_POST_recv__ser__anyURI(struct soap*, xsd__anyURI*);
    @endcode

  - <ser:base64Binary> @ref _ser__base64Binary
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__base64Binary(struct soap*, xsd__base64Binary*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__base64Binary(struct soap*, xsd__base64Binary*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__base64Binary(struct soap*, const char *URL, xsd__base64Binary*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__base64Binary(struct soap*, const char *URL, xsd__base64Binary*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__base64Binary(struct soap*, const char *URL, xsd__base64Binary*);
    soap_POST_recv__ser__base64Binary(struct soap*, xsd__base64Binary*);
    @endcode

  - <ser:boolean> @ref _ser__boolean
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__boolean(struct soap*, bool*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__boolean(struct soap*, bool*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__boolean(struct soap*, const char *URL, bool*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__boolean(struct soap*, const char *URL, bool*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__boolean(struct soap*, const char *URL, bool*);
    soap_POST_recv__ser__boolean(struct soap*, bool*);
    @endcode

  - <ser:byte> @ref _ser__byte
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__byte(struct soap*, xsd__byte*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__byte(struct soap*, xsd__byte*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__byte(struct soap*, const char *URL, xsd__byte*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__byte(struct soap*, const char *URL, xsd__byte*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__byte(struct soap*, const char *URL, xsd__byte*);
    soap_POST_recv__ser__byte(struct soap*, xsd__byte*);
    @endcode

  - <ser:dateTime> @ref _ser__dateTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__dateTime(struct soap*, time_t*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__dateTime(struct soap*, time_t*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__dateTime(struct soap*, const char *URL, time_t*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__dateTime(struct soap*, const char *URL, time_t*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__dateTime(struct soap*, const char *URL, time_t*);
    soap_POST_recv__ser__dateTime(struct soap*, time_t*);
    @endcode

  - <ser:decimal> @ref _ser__decimal
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__decimal(struct soap*, xsd__decimal*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__decimal(struct soap*, xsd__decimal*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__decimal(struct soap*, const char *URL, xsd__decimal*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__decimal(struct soap*, const char *URL, xsd__decimal*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__decimal(struct soap*, const char *URL, xsd__decimal*);
    soap_POST_recv__ser__decimal(struct soap*, xsd__decimal*);
    @endcode

  - <ser:double> @ref _ser__double
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__double(struct soap*, double*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__double(struct soap*, double*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__double(struct soap*, const char *URL, double*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__double(struct soap*, const char *URL, double*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__double(struct soap*, const char *URL, double*);
    soap_POST_recv__ser__double(struct soap*, double*);
    @endcode

  - <ser:float> @ref _ser__float
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__float(struct soap*, float*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__float(struct soap*, float*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__float(struct soap*, const char *URL, float*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__float(struct soap*, const char *URL, float*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__float(struct soap*, const char *URL, float*);
    soap_POST_recv__ser__float(struct soap*, float*);
    @endcode

  - <ser:int> @ref _ser__int
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__int(struct soap*, int*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__int(struct soap*, int*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__int(struct soap*, const char *URL, int*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__int(struct soap*, const char *URL, int*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__int(struct soap*, const char *URL, int*);
    soap_POST_recv__ser__int(struct soap*, int*);
    @endcode

  - <ser:long> @ref _ser__long
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__long(struct soap*, LONG64*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__long(struct soap*, LONG64*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__long(struct soap*, const char *URL, LONG64*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__long(struct soap*, const char *URL, LONG64*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__long(struct soap*, const char *URL, LONG64*);
    soap_POST_recv__ser__long(struct soap*, LONG64*);
    @endcode

  - <ser:QName> @ref _ser__QName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__QName(struct soap*, xsd__QName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__QName(struct soap*, xsd__QName*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__QName(struct soap*, const char *URL, xsd__QName*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__QName(struct soap*, const char *URL, xsd__QName*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__QName(struct soap*, const char *URL, xsd__QName*);
    soap_POST_recv__ser__QName(struct soap*, xsd__QName*);
    @endcode

  - <ser:short> @ref _ser__short
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__short(struct soap*, short*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__short(struct soap*, short*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__short(struct soap*, const char *URL, short*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__short(struct soap*, const char *URL, short*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__short(struct soap*, const char *URL, short*);
    soap_POST_recv__ser__short(struct soap*, short*);
    @endcode

  - <ser:string> @ref _ser__string
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__string(struct soap*, std::string*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__string(struct soap*, std::string*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__string(struct soap*, const char *URL, std::string*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__string(struct soap*, const char *URL, std::string*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__string(struct soap*, const char *URL, std::string*);
    soap_POST_recv__ser__string(struct soap*, std::string*);
    @endcode

  - <ser:unsignedByte> @ref _ser__unsignedByte
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__unsignedByte(struct soap*, xsd__unsignedByte*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__unsignedByte(struct soap*, xsd__unsignedByte*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__unsignedByte(struct soap*, const char *URL, xsd__unsignedByte*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__unsignedByte(struct soap*, const char *URL, xsd__unsignedByte*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__unsignedByte(struct soap*, const char *URL, xsd__unsignedByte*);
    soap_POST_recv__ser__unsignedByte(struct soap*, xsd__unsignedByte*);
    @endcode

  - <ser:unsignedInt> @ref _ser__unsignedInt
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__unsignedInt(struct soap*, unsigned int*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__unsignedInt(struct soap*, unsigned int*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__unsignedInt(struct soap*, const char *URL, unsigned int*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__unsignedInt(struct soap*, const char *URL, unsigned int*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__unsignedInt(struct soap*, const char *URL, unsigned int*);
    soap_POST_recv__ser__unsignedInt(struct soap*, unsigned int*);
    @endcode

  - <ser:unsignedLong> @ref _ser__unsignedLong
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__unsignedLong(struct soap*, ULONG64*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__unsignedLong(struct soap*, ULONG64*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__unsignedLong(struct soap*, const char *URL, ULONG64*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__unsignedLong(struct soap*, const char *URL, ULONG64*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__unsignedLong(struct soap*, const char *URL, ULONG64*);
    soap_POST_recv__ser__unsignedLong(struct soap*, ULONG64*);
    @endcode

  - <ser:unsignedShort> @ref _ser__unsignedShort
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__unsignedShort(struct soap*, unsigned short*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__unsignedShort(struct soap*, unsigned short*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__unsignedShort(struct soap*, const char *URL, unsigned short*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__unsignedShort(struct soap*, const char *URL, unsigned short*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__unsignedShort(struct soap*, const char *URL, unsigned short*);
    soap_POST_recv__ser__unsignedShort(struct soap*, unsigned short*);
    @endcode

  - <ser:char> @ref _ser__char
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__char(struct soap*, int*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__char(struct soap*, int*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__char(struct soap*, const char *URL, int*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__char(struct soap*, const char *URL, int*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__char(struct soap*, const char *URL, int*);
    soap_POST_recv__ser__char(struct soap*, int*);
    @endcode

  - <ser:duration> @ref _ser__duration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__duration(struct soap*, xsd__duration*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__duration(struct soap*, xsd__duration*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__duration(struct soap*, const char *URL, xsd__duration*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__duration(struct soap*, const char *URL, xsd__duration*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__duration(struct soap*, const char *URL, xsd__duration*);
    soap_POST_recv__ser__duration(struct soap*, xsd__duration*);
    @endcode

  - <ser:guid> @ref _ser__guid
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ser__guid(struct soap*, char*);
    // Writer (returns SOAP_OK on success):
    soap_write__ser__guid(struct soap*, char*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ser__guid(struct soap*, const char *URL, char*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ser__guid(struct soap*, const char *URL, char*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ser__guid(struct soap*, const char *URL, char*);
    soap_POST_recv__ser__guid(struct soap*, char*);
    @endcode

@section ns3 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"

  - <ns3:SignRequest> @ref _ns3__SignRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__SignRequest(struct soap*, _ns3__SignRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__SignRequest(struct soap*, _ns3__SignRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__SignRequest(struct soap*, const char *URL, _ns3__SignRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__SignRequest(struct soap*, const char *URL, _ns3__SignRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__SignRequest(struct soap*, const char *URL, _ns3__SignRequest*);
    soap_POST_recv__ns3__SignRequest(struct soap*, _ns3__SignRequest*);
    @endcode

  - <ns3:SignStatus> @ref _ns3__SignStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__SignStatus(struct soap*, _ns3__SignStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__SignStatus(struct soap*, _ns3__SignStatus*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__SignStatus(struct soap*, const char *URL, _ns3__SignStatus*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__SignStatus(struct soap*, const char *URL, _ns3__SignStatus*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__SignStatus(struct soap*, const char *URL, _ns3__SignStatus*);
    soap_POST_recv__ns3__SignStatus(struct soap*, _ns3__SignStatus*);
    @endcode

  - <ns3:ValidationRequest> @ref _ns3__ValidationRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__ValidationRequest(struct soap*, _ns3__ValidationRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__ValidationRequest(struct soap*, _ns3__ValidationRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__ValidationRequest(struct soap*, const char *URL, _ns3__ValidationRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__ValidationRequest(struct soap*, const char *URL, _ns3__ValidationRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__ValidationRequest(struct soap*, const char *URL, _ns3__ValidationRequest*);
    soap_POST_recv__ns3__ValidationRequest(struct soap*, _ns3__ValidationRequest*);
    @endcode

  - <ns3:ValidationResponse> @ref _ns3__ValidationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__ValidationResponse(struct soap*, _ns3__ValidationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__ValidationResponse(struct soap*, _ns3__ValidationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__ValidationResponse(struct soap*, const char *URL, _ns3__ValidationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__ValidationResponse(struct soap*, const char *URL, _ns3__ValidationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__ValidationResponse(struct soap*, const char *URL, _ns3__ValidationResponse*);
    soap_POST_recv__ns3__ValidationResponse(struct soap*, _ns3__ValidationResponse*);
    @endcode

  - <ns3:SignResponse> @ref _ns3__SignResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__SignResponse(struct soap*, _ns3__SignResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__SignResponse(struct soap*, _ns3__SignResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__SignResponse(struct soap*, const char *URL, _ns3__SignResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__SignResponse(struct soap*, const char *URL, _ns3__SignResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__SignResponse(struct soap*, const char *URL, _ns3__SignResponse*);
    soap_POST_recv__ns3__SignResponse(struct soap*, _ns3__SignResponse*);
    @endcode

  - <ns3:MultipleSignRequest> @ref _ns3__MultipleSignRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__MultipleSignRequest(struct soap*, _ns3__MultipleSignRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__MultipleSignRequest(struct soap*, _ns3__MultipleSignRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__MultipleSignRequest(struct soap*, const char *URL, _ns3__MultipleSignRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__MultipleSignRequest(struct soap*, const char *URL, _ns3__MultipleSignRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__MultipleSignRequest(struct soap*, const char *URL, _ns3__MultipleSignRequest*);
    soap_POST_recv__ns3__MultipleSignRequest(struct soap*, _ns3__MultipleSignRequest*);
    @endcode

  - <ns3:ArrayOfHashStructure> @ref _ns3__ArrayOfHashStructure
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__ArrayOfHashStructure(struct soap*, _ns3__ArrayOfHashStructure*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__ArrayOfHashStructure(struct soap*, _ns3__ArrayOfHashStructure*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__ArrayOfHashStructure(struct soap*, const char *URL, _ns3__ArrayOfHashStructure*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__ArrayOfHashStructure(struct soap*, const char *URL, _ns3__ArrayOfHashStructure*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__ArrayOfHashStructure(struct soap*, const char *URL, _ns3__ArrayOfHashStructure*);
    soap_POST_recv__ns3__ArrayOfHashStructure(struct soap*, _ns3__ArrayOfHashStructure*);
    @endcode

  - <ns3:HashStructure> @ref _ns3__HashStructure
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__HashStructure(struct soap*, _ns3__HashStructure*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__HashStructure(struct soap*, _ns3__HashStructure*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__HashStructure(struct soap*, const char *URL, _ns3__HashStructure*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__HashStructure(struct soap*, const char *URL, _ns3__HashStructure*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__HashStructure(struct soap*, const char *URL, _ns3__HashStructure*);
    soap_POST_recv__ns3__HashStructure(struct soap*, _ns3__HashStructure*);
    @endcode

*/

/* End of CCMovelSignature.h */
