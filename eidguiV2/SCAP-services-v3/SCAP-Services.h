// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* SCAP-Services.h
   Generated by wsdl2h 2.8.49 from http://localhost:8000/ACService.wsdl http://localhost:8000/ASService.wsdl https://preprod.scap.autenticacao.gov.pt/SCAPSignature/AuthorizationService?wsdl https://preprod.scap.autenticacao.gov.pt/SCAPSignature/SignatureService?wsdl and typemap.dat
   2018-09-03 14:44:32 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on SCAP-Services.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService"
ns2 = "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService"
ns5 = "http://www.w3.org/2000/09/xmldsig#"
ns3 = "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"
ns4 = "http://www.cartaodecidadao.pt/ccc/commons/messages/Types"
ns6 = "http://uri.etsi.org/01903/v1.3.2#"
ns7 = "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG"
ns8 = "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"
ns9 = "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"
ns1 = "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService"
//gsoap ns1   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService"
//gsoap ns2   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

/// <PRE><BLOCKQUOTE>
///   XAdES schema for i-roles
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns5	"http://www.w3.org/2000/09/xmldsig#"
//gsoap ns5   schema namespace:	http://www.w3.org/2000/09/xmldsig#
//gsoap ns5   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"
//gsoap ns3   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"http://www.cartaodecidadao.pt/ccc/commons/messages/Types"
//gsoap ns4   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/Types
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

/// <PRE><BLOCKQUOTE>
///   XAdES schema for QualifyingProperties from ETSI
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns6	"http://uri.etsi.org/01903/v1.3.2#"
//gsoap ns6   schema namespace:	http://uri.etsi.org/01903/v1.3.2#
//gsoap ns6   schema form:	unqualified

/// <PRE><BLOCKQUOTE>
///   SVG schema for i-roles
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns7	"http://www.cartaodecidadao.pt/ccc/commons/messages/SVG"
//gsoap ns7   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/SVG
//gsoap ns7   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns8	"http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"
//gsoap ns8   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService
//gsoap ns8   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns9	"http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"
//gsoap ns9   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService
//gsoap ns9   schema elementForm:	qualified
//gsoap ns9   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature"
//gsoap ns1   schema namespace:	http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:date".
typedef std::string xsd__date;

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns2__AttributeRequestType.
class ns2__AttributeRequestType;

//  Forward declaration of class ns2__SingleAttributeRequestType.
class ns2__SingleAttributeRequestType;

//  Forward declaration of class ns2__PSAAttributeRequestType.
class ns2__PSAAttributeRequestType;

//  Forward declaration of class ns2__AttributeSupplierListType.
class ns2__AttributeSupplierListType;

//  Forward declaration of class ns2__AttributeResponseType.
class ns2__AttributeResponseType;

//  Forward declaration of class ns2__SingleAttributeResponseType.
class ns2__SingleAttributeResponseType;

//  Forward declaration of class ns2__UnsignedAttributeResponseType.
class ns2__UnsignedAttributeResponseType;

//  Forward declaration of class ns2__AttributesType.
class ns2__AttributesType;

//  Forward declaration of class ns2__UnsignedAttributesType.
class ns2__UnsignedAttributesType;

//  Forward declaration of class ns2__SignedAttributesType.
class ns2__SignedAttributesType;

//  Forward declaration of class ns2__UnsignedAttributesBasicType.
class ns2__UnsignedAttributesBasicType;

//  Forward declaration of class ns2__ResponseResult.
class ns2__ResponseResult;

//  Forward declaration of class ns5__SignatureType.
class ns5__SignatureType;

//  Forward declaration of class ns5__SignedInfoType.
class ns5__SignedInfoType;

//  Forward declaration of class ns5__CanonicalizationMethodType.
class ns5__CanonicalizationMethodType;

//  Forward declaration of class ns5__SignatureMethodType.
class ns5__SignatureMethodType;

//  Forward declaration of class ns5__ReferenceType.
class ns5__ReferenceType;

//  Forward declaration of class ns5__TransformsType.
class ns5__TransformsType;

//  Forward declaration of class ns5__TransformType.
class ns5__TransformType;

//  Forward declaration of class ns5__DigestMethodType.
class ns5__DigestMethodType;

//  Forward declaration of class ns5__KeyInfoType.
class ns5__KeyInfoType;

//  Forward declaration of class ns5__X509DataType.
class ns5__X509DataType;

//  Forward declaration of class ns5__ObjectType.
class ns5__ObjectType;

//  Forward declaration of class ns5__X509CertificateType.
class ns5__X509CertificateType;

//  Forward declaration of class ns5__DigestValueType.
class ns5__DigestValueType;

//  Forward declaration of class ns5__SignatureValueType.
class ns5__SignatureValueType;

//  Forward declaration of class ns3__AttributeType.
class ns3__AttributeType;

//  Forward declaration of class ns3__AttributeSupplierType.
class ns3__AttributeSupplierType;

//  Forward declaration of class ns3__PersonalDataType.
class ns3__PersonalDataType;

//  Forward declaration of class ns3__ExtraIDListType.
class ns3__ExtraIDListType;

//  Forward declaration of class ns3__ExtraIDType.
class ns3__ExtraIDType;

//  Forward declaration of class ns3__MainAttributeType.
class ns3__MainAttributeType;

//  Forward declaration of class ns3__LegalActListType.
class ns3__LegalActListType;

//  Forward declaration of class ns3__SubAttributeListType.
class ns3__SubAttributeListType;

//  Forward declaration of class ns3__SubAttributeType.
class ns3__SubAttributeType;

//  Forward declaration of class ns3__ResponseCodeStatusType.
class ns3__ResponseCodeStatusType;

//  Forward declaration of class ns6__QualifyingPropertiesType.
class ns6__QualifyingPropertiesType;

//  Forward declaration of class ns6__SignedPropertiesType.
class ns6__SignedPropertiesType;

//  Forward declaration of class ns6__SignedSignaturePropertiesType.
class ns6__SignedSignaturePropertiesType;

//  Forward declaration of class ns6__SigningCertificateType.
class ns6__SigningCertificateType;

//  Forward declaration of class ns6__CertType.
class ns6__CertType;

//  Forward declaration of class ns6__CertDigestType.
class ns6__CertDigestType;

//  Forward declaration of class ns6__IssuerSerialType.
class ns6__IssuerSerialType;

//  Forward declaration of class ns6__SignerRoleType.
class ns6__SignerRoleType;

//  Forward declaration of class ns6__ClaimedRolesListType.
class ns6__ClaimedRolesListType;

//  Forward declaration of class ns6__ClaimedRoleType.
class ns6__ClaimedRoleType;

//  Forward declaration of class ns6__UnsignedPropertiesType.
class ns6__UnsignedPropertiesType;

//  Forward declaration of class ns6__UnsignedSignaturePropertiesType.
class ns6__UnsignedSignaturePropertiesType;

//  Forward declaration of class ns6__CounterSignatureType.
class ns6__CounterSignatureType;

//  Forward declaration of class ns6__SignatureTimeStampType.
class ns6__SignatureTimeStampType;

//  Forward declaration of class ns6__CompleteCertificateRefsType.
class ns6__CompleteCertificateRefsType;

//  Forward declaration of class ns6__CertRefsType.
class ns6__CertRefsType;

//  Forward declaration of class ns6__CompleteRevocationRefsType.
class ns6__CompleteRevocationRefsType;

//  Forward declaration of class ns6__CRLRefsType.
class ns6__CRLRefsType;

//  Forward declaration of class ns6__CRLRefType.
class ns6__CRLRefType;

//  Forward declaration of class ns6__DigestAlgAndValueType.
class ns6__DigestAlgAndValueType;

//  Forward declaration of class ns6__CRLIdentifierType.
class ns6__CRLIdentifierType;

//  Forward declaration of class ns6__OCSPRefsType.
class ns6__OCSPRefsType;

//  Forward declaration of class ns6__OCSPRefType.
class ns6__OCSPRefType;

//  Forward declaration of class ns6__OCSPIdentifierType.
class ns6__OCSPIdentifierType;

//  Forward declaration of class ns6__ResponderIDType.
class ns6__ResponderIDType;

//  Forward declaration of class ns6__SigAndRefsTimeStampType.
class ns6__SigAndRefsTimeStampType;

//  Forward declaration of class ns6__CertificateValuesType.
class ns6__CertificateValuesType;

//  Forward declaration of class ns6__EncapsulatedX509CertificateType.
class ns6__EncapsulatedX509CertificateType;

//  Forward declaration of class ns6__RevocationValuesType.
class ns6__RevocationValuesType;

//  Forward declaration of class ns6__CRLValuesType.
class ns6__CRLValuesType;

//  Forward declaration of class ns6__EncapsulatedCRLValueType.
class ns6__EncapsulatedCRLValueType;

//  Forward declaration of class ns6__OCSPValuesType.
class ns6__OCSPValuesType;

//  Forward declaration of class ns6__EncapsulatedOCSPValueType.
class ns6__EncapsulatedOCSPValueType;

//  Forward declaration of class ns6__ArchiveTimeStampType.
class ns6__ArchiveTimeStampType;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":Issuer.
typedef _XML _ns6__Issuer;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":IssueTime.
typedef _XML _ns6__IssueTime;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":Number.
typedef _XML _ns6__Number;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ByName.
typedef _XML _ns6__ByName;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ProducedAt.
typedef _XML _ns6__ProducedAt;

//  Forward declaration of class ns7__SVGListType.
class ns7__SVGListType;

//  Forward declaration of class ns9__AttributeSupplierResponseType.
class ns9__AttributeSupplierResponseType;

//  Forward declaration of class ns1__PersonalData.
class ns1__PersonalData;

//  Forward declaration of class ns1__AttributeListType.
class ns1__AttributeListType;

//  Forward declaration of class ns1__AttributeType.
class ns1__AttributeType;

//  Forward declaration of class ns1__AttributeSupplierType.
class ns1__AttributeSupplierType;

//  Forward declaration of class ns1__MainAttributeType.
class ns1__MainAttributeType;

//  Forward declaration of class ns1__LegalActListType.
class ns1__LegalActListType;

//  Forward declaration of class ns1__SubAttributeListType.
class ns1__SubAttributeListType;

//  Forward declaration of class ns1__SubAttributeType.
class ns1__SubAttributeType;

//  Forward declaration of class ns1__Status.
class ns1__Status;

//  Forward declaration of class ns1__TransactionTypeList.
class ns1__TransactionTypeList;

//  Forward declaration of class ns1__TransactionType.
class ns1__TransactionType;

//  Forward declaration of class _ns1__AuthorizationRequest.
class _ns1__AuthorizationRequest;

//  Forward declaration of class _ns1__AuthorizationResponse.
class _ns1__AuthorizationResponse;

//  Forward declaration of class _ns1__SignatureRequest.
class _ns1__SignatureRequest;

//  Forward declaration of class _ns1__SignatureResponse.
class _ns1__SignatureResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509IssuerNameType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns5__X509IssuerNameType;

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509SerialNumberType is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns5__X509SerialNumberType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 40.
typedef std::string ns4__ProcessIDType : 40;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NameType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ValidityType is a simpleType restriction of XSD type xs:date.
///
typedef xsd__date ns4__ValidityType;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DateType is a simpleType restriction of XSD type xs:date.
///
typedef xsd__date ns4__DateType;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NICType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NICType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NIPCType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__CompanyNameType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ExtraIDValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__ExtraIDValueType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__AttributeIDType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":LegalActType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 2048.
typedef std::string ns4__LegalActType : 2048;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":SubAttributeValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__SubAttributeValueType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__DescriptionType : 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 5.
typedef std::string ns4__ResponseCodeType : 5;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeMessage is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 1024.
typedef std::string ns4__ResponseCodeMessage : 1024;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SigningTimeType is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t ns6__SigningTimeType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStampType is a simpleType restriction of XSD type xs:base64Binary.
///
typedef xsd__base64Binary ns6__EncapsulatedTimeStampType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":IssuerType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns6__IssuerType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":IssueTimeType is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t ns6__IssueTimeType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":NumberType is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns6__NumberType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ByNameType is a simpleType restriction of XSD type xs:string.
///
typedef std::string ns6__ByNameType;

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ProducedAtType is a simpleType restriction of XSD type xs:dateTime.
///
typedef time_t ns6__ProducedAtType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGType is a simpleType restriction of XSD type xs:base64Binary.
///
typedef xsd__base64Binary ns7__SVGType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeRequestType is a complexType.
///
/// class ns2__AttributeRequestType operations:
/// - ns2__AttributeRequestType* soap_new_ns2__AttributeRequestType(soap*) allocate and default initialize
/// - ns2__AttributeRequestType* soap_new_ns2__AttributeRequestType(soap*, int num) allocate array and default initialize values
/// - ns2__AttributeRequestType* soap_new_req_ns2__AttributeRequestType(soap*, ...) allocate, set required members
/// - ns2__AttributeRequestType* soap_new_set_ns2__AttributeRequestType(soap*, ...) allocate, set all public members
/// - ns2__AttributeRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AttributeRequestType(soap*, ns2__AttributeRequestType*) deserialize from a stream
/// - int soap_write_ns2__AttributeRequestType(soap*, ns2__AttributeRequestType*) serialize to a stream
/// - ns2__AttributeRequestType* ns2__AttributeRequestType::soap_dup(soap*) returns deep copy of ns2__AttributeRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeRequestType::soap_del() deep deletes ns2__AttributeRequestType data members, use only after ns2__AttributeRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeRequestType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "Citizen" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               Citizen                        1;	///< Required element.
/// Element "AttributeSuppliers" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeSupplierListType.
    ns2__AttributeSupplierListType*      AttributeSuppliers             1;	///< Required element.
/// Element "AllEnterprises" of XSD type xs:boolean.
    bool*                                AllEnterprises                 0;	///< Optional element.
/// Element "AppId" of XSD type xs:string.
    std::string*                         AppId                          0;	///< Optional element.
/// Element "AppName" of XSD type xs:string.
    std::string*                         AppName                        0;	///< Optional element.
/// Element "SecretKey" of XSD type xs:string.
    std::string*                         SecretKey                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeRequestType is a complexType.
///
/// class ns2__SingleAttributeRequestType operations:
/// - ns2__SingleAttributeRequestType* soap_new_ns2__SingleAttributeRequestType(soap*) allocate and default initialize
/// - ns2__SingleAttributeRequestType* soap_new_ns2__SingleAttributeRequestType(soap*, int num) allocate array and default initialize values
/// - ns2__SingleAttributeRequestType* soap_new_req_ns2__SingleAttributeRequestType(soap*, ...) allocate, set required members
/// - ns2__SingleAttributeRequestType* soap_new_set_ns2__SingleAttributeRequestType(soap*, ...) allocate, set all public members
/// - ns2__SingleAttributeRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SingleAttributeRequestType(soap*, ns2__SingleAttributeRequestType*) deserialize from a stream
/// - int soap_write_ns2__SingleAttributeRequestType(soap*, ns2__SingleAttributeRequestType*) serialize to a stream
/// - ns2__SingleAttributeRequestType* ns2__SingleAttributeRequestType::soap_dup(soap*) returns deep copy of ns2__SingleAttributeRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SingleAttributeRequestType::soap_del() deep deletes ns2__SingleAttributeRequestType data members, use only after ns2__SingleAttributeRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SingleAttributeRequestType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "Citizen" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               Citizen                        1;	///< Required element.
/// Element "AttributeSuppliers" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          AttributeSuppliers             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":PSAAttributeRequestType is a complexType.
///
/// class ns2__PSAAttributeRequestType operations:
/// - ns2__PSAAttributeRequestType* soap_new_ns2__PSAAttributeRequestType(soap*) allocate and default initialize
/// - ns2__PSAAttributeRequestType* soap_new_ns2__PSAAttributeRequestType(soap*, int num) allocate array and default initialize values
/// - ns2__PSAAttributeRequestType* soap_new_req_ns2__PSAAttributeRequestType(soap*, ...) allocate, set required members
/// - ns2__PSAAttributeRequestType* soap_new_set_ns2__PSAAttributeRequestType(soap*, ...) allocate, set all public members
/// - ns2__PSAAttributeRequestType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__PSAAttributeRequestType(soap*, ns2__PSAAttributeRequestType*) deserialize from a stream
/// - int soap_write_ns2__PSAAttributeRequestType(soap*, ns2__PSAAttributeRequestType*) serialize to a stream
/// - ns2__PSAAttributeRequestType* ns2__PSAAttributeRequestType::soap_dup(soap*) returns deep copy of ns2__PSAAttributeRequestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__PSAAttributeRequestType::soap_del() deep deletes ns2__PSAAttributeRequestType data members, use only after ns2__PSAAttributeRequestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__PSAAttributeRequestType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "Citizen" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               Citizen                        1;	///< Required element.
/// Element "CompanyId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType.
    ns4__NIPCType*                       CompanyId                      0;	///< Optional element.
/// Element "CompanyName" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType.
    ns4__CompanyNameType*                CompanyName                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeSupplierListType is a complexType.
///
/// class ns2__AttributeSupplierListType operations:
/// - ns2__AttributeSupplierListType* soap_new_ns2__AttributeSupplierListType(soap*) allocate and default initialize
/// - ns2__AttributeSupplierListType* soap_new_ns2__AttributeSupplierListType(soap*, int num) allocate array and default initialize values
/// - ns2__AttributeSupplierListType* soap_new_req_ns2__AttributeSupplierListType(soap*, ...) allocate, set required members
/// - ns2__AttributeSupplierListType* soap_new_set_ns2__AttributeSupplierListType(soap*, ...) allocate, set all public members
/// - ns2__AttributeSupplierListType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AttributeSupplierListType(soap*, ns2__AttributeSupplierListType*) deserialize from a stream
/// - int soap_write_ns2__AttributeSupplierListType(soap*, ns2__AttributeSupplierListType*) serialize to a stream
/// - ns2__AttributeSupplierListType* ns2__AttributeSupplierListType::soap_dup(soap*) returns deep copy of ns2__AttributeSupplierListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeSupplierListType::soap_del() deep deletes ns2__AttributeSupplierListType data members, use only after ns2__AttributeSupplierListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeSupplierListType
{ public:
/// Vector of ns3__AttributeSupplierType* of length 1..unbounded.
    std::vector<ns3__AttributeSupplierType*> AttributeSupplier              1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeResponseType is a complexType.
///
/// class ns2__AttributeResponseType operations:
/// - ns2__AttributeResponseType* soap_new_ns2__AttributeResponseType(soap*) allocate and default initialize
/// - ns2__AttributeResponseType* soap_new_ns2__AttributeResponseType(soap*, int num) allocate array and default initialize values
/// - ns2__AttributeResponseType* soap_new_req_ns2__AttributeResponseType(soap*, ...) allocate, set required members
/// - ns2__AttributeResponseType* soap_new_set_ns2__AttributeResponseType(soap*, ...) allocate, set all public members
/// - ns2__AttributeResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AttributeResponseType(soap*, ns2__AttributeResponseType*) deserialize from a stream
/// - int soap_write_ns2__AttributeResponseType(soap*, ns2__AttributeResponseType*) serialize to a stream
/// - ns2__AttributeResponseType* ns2__AttributeResponseType::soap_dup(soap*) returns deep copy of ns2__AttributeResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeResponseType::soap_del() deep deletes ns2__AttributeResponseType data members, use only after ns2__AttributeResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeResponseType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Vector of ns2__AttributesType* of length 1..unbounded.
    std::vector<ns2__AttributesType*   > AttributeResponseValues        1;	///< Elements.
/// Element "ErrorMessage" of XSD type xs:string.
    std::string*                         ErrorMessage                   0;	///< Optional element.
/// Element "AppId" of XSD type xs:string.
    std::string*                         AppId                          0;	///< Optional element.
/// Element "SecretKey" of XSD type xs:string.
    std::string*                         SecretKey                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeResponseType is a complexType.
///
/// class ns2__SingleAttributeResponseType operations:
/// - ns2__SingleAttributeResponseType* soap_new_ns2__SingleAttributeResponseType(soap*) allocate and default initialize
/// - ns2__SingleAttributeResponseType* soap_new_ns2__SingleAttributeResponseType(soap*, int num) allocate array and default initialize values
/// - ns2__SingleAttributeResponseType* soap_new_req_ns2__SingleAttributeResponseType(soap*, ...) allocate, set required members
/// - ns2__SingleAttributeResponseType* soap_new_set_ns2__SingleAttributeResponseType(soap*, ...) allocate, set all public members
/// - ns2__SingleAttributeResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SingleAttributeResponseType(soap*, ns2__SingleAttributeResponseType*) deserialize from a stream
/// - int soap_write_ns2__SingleAttributeResponseType(soap*, ns2__SingleAttributeResponseType*) serialize to a stream
/// - ns2__SingleAttributeResponseType* ns2__SingleAttributeResponseType::soap_dup(soap*) returns deep copy of ns2__SingleAttributeResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SingleAttributeResponseType::soap_del() deep deletes ns2__SingleAttributeResponseType data members, use only after ns2__SingleAttributeResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SingleAttributeResponseType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "AttributeResponseValues" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributesType.
    ns2__AttributesType*                 AttributeResponseValues        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributeResponseType is a complexType.
///
/// class ns2__UnsignedAttributeResponseType operations:
/// - ns2__UnsignedAttributeResponseType* soap_new_ns2__UnsignedAttributeResponseType(soap*) allocate and default initialize
/// - ns2__UnsignedAttributeResponseType* soap_new_ns2__UnsignedAttributeResponseType(soap*, int num) allocate array and default initialize values
/// - ns2__UnsignedAttributeResponseType* soap_new_req_ns2__UnsignedAttributeResponseType(soap*, ...) allocate, set required members
/// - ns2__UnsignedAttributeResponseType* soap_new_set_ns2__UnsignedAttributeResponseType(soap*, ...) allocate, set all public members
/// - ns2__UnsignedAttributeResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnsignedAttributeResponseType(soap*, ns2__UnsignedAttributeResponseType*) deserialize from a stream
/// - int soap_write_ns2__UnsignedAttributeResponseType(soap*, ns2__UnsignedAttributeResponseType*) serialize to a stream
/// - ns2__UnsignedAttributeResponseType* ns2__UnsignedAttributeResponseType::soap_dup(soap*) returns deep copy of ns2__UnsignedAttributeResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnsignedAttributeResponseType::soap_del() deep deletes ns2__UnsignedAttributeResponseType data members, use only after ns2__UnsignedAttributeResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnsignedAttributeResponseType
{ public:
/// Element "ProcessId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType.
    ns4__ProcessIDType                   ProcessId                      1;	///< Required element.
/// Element "CompanyId" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType.
    ns4__NIPCType*                       CompanyId                      0;	///< Optional element.
/// Element "CompanyName" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType.
    ns4__CompanyNameType*                CompanyName                    0;	///< Optional element.
/// Element "AttributeResponseValues" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesType.
    ns2__UnsignedAttributesType*         AttributeResponseValues        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributesType is a complexType.
///
/// class ns2__AttributesType operations:
/// - ns2__AttributesType* soap_new_ns2__AttributesType(soap*) allocate and default initialize
/// - ns2__AttributesType* soap_new_ns2__AttributesType(soap*, int num) allocate array and default initialize values
/// - ns2__AttributesType* soap_new_req_ns2__AttributesType(soap*, ...) allocate, set required members
/// - ns2__AttributesType* soap_new_set_ns2__AttributesType(soap*, ...) allocate, set all public members
/// - ns2__AttributesType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__AttributesType(soap*, ns2__AttributesType*) deserialize from a stream
/// - int soap_write_ns2__AttributesType(soap*, ns2__AttributesType*) serialize to a stream
/// - ns2__AttributesType* ns2__AttributesType::soap_dup(soap*) returns deep copy of ns2__AttributesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributesType::soap_del() deep deletes ns2__AttributesType data members, use only after ns2__AttributesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributesType
{ public:
/// Element "ATTRSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          ATTRSupplier                   1;	///< Required element.
/// Element "ResponseResult" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":ResponseResult.
    ns2__ResponseResult*                 ResponseResult                 1;	///< Required element.
/// Element "SignedAttributes" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SignedAttributesType.
    ns2__SignedAttributesType*           SignedAttributes               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesType is a complexType.
///
/// class ns2__UnsignedAttributesType operations:
/// - ns2__UnsignedAttributesType* soap_new_ns2__UnsignedAttributesType(soap*) allocate and default initialize
/// - ns2__UnsignedAttributesType* soap_new_ns2__UnsignedAttributesType(soap*, int num) allocate array and default initialize values
/// - ns2__UnsignedAttributesType* soap_new_req_ns2__UnsignedAttributesType(soap*, ...) allocate, set required members
/// - ns2__UnsignedAttributesType* soap_new_set_ns2__UnsignedAttributesType(soap*, ...) allocate, set all public members
/// - ns2__UnsignedAttributesType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnsignedAttributesType(soap*, ns2__UnsignedAttributesType*) deserialize from a stream
/// - int soap_write_ns2__UnsignedAttributesType(soap*, ns2__UnsignedAttributesType*) serialize to a stream
/// - ns2__UnsignedAttributesType* ns2__UnsignedAttributesType::soap_dup(soap*) returns deep copy of ns2__UnsignedAttributesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnsignedAttributesType::soap_del() deep deletes ns2__UnsignedAttributesType data members, use only after ns2__UnsignedAttributesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnsignedAttributesType
{ public:
/// Element "ResponseResult" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":ResponseResult.
    ns2__ResponseResult*                 ResponseResult                 1;	///< Required element.
/// Element "UnsignedAttributes" of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesBasicType.
    ns2__UnsignedAttributesBasicType*    UnsignedAttributes             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SignedAttributesType is a complexType.
///
/// class ns2__SignedAttributesType operations:
/// - ns2__SignedAttributesType* soap_new_ns2__SignedAttributesType(soap*) allocate and default initialize
/// - ns2__SignedAttributesType* soap_new_ns2__SignedAttributesType(soap*, int num) allocate array and default initialize values
/// - ns2__SignedAttributesType* soap_new_req_ns2__SignedAttributesType(soap*, ...) allocate, set required members
/// - ns2__SignedAttributesType* soap_new_set_ns2__SignedAttributesType(soap*, ...) allocate, set all public members
/// - ns2__SignedAttributesType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__SignedAttributesType(soap*, ns2__SignedAttributesType*) deserialize from a stream
/// - int soap_write_ns2__SignedAttributesType(soap*, ns2__SignedAttributesType*) serialize to a stream
/// - ns2__SignedAttributesType* ns2__SignedAttributesType::soap_dup(soap*) returns deep copy of ns2__SignedAttributesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__SignedAttributesType::soap_del() deep deletes ns2__SignedAttributesType data members, use only after ns2__SignedAttributesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__SignedAttributesType
{ public:
/// Vector of ns5__SignatureType* element refs of length 1..unbounded.
    std::vector<ns5__SignatureType*    > ns3__SignatureAttribute        1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":UnsignedAttributesBasicType is a complexType.
///
/// class ns2__UnsignedAttributesBasicType operations:
/// - ns2__UnsignedAttributesBasicType* soap_new_ns2__UnsignedAttributesBasicType(soap*) allocate and default initialize
/// - ns2__UnsignedAttributesBasicType* soap_new_ns2__UnsignedAttributesBasicType(soap*, int num) allocate array and default initialize values
/// - ns2__UnsignedAttributesBasicType* soap_new_req_ns2__UnsignedAttributesBasicType(soap*, ...) allocate, set required members
/// - ns2__UnsignedAttributesBasicType* soap_new_set_ns2__UnsignedAttributesBasicType(soap*, ...) allocate, set all public members
/// - ns2__UnsignedAttributesBasicType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__UnsignedAttributesBasicType(soap*, ns2__UnsignedAttributesBasicType*) deserialize from a stream
/// - int soap_write_ns2__UnsignedAttributesBasicType(soap*, ns2__UnsignedAttributesBasicType*) serialize to a stream
/// - ns2__UnsignedAttributesBasicType* ns2__UnsignedAttributesBasicType::soap_dup(soap*) returns deep copy of ns2__UnsignedAttributesBasicType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__UnsignedAttributesBasicType::soap_del() deep deletes ns2__UnsignedAttributesBasicType data members, use only after ns2__UnsignedAttributesBasicType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__UnsignedAttributesBasicType
{ public:
/// Vector of ns3__AttributeType* element refs of length 1..unbounded.
    std::vector<ns3__AttributeType*    > ns3__Attribute                 1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":ResponseResult is a complexType.
///
/// class ns2__ResponseResult operations:
/// - ns2__ResponseResult* soap_new_ns2__ResponseResult(soap*) allocate and default initialize
/// - ns2__ResponseResult* soap_new_ns2__ResponseResult(soap*, int num) allocate array and default initialize values
/// - ns2__ResponseResult* soap_new_req_ns2__ResponseResult(soap*, ...) allocate, set required members
/// - ns2__ResponseResult* soap_new_set_ns2__ResponseResult(soap*, ...) allocate, set all public members
/// - ns2__ResponseResult::soap_default(soap*) default initialize members
/// - int soap_read_ns2__ResponseResult(soap*, ns2__ResponseResult*) deserialize from a stream
/// - int soap_write_ns2__ResponseResult(soap*, ns2__ResponseResult*) serialize to a stream
/// - ns2__ResponseResult* ns2__ResponseResult::soap_dup(soap*) returns deep copy of ns2__ResponseResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__ResponseResult::soap_del() deep deletes ns2__ResponseResult data members, use only after ns2__ResponseResult::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__ResponseResult
{ public:
/// Element "ResultCode" of XSD type xs:string.
    std::string                          ResultCode                     1;	///< Required element.
/// Element "ResultMessage" of XSD type xs:string.
    std::string                          ResultMessage                  1;	///< Required element.
/// Element "CitizenIDWithExtraInfo" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               CitizenIDWithExtraInfo         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignatureType is a complexType.
///
/// class ns5__SignatureType operations:
/// - ns5__SignatureType* soap_new_ns5__SignatureType(soap*) allocate and default initialize
/// - ns5__SignatureType* soap_new_ns5__SignatureType(soap*, int num) allocate array and default initialize values
/// - ns5__SignatureType* soap_new_req_ns5__SignatureType(soap*, ...) allocate, set required members
/// - ns5__SignatureType* soap_new_set_ns5__SignatureType(soap*, ...) allocate, set all public members
/// - ns5__SignatureType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SignatureType(soap*, ns5__SignatureType*) deserialize from a stream
/// - int soap_write_ns5__SignatureType(soap*, ns5__SignatureType*) serialize to a stream
/// - ns5__SignatureType* ns5__SignatureType::soap_dup(soap*) returns deep copy of ns5__SignatureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignatureType::soap_del() deep deletes ns5__SignatureType data members, use only after ns5__SignatureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignatureType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":SignedInfo.
    ns5__SignedInfoType*                 ns5__SignedInfo                1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":SignatureValue.
    ns5__SignatureValueType*             ns5__SignatureValue            1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":KeyInfo.
    ns5__KeyInfoType*                    ns5__KeyInfo                   1;	///< Required element.
/// Vector of ns5__ObjectType* element refs of length 0..unbounded.
    std::vector<ns5__ObjectType*       > ns5__Object                    0;	///< Elements.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignedInfoType is a complexType.
///
/// class ns5__SignedInfoType operations:
/// - ns5__SignedInfoType* soap_new_ns5__SignedInfoType(soap*) allocate and default initialize
/// - ns5__SignedInfoType* soap_new_ns5__SignedInfoType(soap*, int num) allocate array and default initialize values
/// - ns5__SignedInfoType* soap_new_req_ns5__SignedInfoType(soap*, ...) allocate, set required members
/// - ns5__SignedInfoType* soap_new_set_ns5__SignedInfoType(soap*, ...) allocate, set all public members
/// - ns5__SignedInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SignedInfoType(soap*, ns5__SignedInfoType*) deserialize from a stream
/// - int soap_write_ns5__SignedInfoType(soap*, ns5__SignedInfoType*) serialize to a stream
/// - ns5__SignedInfoType* ns5__SignedInfoType::soap_dup(soap*) returns deep copy of ns5__SignedInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignedInfoType::soap_del() deep deletes ns5__SignedInfoType data members, use only after ns5__SignedInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignedInfoType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":SignatureMethod.
    ns5__SignatureMethodType*            ns5__SignatureMethod           1;	///< Required element.
/// Vector of ns5__ReferenceType* element refs of length 1..unbounded.
    std::vector<ns5__ReferenceType*    > ns5__Reference                 1;	///< Elements.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethodType is a complexType.
///
/// class ns5__CanonicalizationMethodType operations:
/// - ns5__CanonicalizationMethodType* soap_new_ns5__CanonicalizationMethodType(soap*) allocate and default initialize
/// - ns5__CanonicalizationMethodType* soap_new_ns5__CanonicalizationMethodType(soap*, int num) allocate array and default initialize values
/// - ns5__CanonicalizationMethodType* soap_new_req_ns5__CanonicalizationMethodType(soap*, ...) allocate, set required members
/// - ns5__CanonicalizationMethodType* soap_new_set_ns5__CanonicalizationMethodType(soap*, ...) allocate, set all public members
/// - ns5__CanonicalizationMethodType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__CanonicalizationMethodType(soap*, ns5__CanonicalizationMethodType*) deserialize from a stream
/// - int soap_write_ns5__CanonicalizationMethodType(soap*, ns5__CanonicalizationMethodType*) serialize to a stream
/// - ns5__CanonicalizationMethodType* ns5__CanonicalizationMethodType::soap_dup(soap*) returns deep copy of ns5__CanonicalizationMethodType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__CanonicalizationMethodType::soap_del() deep deletes ns5__CanonicalizationMethodType data members, use only after ns5__CanonicalizationMethodType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__CanonicalizationMethodType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignatureMethodType is a complexType.
///
/// class ns5__SignatureMethodType operations:
/// - ns5__SignatureMethodType* soap_new_ns5__SignatureMethodType(soap*) allocate and default initialize
/// - ns5__SignatureMethodType* soap_new_ns5__SignatureMethodType(soap*, int num) allocate array and default initialize values
/// - ns5__SignatureMethodType* soap_new_req_ns5__SignatureMethodType(soap*, ...) allocate, set required members
/// - ns5__SignatureMethodType* soap_new_set_ns5__SignatureMethodType(soap*, ...) allocate, set all public members
/// - ns5__SignatureMethodType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SignatureMethodType(soap*, ns5__SignatureMethodType*) deserialize from a stream
/// - int soap_write_ns5__SignatureMethodType(soap*, ns5__SignatureMethodType*) serialize to a stream
/// - ns5__SignatureMethodType* ns5__SignatureMethodType::soap_dup(soap*) returns deep copy of ns5__SignatureMethodType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignatureMethodType::soap_del() deep deletes ns5__SignatureMethodType data members, use only after ns5__SignatureMethodType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignatureMethodType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":ReferenceType is a complexType.
///
/// class ns5__ReferenceType operations:
/// - ns5__ReferenceType* soap_new_ns5__ReferenceType(soap*) allocate and default initialize
/// - ns5__ReferenceType* soap_new_ns5__ReferenceType(soap*, int num) allocate array and default initialize values
/// - ns5__ReferenceType* soap_new_req_ns5__ReferenceType(soap*, ...) allocate, set required members
/// - ns5__ReferenceType* soap_new_set_ns5__ReferenceType(soap*, ...) allocate, set all public members
/// - ns5__ReferenceType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ReferenceType(soap*, ns5__ReferenceType*) deserialize from a stream
/// - int soap_write_ns5__ReferenceType(soap*, ns5__ReferenceType*) serialize to a stream
/// - ns5__ReferenceType* ns5__ReferenceType::soap_dup(soap*) returns deep copy of ns5__ReferenceType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ReferenceType::soap_del() deep deletes ns5__ReferenceType data members, use only after ns5__ReferenceType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ReferenceType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":Transforms.
    ns5__TransformsType*                 ns5__Transforms                1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":DigestMethod.
    ns5__DigestMethodType*               ns5__DigestMethod              1;	///< Required element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":DigestValue.
    ns5__DigestValueType*                ns5__DigestValue               1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// Attribute "Type" of XSD type xs:anyURI.
   @xsd__anyURI*                         Type                           0;	///< Optional attribute.
/// Attribute "URI" of XSD type xs:anyURI.
   @xsd__anyURI*                         URI                            0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":TransformsType is a complexType.
///
/// class ns5__TransformsType operations:
/// - ns5__TransformsType* soap_new_ns5__TransformsType(soap*) allocate and default initialize
/// - ns5__TransformsType* soap_new_ns5__TransformsType(soap*, int num) allocate array and default initialize values
/// - ns5__TransformsType* soap_new_req_ns5__TransformsType(soap*, ...) allocate, set required members
/// - ns5__TransformsType* soap_new_set_ns5__TransformsType(soap*, ...) allocate, set all public members
/// - ns5__TransformsType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TransformsType(soap*, ns5__TransformsType*) deserialize from a stream
/// - int soap_write_ns5__TransformsType(soap*, ns5__TransformsType*) serialize to a stream
/// - ns5__TransformsType* ns5__TransformsType::soap_dup(soap*) returns deep copy of ns5__TransformsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TransformsType::soap_del() deep deletes ns5__TransformsType data members, use only after ns5__TransformsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TransformsType
{ public:
/// Vector of ns5__TransformType* element refs of length 1..unbounded.
    std::vector<ns5__TransformType*    > ns5__Transform                 1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":TransformType is a complexType.
///
/// class ns5__TransformType operations:
/// - ns5__TransformType* soap_new_ns5__TransformType(soap*) allocate and default initialize
/// - ns5__TransformType* soap_new_ns5__TransformType(soap*, int num) allocate array and default initialize values
/// - ns5__TransformType* soap_new_req_ns5__TransformType(soap*, ...) allocate, set required members
/// - ns5__TransformType* soap_new_set_ns5__TransformType(soap*, ...) allocate, set all public members
/// - ns5__TransformType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__TransformType(soap*, ns5__TransformType*) deserialize from a stream
/// - int soap_write_ns5__TransformType(soap*, ns5__TransformType*) serialize to a stream
/// - ns5__TransformType* ns5__TransformType::soap_dup(soap*) returns deep copy of ns5__TransformType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__TransformType::soap_del() deep deletes ns5__TransformType data members, use only after ns5__TransformType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__TransformType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":DigestMethodType is a complexType.
///
/// class ns5__DigestMethodType operations:
/// - ns5__DigestMethodType* soap_new_ns5__DigestMethodType(soap*) allocate and default initialize
/// - ns5__DigestMethodType* soap_new_ns5__DigestMethodType(soap*, int num) allocate array and default initialize values
/// - ns5__DigestMethodType* soap_new_req_ns5__DigestMethodType(soap*, ...) allocate, set required members
/// - ns5__DigestMethodType* soap_new_set_ns5__DigestMethodType(soap*, ...) allocate, set all public members
/// - ns5__DigestMethodType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__DigestMethodType(soap*, ns5__DigestMethodType*) deserialize from a stream
/// - int soap_write_ns5__DigestMethodType(soap*, ns5__DigestMethodType*) serialize to a stream
/// - ns5__DigestMethodType* ns5__DigestMethodType::soap_dup(soap*) returns deep copy of ns5__DigestMethodType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__DigestMethodType::soap_del() deep deletes ns5__DigestMethodType data members, use only after ns5__DigestMethodType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__DigestMethodType
{ public:
/// Attribute "Algorithm" of XSD type xs:anyURI.
   @xsd__anyURI                          Algorithm                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":KeyInfoType is a complexType.
///
/// class ns5__KeyInfoType operations:
/// - ns5__KeyInfoType* soap_new_ns5__KeyInfoType(soap*) allocate and default initialize
/// - ns5__KeyInfoType* soap_new_ns5__KeyInfoType(soap*, int num) allocate array and default initialize values
/// - ns5__KeyInfoType* soap_new_req_ns5__KeyInfoType(soap*, ...) allocate, set required members
/// - ns5__KeyInfoType* soap_new_set_ns5__KeyInfoType(soap*, ...) allocate, set all public members
/// - ns5__KeyInfoType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__KeyInfoType(soap*, ns5__KeyInfoType*) deserialize from a stream
/// - int soap_write_ns5__KeyInfoType(soap*, ns5__KeyInfoType*) serialize to a stream
/// - ns5__KeyInfoType* ns5__KeyInfoType::soap_dup(soap*) returns deep copy of ns5__KeyInfoType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__KeyInfoType::soap_del() deep deletes ns5__KeyInfoType data members, use only after ns5__KeyInfoType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__KeyInfoType
{ public:
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.w3.org/2000/09/xmldsig#":X509Data.
    ns5__X509DataType*                   ns5__X509Data                  1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509DataType is a complexType.
///
/// class ns5__X509DataType operations:
/// - ns5__X509DataType* soap_new_ns5__X509DataType(soap*) allocate and default initialize
/// - ns5__X509DataType* soap_new_ns5__X509DataType(soap*, int num) allocate array and default initialize values
/// - ns5__X509DataType* soap_new_req_ns5__X509DataType(soap*, ...) allocate, set required members
/// - ns5__X509DataType* soap_new_set_ns5__X509DataType(soap*, ...) allocate, set all public members
/// - ns5__X509DataType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__X509DataType(soap*, ns5__X509DataType*) deserialize from a stream
/// - int soap_write_ns5__X509DataType(soap*, ns5__X509DataType*) serialize to a stream
/// - ns5__X509DataType* ns5__X509DataType::soap_dup(soap*) returns deep copy of ns5__X509DataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__X509DataType::soap_del() deep deletes ns5__X509DataType data members, use only after ns5__X509DataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__X509DataType
{ public:
/// Vector of ns5__X509CertificateType* element refs of length 1..unbounded.
    std::vector<ns5__X509CertificateType*> ns5__X509Certificate           1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":ObjectType is a complexType.
///
/// class ns5__ObjectType operations:
/// - ns5__ObjectType* soap_new_ns5__ObjectType(soap*) allocate and default initialize
/// - ns5__ObjectType* soap_new_ns5__ObjectType(soap*, int num) allocate array and default initialize values
/// - ns5__ObjectType* soap_new_req_ns5__ObjectType(soap*, ...) allocate, set required members
/// - ns5__ObjectType* soap_new_set_ns5__ObjectType(soap*, ...) allocate, set all public members
/// - ns5__ObjectType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ObjectType(soap*, ns5__ObjectType*) deserialize from a stream
/// - int soap_write_ns5__ObjectType(soap*, ns5__ObjectType*) serialize to a stream
/// - ns5__ObjectType* ns5__ObjectType::soap_dup(soap*) returns deep copy of ns5__ObjectType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ObjectType::soap_del() deep deletes ns5__ObjectType data members, use only after ns5__ObjectType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ObjectType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ObjectType            ;	///< Union _ns5__union_ObjectType selector: set to SOAP_UNION__ns5__union_ObjectType_<fieldname>
/// Union for choice in ns5__ObjectType.
    union _ns5__union_ObjectType
    {
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://uri.etsi.org/01903/v1.3.2#":QualifyingProperties.
    ns6__QualifyingPropertiesType*       ns6__QualifyingProperties      0;	///< Optional element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGList.
    ns7__SVGListType*                    ns7__SVGList                   0;	///< Optional element.
/// Element reference "http://www.w3.org/2000/09/xmldsig#:""http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":Attribute.
    ns3__AttributeType*                  ns3__Attribute                 0;	///< Optional element.
    }                                    union_ObjectType              ;
//  END OF CHOICE
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeType is a complexType.
///
/// class ns3__AttributeType operations:
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*) allocate and default initialize
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*, int num) allocate array and default initialize values
/// - ns3__AttributeType* soap_new_req_ns3__AttributeType(soap*, ...) allocate, set required members
/// - ns3__AttributeType* soap_new_set_ns3__AttributeType(soap*, ...) allocate, set all public members
/// - ns3__AttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AttributeType(soap*, ns3__AttributeType*) deserialize from a stream
/// - int soap_write_ns3__AttributeType(soap*, ns3__AttributeType*) serialize to a stream
/// - ns3__AttributeType* ns3__AttributeType::soap_dup(soap*) returns deep copy of ns3__AttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeType::soap_del() deep deletes ns3__AttributeType data members, use only after ns3__AttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeType
{ public:
/// Element "AttributeSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          AttributeSupplier              1;	///< Required element.
/// Element "Date" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DateType.
    ns4__DateType                        Date                           1;	///< Required element.
/// Element "Validity" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ValidityType.
    ns4__ValidityType                    Validity                       1;	///< Required element.
/// Element "PersonalData" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               PersonalData                   1;	///< Required element.
/// Element "MainAttribute" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":MainAttributeType.
    ns3__MainAttributeType*              MainAttribute                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType is a complexType.
///
/// class ns3__AttributeSupplierType operations:
/// - ns3__AttributeSupplierType* soap_new_ns3__AttributeSupplierType(soap*) allocate and default initialize
/// - ns3__AttributeSupplierType* soap_new_ns3__AttributeSupplierType(soap*, int num) allocate array and default initialize values
/// - ns3__AttributeSupplierType* soap_new_req_ns3__AttributeSupplierType(soap*, ...) allocate, set required members
/// - ns3__AttributeSupplierType* soap_new_set_ns3__AttributeSupplierType(soap*, ...) allocate, set all public members
/// - ns3__AttributeSupplierType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__AttributeSupplierType(soap*, ns3__AttributeSupplierType*) deserialize from a stream
/// - int soap_write_ns3__AttributeSupplierType(soap*, ns3__AttributeSupplierType*) serialize to a stream
/// - ns3__AttributeSupplierType* ns3__AttributeSupplierType::soap_dup(soap*) returns deep copy of ns3__AttributeSupplierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeSupplierType::soap_del() deep deletes ns3__AttributeSupplierType data members, use only after ns3__AttributeSupplierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeSupplierType
{ public:
/// Element "Id" of XSD type xs:anyURI.
    xsd__anyURI                          Id                             1;	///< Required element.
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType is a complexType.
///
/// class ns3__PersonalDataType operations:
/// - ns3__PersonalDataType* soap_new_ns3__PersonalDataType(soap*) allocate and default initialize
/// - ns3__PersonalDataType* soap_new_ns3__PersonalDataType(soap*, int num) allocate array and default initialize values
/// - ns3__PersonalDataType* soap_new_req_ns3__PersonalDataType(soap*, ...) allocate, set required members
/// - ns3__PersonalDataType* soap_new_set_ns3__PersonalDataType(soap*, ...) allocate, set all public members
/// - ns3__PersonalDataType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__PersonalDataType(soap*, ns3__PersonalDataType*) deserialize from a stream
/// - int soap_write_ns3__PersonalDataType(soap*, ns3__PersonalDataType*) serialize to a stream
/// - ns3__PersonalDataType* ns3__PersonalDataType::soap_dup(soap*) returns deep copy of ns3__PersonalDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PersonalDataType::soap_del() deep deletes ns3__PersonalDataType data members, use only after ns3__PersonalDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PersonalDataType
{ public:
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// Element "NIC" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NICType.
    ns4__NICType                         NIC                            1;	///< Required element.
/// Element "ExtraIDList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDListType.
    ns3__ExtraIDListType*                ExtraIDList                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDListType is a complexType.
///
/// class ns3__ExtraIDListType operations:
/// - ns3__ExtraIDListType* soap_new_ns3__ExtraIDListType(soap*) allocate and default initialize
/// - ns3__ExtraIDListType* soap_new_ns3__ExtraIDListType(soap*, int num) allocate array and default initialize values
/// - ns3__ExtraIDListType* soap_new_req_ns3__ExtraIDListType(soap*, ...) allocate, set required members
/// - ns3__ExtraIDListType* soap_new_set_ns3__ExtraIDListType(soap*, ...) allocate, set all public members
/// - ns3__ExtraIDListType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExtraIDListType(soap*, ns3__ExtraIDListType*) deserialize from a stream
/// - int soap_write_ns3__ExtraIDListType(soap*, ns3__ExtraIDListType*) serialize to a stream
/// - ns3__ExtraIDListType* ns3__ExtraIDListType::soap_dup(soap*) returns deep copy of ns3__ExtraIDListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExtraIDListType::soap_del() deep deletes ns3__ExtraIDListType data members, use only after ns3__ExtraIDListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExtraIDListType
{ public:
/// Vector of ns3__ExtraIDType* of length 1..unbounded.
    std::vector<ns3__ExtraIDType*      > ExtraID                        1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDType is a complexType.
///
/// class ns3__ExtraIDType operations:
/// - ns3__ExtraIDType* soap_new_ns3__ExtraIDType(soap*) allocate and default initialize
/// - ns3__ExtraIDType* soap_new_ns3__ExtraIDType(soap*, int num) allocate array and default initialize values
/// - ns3__ExtraIDType* soap_new_req_ns3__ExtraIDType(soap*, ...) allocate, set required members
/// - ns3__ExtraIDType* soap_new_set_ns3__ExtraIDType(soap*, ...) allocate, set all public members
/// - ns3__ExtraIDType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ExtraIDType(soap*, ns3__ExtraIDType*) deserialize from a stream
/// - int soap_write_ns3__ExtraIDType(soap*, ns3__ExtraIDType*) serialize to a stream
/// - ns3__ExtraIDType* ns3__ExtraIDType::soap_dup(soap*) returns deep copy of ns3__ExtraIDType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExtraIDType::soap_del() deep deletes ns3__ExtraIDType data members, use only after ns3__ExtraIDType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExtraIDType
{ public:
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// Element "Value" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ExtraIDValueType.
    ns4__ExtraIDValueType                Value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":MainAttributeType is a complexType.
///
/// class ns3__MainAttributeType operations:
/// - ns3__MainAttributeType* soap_new_ns3__MainAttributeType(soap*) allocate and default initialize
/// - ns3__MainAttributeType* soap_new_ns3__MainAttributeType(soap*, int num) allocate array and default initialize values
/// - ns3__MainAttributeType* soap_new_req_ns3__MainAttributeType(soap*, ...) allocate, set required members
/// - ns3__MainAttributeType* soap_new_set_ns3__MainAttributeType(soap*, ...) allocate, set all public members
/// - ns3__MainAttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MainAttributeType(soap*, ns3__MainAttributeType*) deserialize from a stream
/// - int soap_write_ns3__MainAttributeType(soap*, ns3__MainAttributeType*) serialize to a stream
/// - ns3__MainAttributeType* ns3__MainAttributeType::soap_dup(soap*) returns deep copy of ns3__MainAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MainAttributeType::soap_del() deep deletes ns3__MainAttributeType data members, use only after ns3__MainAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MainAttributeType
{ public:
/// Element "AttributeID" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType.
    ns4__AttributeIDType                 AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType.
    ns4__DescriptionType*                Description                    0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType.
    ns3__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "SubAttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeListType.
    ns3__SubAttributeListType*           SubAttributeList               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType is a complexType.
///
/// class ns3__LegalActListType operations:
/// - ns3__LegalActListType* soap_new_ns3__LegalActListType(soap*) allocate and default initialize
/// - ns3__LegalActListType* soap_new_ns3__LegalActListType(soap*, int num) allocate array and default initialize values
/// - ns3__LegalActListType* soap_new_req_ns3__LegalActListType(soap*, ...) allocate, set required members
/// - ns3__LegalActListType* soap_new_set_ns3__LegalActListType(soap*, ...) allocate, set all public members
/// - ns3__LegalActListType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__LegalActListType(soap*, ns3__LegalActListType*) deserialize from a stream
/// - int soap_write_ns3__LegalActListType(soap*, ns3__LegalActListType*) serialize to a stream
/// - ns3__LegalActListType* ns3__LegalActListType::soap_dup(soap*) returns deep copy of ns3__LegalActListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__LegalActListType::soap_del() deep deletes ns3__LegalActListType data members, use only after ns3__LegalActListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__LegalActListType
{ public:
/// Vector of ns4__LegalActType of length 1..unbounded.
    std::vector<ns4__LegalActType      > LegalAct                       1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeListType is a complexType.
///
/// class ns3__SubAttributeListType operations:
/// - ns3__SubAttributeListType* soap_new_ns3__SubAttributeListType(soap*) allocate and default initialize
/// - ns3__SubAttributeListType* soap_new_ns3__SubAttributeListType(soap*, int num) allocate array and default initialize values
/// - ns3__SubAttributeListType* soap_new_req_ns3__SubAttributeListType(soap*, ...) allocate, set required members
/// - ns3__SubAttributeListType* soap_new_set_ns3__SubAttributeListType(soap*, ...) allocate, set all public members
/// - ns3__SubAttributeListType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SubAttributeListType(soap*, ns3__SubAttributeListType*) deserialize from a stream
/// - int soap_write_ns3__SubAttributeListType(soap*, ns3__SubAttributeListType*) serialize to a stream
/// - ns3__SubAttributeListType* ns3__SubAttributeListType::soap_dup(soap*) returns deep copy of ns3__SubAttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubAttributeListType::soap_del() deep deletes ns3__SubAttributeListType data members, use only after ns3__SubAttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubAttributeListType
{ public:
/// Vector of ns3__SubAttributeType* of length 1..unbounded.
    std::vector<ns3__SubAttributeType* > SubAttribute                   1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeType is a complexType.
///
/// class ns3__SubAttributeType operations:
/// - ns3__SubAttributeType* soap_new_ns3__SubAttributeType(soap*) allocate and default initialize
/// - ns3__SubAttributeType* soap_new_ns3__SubAttributeType(soap*, int num) allocate array and default initialize values
/// - ns3__SubAttributeType* soap_new_req_ns3__SubAttributeType(soap*, ...) allocate, set required members
/// - ns3__SubAttributeType* soap_new_set_ns3__SubAttributeType(soap*, ...) allocate, set all public members
/// - ns3__SubAttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SubAttributeType(soap*, ns3__SubAttributeType*) deserialize from a stream
/// - int soap_write_ns3__SubAttributeType(soap*, ns3__SubAttributeType*) serialize to a stream
/// - ns3__SubAttributeType* ns3__SubAttributeType::soap_dup(soap*) returns deep copy of ns3__SubAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubAttributeType::soap_del() deep deletes ns3__SubAttributeType data members, use only after ns3__SubAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubAttributeType
{ public:
/// Element "AttributeID" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType.
    ns4__AttributeIDType                 AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType.
    ns4__DescriptionType*                Description                    0;	///< Optional element.
/// Element "Value" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":SubAttributeValueType.
    ns4__SubAttributeValueType*          Value                          0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType.
    ns3__LegalActListType*               LegalActList                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ResponseCodeStatusType is a complexType.
///
/// class ns3__ResponseCodeStatusType operations:
/// - ns3__ResponseCodeStatusType* soap_new_ns3__ResponseCodeStatusType(soap*) allocate and default initialize
/// - ns3__ResponseCodeStatusType* soap_new_ns3__ResponseCodeStatusType(soap*, int num) allocate array and default initialize values
/// - ns3__ResponseCodeStatusType* soap_new_req_ns3__ResponseCodeStatusType(soap*, ...) allocate, set required members
/// - ns3__ResponseCodeStatusType* soap_new_set_ns3__ResponseCodeStatusType(soap*, ...) allocate, set all public members
/// - ns3__ResponseCodeStatusType::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ResponseCodeStatusType(soap*, ns3__ResponseCodeStatusType*) deserialize from a stream
/// - int soap_write_ns3__ResponseCodeStatusType(soap*, ns3__ResponseCodeStatusType*) serialize to a stream
/// - ns3__ResponseCodeStatusType* ns3__ResponseCodeStatusType::soap_dup(soap*) returns deep copy of ns3__ResponseCodeStatusType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ResponseCodeStatusType::soap_del() deep deletes ns3__ResponseCodeStatusType data members, use only after ns3__ResponseCodeStatusType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ResponseCodeStatusType
{ public:
/// Element "Code" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeType.
    ns4__ResponseCodeType                Code                           1;	///< Required element.
/// Element "Message" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeMessage.
    ns4__ResponseCodeMessage*            Message                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://uri.etsi.org/01903/v1.3.2#":QualifyingPropertiesType is a complexType.
///
/// class ns6__QualifyingPropertiesType operations:
/// - ns6__QualifyingPropertiesType* soap_new_ns6__QualifyingPropertiesType(soap*) allocate and default initialize
/// - ns6__QualifyingPropertiesType* soap_new_ns6__QualifyingPropertiesType(soap*, int num) allocate array and default initialize values
/// - ns6__QualifyingPropertiesType* soap_new_req_ns6__QualifyingPropertiesType(soap*, ...) allocate, set required members
/// - ns6__QualifyingPropertiesType* soap_new_set_ns6__QualifyingPropertiesType(soap*, ...) allocate, set all public members
/// - ns6__QualifyingPropertiesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__QualifyingPropertiesType(soap*, ns6__QualifyingPropertiesType*) deserialize from a stream
/// - int soap_write_ns6__QualifyingPropertiesType(soap*, ns6__QualifyingPropertiesType*) serialize to a stream
/// - ns6__QualifyingPropertiesType* ns6__QualifyingPropertiesType::soap_dup(soap*) returns deep copy of ns6__QualifyingPropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__QualifyingPropertiesType::soap_del() deep deletes ns6__QualifyingPropertiesType data members, use only after ns6__QualifyingPropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__QualifyingPropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignedProperties.
    ns6__SignedPropertiesType*           ns6__SignedProperties          1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":UnsignedProperties.
    ns6__UnsignedPropertiesType*         ns6__UnsignedProperties        0;	///< Optional element.
/// Attribute "Target" of XSD type xs:anyURI.
   @xsd__anyURI                          Target                         1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignedPropertiesType is a complexType.
///
/// class ns6__SignedPropertiesType operations:
/// - ns6__SignedPropertiesType* soap_new_ns6__SignedPropertiesType(soap*) allocate and default initialize
/// - ns6__SignedPropertiesType* soap_new_ns6__SignedPropertiesType(soap*, int num) allocate array and default initialize values
/// - ns6__SignedPropertiesType* soap_new_req_ns6__SignedPropertiesType(soap*, ...) allocate, set required members
/// - ns6__SignedPropertiesType* soap_new_set_ns6__SignedPropertiesType(soap*, ...) allocate, set all public members
/// - ns6__SignedPropertiesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__SignedPropertiesType(soap*, ns6__SignedPropertiesType*) deserialize from a stream
/// - int soap_write_ns6__SignedPropertiesType(soap*, ns6__SignedPropertiesType*) serialize to a stream
/// - ns6__SignedPropertiesType* ns6__SignedPropertiesType::soap_dup(soap*) returns deep copy of ns6__SignedPropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__SignedPropertiesType::soap_del() deep deletes ns6__SignedPropertiesType data members, use only after ns6__SignedPropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__SignedPropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignedSignatureProperties.
    ns6__SignedSignaturePropertiesType*  ns6__SignedSignatureProperties 1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignedSignaturePropertiesType is a complexType.
///
/// class ns6__SignedSignaturePropertiesType operations:
/// - ns6__SignedSignaturePropertiesType* soap_new_ns6__SignedSignaturePropertiesType(soap*) allocate and default initialize
/// - ns6__SignedSignaturePropertiesType* soap_new_ns6__SignedSignaturePropertiesType(soap*, int num) allocate array and default initialize values
/// - ns6__SignedSignaturePropertiesType* soap_new_req_ns6__SignedSignaturePropertiesType(soap*, ...) allocate, set required members
/// - ns6__SignedSignaturePropertiesType* soap_new_set_ns6__SignedSignaturePropertiesType(soap*, ...) allocate, set all public members
/// - ns6__SignedSignaturePropertiesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__SignedSignaturePropertiesType(soap*, ns6__SignedSignaturePropertiesType*) deserialize from a stream
/// - int soap_write_ns6__SignedSignaturePropertiesType(soap*, ns6__SignedSignaturePropertiesType*) serialize to a stream
/// - ns6__SignedSignaturePropertiesType* ns6__SignedSignaturePropertiesType::soap_dup(soap*) returns deep copy of ns6__SignedSignaturePropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__SignedSignaturePropertiesType::soap_del() deep deletes ns6__SignedSignaturePropertiesType data members, use only after ns6__SignedSignaturePropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__SignedSignaturePropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SigningTime.
    ns6__SigningTimeType                 ns6__SigningTime               1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SigningCertificate.
    ns6__SigningCertificateType*         ns6__SigningCertificate        1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignerRole.
    ns6__SignerRoleType*                 ns6__SignerRole                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SigningCertificateType is a complexType.
///
/// class ns6__SigningCertificateType operations:
/// - ns6__SigningCertificateType* soap_new_ns6__SigningCertificateType(soap*) allocate and default initialize
/// - ns6__SigningCertificateType* soap_new_ns6__SigningCertificateType(soap*, int num) allocate array and default initialize values
/// - ns6__SigningCertificateType* soap_new_req_ns6__SigningCertificateType(soap*, ...) allocate, set required members
/// - ns6__SigningCertificateType* soap_new_set_ns6__SigningCertificateType(soap*, ...) allocate, set all public members
/// - ns6__SigningCertificateType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__SigningCertificateType(soap*, ns6__SigningCertificateType*) deserialize from a stream
/// - int soap_write_ns6__SigningCertificateType(soap*, ns6__SigningCertificateType*) serialize to a stream
/// - ns6__SigningCertificateType* ns6__SigningCertificateType::soap_dup(soap*) returns deep copy of ns6__SigningCertificateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__SigningCertificateType::soap_del() deep deletes ns6__SigningCertificateType data members, use only after ns6__SigningCertificateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__SigningCertificateType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":Cert.
    ns6__CertType*                       ns6__Cert                      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertType is a complexType.
///
/// class ns6__CertType operations:
/// - ns6__CertType* soap_new_ns6__CertType(soap*) allocate and default initialize
/// - ns6__CertType* soap_new_ns6__CertType(soap*, int num) allocate array and default initialize values
/// - ns6__CertType* soap_new_req_ns6__CertType(soap*, ...) allocate, set required members
/// - ns6__CertType* soap_new_set_ns6__CertType(soap*, ...) allocate, set all public members
/// - ns6__CertType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CertType(soap*, ns6__CertType*) deserialize from a stream
/// - int soap_write_ns6__CertType(soap*, ns6__CertType*) serialize to a stream
/// - ns6__CertType* ns6__CertType::soap_dup(soap*) returns deep copy of ns6__CertType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CertType::soap_del() deep deletes ns6__CertType data members, use only after ns6__CertType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CertType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CertDigest.
    ns6__CertDigestType*                 ns6__CertDigest                1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":IssuerSerial.
    ns6__IssuerSerialType*               ns6__IssuerSerial              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertDigestType is a complexType.
///
/// class ns6__CertDigestType operations:
/// - ns6__CertDigestType* soap_new_ns6__CertDigestType(soap*) allocate and default initialize
/// - ns6__CertDigestType* soap_new_ns6__CertDigestType(soap*, int num) allocate array and default initialize values
/// - ns6__CertDigestType* soap_new_req_ns6__CertDigestType(soap*, ...) allocate, set required members
/// - ns6__CertDigestType* soap_new_set_ns6__CertDigestType(soap*, ...) allocate, set all public members
/// - ns6__CertDigestType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CertDigestType(soap*, ns6__CertDigestType*) deserialize from a stream
/// - int soap_write_ns6__CertDigestType(soap*, ns6__CertDigestType*) serialize to a stream
/// - ns6__CertDigestType* ns6__CertDigestType::soap_dup(soap*) returns deep copy of ns6__CertDigestType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CertDigestType::soap_del() deep deletes ns6__CertDigestType data members, use only after ns6__CertDigestType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CertDigestType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestMethod.
    ns5__DigestMethodType*               ns5__DigestMethod              1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestValue.
    ns5__DigestValueType*                ns5__DigestValue               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":IssuerSerialType is a complexType.
///
/// class ns6__IssuerSerialType operations:
/// - ns6__IssuerSerialType* soap_new_ns6__IssuerSerialType(soap*) allocate and default initialize
/// - ns6__IssuerSerialType* soap_new_ns6__IssuerSerialType(soap*, int num) allocate array and default initialize values
/// - ns6__IssuerSerialType* soap_new_req_ns6__IssuerSerialType(soap*, ...) allocate, set required members
/// - ns6__IssuerSerialType* soap_new_set_ns6__IssuerSerialType(soap*, ...) allocate, set all public members
/// - ns6__IssuerSerialType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__IssuerSerialType(soap*, ns6__IssuerSerialType*) deserialize from a stream
/// - int soap_write_ns6__IssuerSerialType(soap*, ns6__IssuerSerialType*) serialize to a stream
/// - ns6__IssuerSerialType* ns6__IssuerSerialType::soap_dup(soap*) returns deep copy of ns6__IssuerSerialType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__IssuerSerialType::soap_del() deep deletes ns6__IssuerSerialType data members, use only after ns6__IssuerSerialType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__IssuerSerialType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":X509IssuerName.
    ns5__X509IssuerNameType              ns5__X509IssuerName            1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":X509SerialNumber.
    ns5__X509SerialNumberType            ns5__X509SerialNumber          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignerRoleType is a complexType.
///
/// class ns6__SignerRoleType operations:
/// - ns6__SignerRoleType* soap_new_ns6__SignerRoleType(soap*) allocate and default initialize
/// - ns6__SignerRoleType* soap_new_ns6__SignerRoleType(soap*, int num) allocate array and default initialize values
/// - ns6__SignerRoleType* soap_new_req_ns6__SignerRoleType(soap*, ...) allocate, set required members
/// - ns6__SignerRoleType* soap_new_set_ns6__SignerRoleType(soap*, ...) allocate, set all public members
/// - ns6__SignerRoleType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__SignerRoleType(soap*, ns6__SignerRoleType*) deserialize from a stream
/// - int soap_write_ns6__SignerRoleType(soap*, ns6__SignerRoleType*) serialize to a stream
/// - ns6__SignerRoleType* ns6__SignerRoleType::soap_dup(soap*) returns deep copy of ns6__SignerRoleType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__SignerRoleType::soap_del() deep deletes ns6__SignerRoleType data members, use only after ns6__SignerRoleType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__SignerRoleType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ClaimedRoles.
    ns6__ClaimedRolesListType*           ns6__ClaimedRoles              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ClaimedRolesListType is a complexType.
///
/// class ns6__ClaimedRolesListType operations:
/// - ns6__ClaimedRolesListType* soap_new_ns6__ClaimedRolesListType(soap*) allocate and default initialize
/// - ns6__ClaimedRolesListType* soap_new_ns6__ClaimedRolesListType(soap*, int num) allocate array and default initialize values
/// - ns6__ClaimedRolesListType* soap_new_req_ns6__ClaimedRolesListType(soap*, ...) allocate, set required members
/// - ns6__ClaimedRolesListType* soap_new_set_ns6__ClaimedRolesListType(soap*, ...) allocate, set all public members
/// - ns6__ClaimedRolesListType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__ClaimedRolesListType(soap*, ns6__ClaimedRolesListType*) deserialize from a stream
/// - int soap_write_ns6__ClaimedRolesListType(soap*, ns6__ClaimedRolesListType*) serialize to a stream
/// - ns6__ClaimedRolesListType* ns6__ClaimedRolesListType::soap_dup(soap*) returns deep copy of ns6__ClaimedRolesListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__ClaimedRolesListType::soap_del() deep deletes ns6__ClaimedRolesListType data members, use only after ns6__ClaimedRolesListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__ClaimedRolesListType
{ public:
/// Vector of ns6__ClaimedRoleType* element refs of length 1..unbounded.
    std::vector<ns6__ClaimedRoleType*  > ns6__ClaimedRole               1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ClaimedRoleType is a complexType.
///
/// class ns6__ClaimedRoleType operations:
/// - ns6__ClaimedRoleType* soap_new_ns6__ClaimedRoleType(soap*) allocate and default initialize
/// - ns6__ClaimedRoleType* soap_new_ns6__ClaimedRoleType(soap*, int num) allocate array and default initialize values
/// - ns6__ClaimedRoleType* soap_new_req_ns6__ClaimedRoleType(soap*, ...) allocate, set required members
/// - ns6__ClaimedRoleType* soap_new_set_ns6__ClaimedRoleType(soap*, ...) allocate, set all public members
/// - ns6__ClaimedRoleType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__ClaimedRoleType(soap*, ns6__ClaimedRoleType*) deserialize from a stream
/// - int soap_write_ns6__ClaimedRoleType(soap*, ns6__ClaimedRoleType*) serialize to a stream
/// - ns6__ClaimedRoleType* ns6__ClaimedRoleType::soap_dup(soap*) returns deep copy of ns6__ClaimedRoleType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__ClaimedRoleType::soap_del() deep deletes ns6__ClaimedRoleType data members, use only after ns6__ClaimedRoleType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__ClaimedRoleType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SignatureAttribute.
    ns5__SignatureType*                  ns3__SignatureAttribute        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":UnsignedPropertiesType is a complexType.
///
/// class ns6__UnsignedPropertiesType operations:
/// - ns6__UnsignedPropertiesType* soap_new_ns6__UnsignedPropertiesType(soap*) allocate and default initialize
/// - ns6__UnsignedPropertiesType* soap_new_ns6__UnsignedPropertiesType(soap*, int num) allocate array and default initialize values
/// - ns6__UnsignedPropertiesType* soap_new_req_ns6__UnsignedPropertiesType(soap*, ...) allocate, set required members
/// - ns6__UnsignedPropertiesType* soap_new_set_ns6__UnsignedPropertiesType(soap*, ...) allocate, set all public members
/// - ns6__UnsignedPropertiesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__UnsignedPropertiesType(soap*, ns6__UnsignedPropertiesType*) deserialize from a stream
/// - int soap_write_ns6__UnsignedPropertiesType(soap*, ns6__UnsignedPropertiesType*) serialize to a stream
/// - ns6__UnsignedPropertiesType* ns6__UnsignedPropertiesType::soap_dup(soap*) returns deep copy of ns6__UnsignedPropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__UnsignedPropertiesType::soap_del() deep deletes ns6__UnsignedPropertiesType data members, use only after ns6__UnsignedPropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__UnsignedPropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":UnsignedSignatureProperties.
    ns6__UnsignedSignaturePropertiesType*  ns6__UnsignedSignatureProperties 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":UnsignedSignaturePropertiesType is a complexType.
///
/// class ns6__UnsignedSignaturePropertiesType operations:
/// - ns6__UnsignedSignaturePropertiesType* soap_new_ns6__UnsignedSignaturePropertiesType(soap*) allocate and default initialize
/// - ns6__UnsignedSignaturePropertiesType* soap_new_ns6__UnsignedSignaturePropertiesType(soap*, int num) allocate array and default initialize values
/// - ns6__UnsignedSignaturePropertiesType* soap_new_req_ns6__UnsignedSignaturePropertiesType(soap*, ...) allocate, set required members
/// - ns6__UnsignedSignaturePropertiesType* soap_new_set_ns6__UnsignedSignaturePropertiesType(soap*, ...) allocate, set all public members
/// - ns6__UnsignedSignaturePropertiesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__UnsignedSignaturePropertiesType(soap*, ns6__UnsignedSignaturePropertiesType*) deserialize from a stream
/// - int soap_write_ns6__UnsignedSignaturePropertiesType(soap*, ns6__UnsignedSignaturePropertiesType*) serialize to a stream
/// - ns6__UnsignedSignaturePropertiesType* ns6__UnsignedSignaturePropertiesType::soap_dup(soap*) returns deep copy of ns6__UnsignedSignaturePropertiesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__UnsignedSignaturePropertiesType::soap_del() deep deletes ns6__UnsignedSignaturePropertiesType data members, use only after ns6__UnsignedSignaturePropertiesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__UnsignedSignaturePropertiesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CounterSignature.
    ns6__CounterSignatureType*           ns6__CounterSignature          0;	///< Optional element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStamp.
    ns6__SignatureTimeStampType*         ns6__SignatureTimeStamp        1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefs.
    ns6__CompleteCertificateRefsType*    ns6__CompleteCertificateRefs   1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefs.
    ns6__CompleteRevocationRefsType*     ns6__CompleteRevocationRefs    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStamp.
    ns6__SigAndRefsTimeStampType*        ns6__SigAndRefsTimeStamp       1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CertificateValues.
    ns6__CertificateValuesType*          ns6__CertificateValues         1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":RevocationValues.
    ns6__RevocationValuesType*           ns6__RevocationValues          1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStamp.
    ns6__ArchiveTimeStampType*           ns6__ArchiveTimeStamp          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CounterSignatureType is a complexType.
///
/// class ns6__CounterSignatureType operations:
/// - ns6__CounterSignatureType* soap_new_ns6__CounterSignatureType(soap*) allocate and default initialize
/// - ns6__CounterSignatureType* soap_new_ns6__CounterSignatureType(soap*, int num) allocate array and default initialize values
/// - ns6__CounterSignatureType* soap_new_req_ns6__CounterSignatureType(soap*, ...) allocate, set required members
/// - ns6__CounterSignatureType* soap_new_set_ns6__CounterSignatureType(soap*, ...) allocate, set all public members
/// - ns6__CounterSignatureType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CounterSignatureType(soap*, ns6__CounterSignatureType*) deserialize from a stream
/// - int soap_write_ns6__CounterSignatureType(soap*, ns6__CounterSignatureType*) serialize to a stream
/// - ns6__CounterSignatureType* ns6__CounterSignatureType::soap_dup(soap*) returns deep copy of ns6__CounterSignatureType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CounterSignatureType::soap_del() deep deletes ns6__CounterSignatureType data members, use only after ns6__CounterSignatureType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CounterSignatureType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":Signature.
    ns5__SignatureType*                  ns5__Signature                 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStampType is a complexType.
///
/// class ns6__SignatureTimeStampType operations:
/// - ns6__SignatureTimeStampType* soap_new_ns6__SignatureTimeStampType(soap*) allocate and default initialize
/// - ns6__SignatureTimeStampType* soap_new_ns6__SignatureTimeStampType(soap*, int num) allocate array and default initialize values
/// - ns6__SignatureTimeStampType* soap_new_req_ns6__SignatureTimeStampType(soap*, ...) allocate, set required members
/// - ns6__SignatureTimeStampType* soap_new_set_ns6__SignatureTimeStampType(soap*, ...) allocate, set all public members
/// - ns6__SignatureTimeStampType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__SignatureTimeStampType(soap*, ns6__SignatureTimeStampType*) deserialize from a stream
/// - int soap_write_ns6__SignatureTimeStampType(soap*, ns6__SignatureTimeStampType*) serialize to a stream
/// - ns6__SignatureTimeStampType* ns6__SignatureTimeStampType::soap_dup(soap*) returns deep copy of ns6__SignatureTimeStampType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__SignatureTimeStampType::soap_del() deep deletes ns6__SignatureTimeStampType data members, use only after ns6__SignatureTimeStampType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__SignatureTimeStampType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp.
    ns6__EncapsulatedTimeStampType       ns6__EncapsulatedTimeStamp     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefsType is a complexType.
///
/// class ns6__CompleteCertificateRefsType operations:
/// - ns6__CompleteCertificateRefsType* soap_new_ns6__CompleteCertificateRefsType(soap*) allocate and default initialize
/// - ns6__CompleteCertificateRefsType* soap_new_ns6__CompleteCertificateRefsType(soap*, int num) allocate array and default initialize values
/// - ns6__CompleteCertificateRefsType* soap_new_req_ns6__CompleteCertificateRefsType(soap*, ...) allocate, set required members
/// - ns6__CompleteCertificateRefsType* soap_new_set_ns6__CompleteCertificateRefsType(soap*, ...) allocate, set all public members
/// - ns6__CompleteCertificateRefsType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CompleteCertificateRefsType(soap*, ns6__CompleteCertificateRefsType*) deserialize from a stream
/// - int soap_write_ns6__CompleteCertificateRefsType(soap*, ns6__CompleteCertificateRefsType*) serialize to a stream
/// - ns6__CompleteCertificateRefsType* ns6__CompleteCertificateRefsType::soap_dup(soap*) returns deep copy of ns6__CompleteCertificateRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CompleteCertificateRefsType::soap_del() deep deletes ns6__CompleteCertificateRefsType data members, use only after ns6__CompleteCertificateRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CompleteCertificateRefsType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CertRefs.
    ns6__CertRefsType*                   ns6__CertRefs                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertRefsType is a complexType.
///
/// class ns6__CertRefsType operations:
/// - ns6__CertRefsType* soap_new_ns6__CertRefsType(soap*) allocate and default initialize
/// - ns6__CertRefsType* soap_new_ns6__CertRefsType(soap*, int num) allocate array and default initialize values
/// - ns6__CertRefsType* soap_new_req_ns6__CertRefsType(soap*, ...) allocate, set required members
/// - ns6__CertRefsType* soap_new_set_ns6__CertRefsType(soap*, ...) allocate, set all public members
/// - ns6__CertRefsType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CertRefsType(soap*, ns6__CertRefsType*) deserialize from a stream
/// - int soap_write_ns6__CertRefsType(soap*, ns6__CertRefsType*) serialize to a stream
/// - ns6__CertRefsType* ns6__CertRefsType::soap_dup(soap*) returns deep copy of ns6__CertRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CertRefsType::soap_del() deep deletes ns6__CertRefsType data members, use only after ns6__CertRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CertRefsType
{ public:
/// Vector of ns6__CertType* element refs of length 1..unbounded.
    std::vector<ns6__CertType*         > ns6__Cert                      1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefsType is a complexType.
///
/// class ns6__CompleteRevocationRefsType operations:
/// - ns6__CompleteRevocationRefsType* soap_new_ns6__CompleteRevocationRefsType(soap*) allocate and default initialize
/// - ns6__CompleteRevocationRefsType* soap_new_ns6__CompleteRevocationRefsType(soap*, int num) allocate array and default initialize values
/// - ns6__CompleteRevocationRefsType* soap_new_req_ns6__CompleteRevocationRefsType(soap*, ...) allocate, set required members
/// - ns6__CompleteRevocationRefsType* soap_new_set_ns6__CompleteRevocationRefsType(soap*, ...) allocate, set all public members
/// - ns6__CompleteRevocationRefsType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CompleteRevocationRefsType(soap*, ns6__CompleteRevocationRefsType*) deserialize from a stream
/// - int soap_write_ns6__CompleteRevocationRefsType(soap*, ns6__CompleteRevocationRefsType*) serialize to a stream
/// - ns6__CompleteRevocationRefsType* ns6__CompleteRevocationRefsType::soap_dup(soap*) returns deep copy of ns6__CompleteRevocationRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CompleteRevocationRefsType::soap_del() deep deletes ns6__CompleteRevocationRefsType data members, use only after ns6__CompleteRevocationRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CompleteRevocationRefsType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CRLRefs.
    ns6__CRLRefsType*                    ns6__CRLRefs                   1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":OCSPRefs.
    ns6__OCSPRefsType*                   ns6__OCSPRefs                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLRefsType is a complexType.
///
/// class ns6__CRLRefsType operations:
/// - ns6__CRLRefsType* soap_new_ns6__CRLRefsType(soap*) allocate and default initialize
/// - ns6__CRLRefsType* soap_new_ns6__CRLRefsType(soap*, int num) allocate array and default initialize values
/// - ns6__CRLRefsType* soap_new_req_ns6__CRLRefsType(soap*, ...) allocate, set required members
/// - ns6__CRLRefsType* soap_new_set_ns6__CRLRefsType(soap*, ...) allocate, set all public members
/// - ns6__CRLRefsType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CRLRefsType(soap*, ns6__CRLRefsType*) deserialize from a stream
/// - int soap_write_ns6__CRLRefsType(soap*, ns6__CRLRefsType*) serialize to a stream
/// - ns6__CRLRefsType* ns6__CRLRefsType::soap_dup(soap*) returns deep copy of ns6__CRLRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CRLRefsType::soap_del() deep deletes ns6__CRLRefsType data members, use only after ns6__CRLRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CRLRefsType
{ public:
/// Vector of ns6__CRLRefType* element refs of length 1..unbounded.
    std::vector<ns6__CRLRefType*       > ns6__CRLRef                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLRefType is a complexType.
///
/// class ns6__CRLRefType operations:
/// - ns6__CRLRefType* soap_new_ns6__CRLRefType(soap*) allocate and default initialize
/// - ns6__CRLRefType* soap_new_ns6__CRLRefType(soap*, int num) allocate array and default initialize values
/// - ns6__CRLRefType* soap_new_req_ns6__CRLRefType(soap*, ...) allocate, set required members
/// - ns6__CRLRefType* soap_new_set_ns6__CRLRefType(soap*, ...) allocate, set all public members
/// - ns6__CRLRefType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CRLRefType(soap*, ns6__CRLRefType*) deserialize from a stream
/// - int soap_write_ns6__CRLRefType(soap*, ns6__CRLRefType*) serialize to a stream
/// - ns6__CRLRefType* ns6__CRLRefType::soap_dup(soap*) returns deep copy of ns6__CRLRefType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CRLRefType::soap_del() deep deletes ns6__CRLRefType data members, use only after ns6__CRLRefType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CRLRefType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValue.
    ns6__DigestAlgAndValueType*          ns6__DigestAlgAndValue         1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CRLIdentifier.
    ns6__CRLIdentifierType*              ns6__CRLIdentifier             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValueType is a complexType.
///
/// class ns6__DigestAlgAndValueType operations:
/// - ns6__DigestAlgAndValueType* soap_new_ns6__DigestAlgAndValueType(soap*) allocate and default initialize
/// - ns6__DigestAlgAndValueType* soap_new_ns6__DigestAlgAndValueType(soap*, int num) allocate array and default initialize values
/// - ns6__DigestAlgAndValueType* soap_new_req_ns6__DigestAlgAndValueType(soap*, ...) allocate, set required members
/// - ns6__DigestAlgAndValueType* soap_new_set_ns6__DigestAlgAndValueType(soap*, ...) allocate, set all public members
/// - ns6__DigestAlgAndValueType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__DigestAlgAndValueType(soap*, ns6__DigestAlgAndValueType*) deserialize from a stream
/// - int soap_write_ns6__DigestAlgAndValueType(soap*, ns6__DigestAlgAndValueType*) serialize to a stream
/// - ns6__DigestAlgAndValueType* ns6__DigestAlgAndValueType::soap_dup(soap*) returns deep copy of ns6__DigestAlgAndValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__DigestAlgAndValueType::soap_del() deep deletes ns6__DigestAlgAndValueType data members, use only after ns6__DigestAlgAndValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__DigestAlgAndValueType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestMethod.
    ns5__DigestMethodType*               ns5__DigestMethod              1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":DigestValue.
    ns5__DigestValueType*                ns5__DigestValue               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLIdentifierType is a complexType.
///
/// class ns6__CRLIdentifierType operations:
/// - ns6__CRLIdentifierType* soap_new_ns6__CRLIdentifierType(soap*) allocate and default initialize
/// - ns6__CRLIdentifierType* soap_new_ns6__CRLIdentifierType(soap*, int num) allocate array and default initialize values
/// - ns6__CRLIdentifierType* soap_new_req_ns6__CRLIdentifierType(soap*, ...) allocate, set required members
/// - ns6__CRLIdentifierType* soap_new_set_ns6__CRLIdentifierType(soap*, ...) allocate, set all public members
/// - ns6__CRLIdentifierType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CRLIdentifierType(soap*, ns6__CRLIdentifierType*) deserialize from a stream
/// - int soap_write_ns6__CRLIdentifierType(soap*, ns6__CRLIdentifierType*) serialize to a stream
/// - ns6__CRLIdentifierType* ns6__CRLIdentifierType::soap_dup(soap*) returns deep copy of ns6__CRLIdentifierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CRLIdentifierType::soap_del() deep deletes ns6__CRLIdentifierType data members, use only after ns6__CRLIdentifierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CRLIdentifierType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":Issuer.
    _XML                                 ns6__Issuer                    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":IssueTime.
    _XML                                 ns6__IssueTime                 1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":Number.
    _XML                                 ns6__Number                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPRefsType is a complexType.
///
/// class ns6__OCSPRefsType operations:
/// - ns6__OCSPRefsType* soap_new_ns6__OCSPRefsType(soap*) allocate and default initialize
/// - ns6__OCSPRefsType* soap_new_ns6__OCSPRefsType(soap*, int num) allocate array and default initialize values
/// - ns6__OCSPRefsType* soap_new_req_ns6__OCSPRefsType(soap*, ...) allocate, set required members
/// - ns6__OCSPRefsType* soap_new_set_ns6__OCSPRefsType(soap*, ...) allocate, set all public members
/// - ns6__OCSPRefsType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__OCSPRefsType(soap*, ns6__OCSPRefsType*) deserialize from a stream
/// - int soap_write_ns6__OCSPRefsType(soap*, ns6__OCSPRefsType*) serialize to a stream
/// - ns6__OCSPRefsType* ns6__OCSPRefsType::soap_dup(soap*) returns deep copy of ns6__OCSPRefsType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__OCSPRefsType::soap_del() deep deletes ns6__OCSPRefsType data members, use only after ns6__OCSPRefsType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__OCSPRefsType
{ public:
/// Vector of ns6__OCSPRefType* element refs of length 1..unbounded.
    std::vector<ns6__OCSPRefType*      > ns6__OCSPRef                   1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPRefType is a complexType.
///
/// class ns6__OCSPRefType operations:
/// - ns6__OCSPRefType* soap_new_ns6__OCSPRefType(soap*) allocate and default initialize
/// - ns6__OCSPRefType* soap_new_ns6__OCSPRefType(soap*, int num) allocate array and default initialize values
/// - ns6__OCSPRefType* soap_new_req_ns6__OCSPRefType(soap*, ...) allocate, set required members
/// - ns6__OCSPRefType* soap_new_set_ns6__OCSPRefType(soap*, ...) allocate, set all public members
/// - ns6__OCSPRefType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__OCSPRefType(soap*, ns6__OCSPRefType*) deserialize from a stream
/// - int soap_write_ns6__OCSPRefType(soap*, ns6__OCSPRefType*) serialize to a stream
/// - ns6__OCSPRefType* ns6__OCSPRefType::soap_dup(soap*) returns deep copy of ns6__OCSPRefType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__OCSPRefType::soap_del() deep deletes ns6__OCSPRefType data members, use only after ns6__OCSPRefType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__OCSPRefType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifier.
    ns6__OCSPIdentifierType*             ns6__OCSPIdentifier            1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValue.
    ns6__DigestAlgAndValueType*          ns6__DigestAlgAndValue         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifierType is a complexType.
///
/// class ns6__OCSPIdentifierType operations:
/// - ns6__OCSPIdentifierType* soap_new_ns6__OCSPIdentifierType(soap*) allocate and default initialize
/// - ns6__OCSPIdentifierType* soap_new_ns6__OCSPIdentifierType(soap*, int num) allocate array and default initialize values
/// - ns6__OCSPIdentifierType* soap_new_req_ns6__OCSPIdentifierType(soap*, ...) allocate, set required members
/// - ns6__OCSPIdentifierType* soap_new_set_ns6__OCSPIdentifierType(soap*, ...) allocate, set all public members
/// - ns6__OCSPIdentifierType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__OCSPIdentifierType(soap*, ns6__OCSPIdentifierType*) deserialize from a stream
/// - int soap_write_ns6__OCSPIdentifierType(soap*, ns6__OCSPIdentifierType*) serialize to a stream
/// - ns6__OCSPIdentifierType* ns6__OCSPIdentifierType::soap_dup(soap*) returns deep copy of ns6__OCSPIdentifierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__OCSPIdentifierType::soap_del() deep deletes ns6__OCSPIdentifierType data members, use only after ns6__OCSPIdentifierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__OCSPIdentifierType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ResponderID.
    ns6__ResponderIDType*                ns6__ResponderID               1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ProducedAt.
    _XML                                 ns6__ProducedAt                1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ResponderIDType is a complexType.
///
/// class ns6__ResponderIDType operations:
/// - ns6__ResponderIDType* soap_new_ns6__ResponderIDType(soap*) allocate and default initialize
/// - ns6__ResponderIDType* soap_new_ns6__ResponderIDType(soap*, int num) allocate array and default initialize values
/// - ns6__ResponderIDType* soap_new_req_ns6__ResponderIDType(soap*, ...) allocate, set required members
/// - ns6__ResponderIDType* soap_new_set_ns6__ResponderIDType(soap*, ...) allocate, set all public members
/// - ns6__ResponderIDType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__ResponderIDType(soap*, ns6__ResponderIDType*) deserialize from a stream
/// - int soap_write_ns6__ResponderIDType(soap*, ns6__ResponderIDType*) serialize to a stream
/// - ns6__ResponderIDType* ns6__ResponderIDType::soap_dup(soap*) returns deep copy of ns6__ResponderIDType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__ResponderIDType::soap_del() deep deletes ns6__ResponderIDType data members, use only after ns6__ResponderIDType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__ResponderIDType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":ByName.
    _XML                                 ns6__ByName                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStampType is a complexType.
///
/// class ns6__SigAndRefsTimeStampType operations:
/// - ns6__SigAndRefsTimeStampType* soap_new_ns6__SigAndRefsTimeStampType(soap*) allocate and default initialize
/// - ns6__SigAndRefsTimeStampType* soap_new_ns6__SigAndRefsTimeStampType(soap*, int num) allocate array and default initialize values
/// - ns6__SigAndRefsTimeStampType* soap_new_req_ns6__SigAndRefsTimeStampType(soap*, ...) allocate, set required members
/// - ns6__SigAndRefsTimeStampType* soap_new_set_ns6__SigAndRefsTimeStampType(soap*, ...) allocate, set all public members
/// - ns6__SigAndRefsTimeStampType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__SigAndRefsTimeStampType(soap*, ns6__SigAndRefsTimeStampType*) deserialize from a stream
/// - int soap_write_ns6__SigAndRefsTimeStampType(soap*, ns6__SigAndRefsTimeStampType*) serialize to a stream
/// - ns6__SigAndRefsTimeStampType* ns6__SigAndRefsTimeStampType::soap_dup(soap*) returns deep copy of ns6__SigAndRefsTimeStampType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__SigAndRefsTimeStampType::soap_del() deep deletes ns6__SigAndRefsTimeStampType data members, use only after ns6__SigAndRefsTimeStampType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__SigAndRefsTimeStampType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp.
    ns6__EncapsulatedTimeStampType       ns6__EncapsulatedTimeStamp     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CertificateValuesType is a complexType.
///
/// class ns6__CertificateValuesType operations:
/// - ns6__CertificateValuesType* soap_new_ns6__CertificateValuesType(soap*) allocate and default initialize
/// - ns6__CertificateValuesType* soap_new_ns6__CertificateValuesType(soap*, int num) allocate array and default initialize values
/// - ns6__CertificateValuesType* soap_new_req_ns6__CertificateValuesType(soap*, ...) allocate, set required members
/// - ns6__CertificateValuesType* soap_new_set_ns6__CertificateValuesType(soap*, ...) allocate, set all public members
/// - ns6__CertificateValuesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CertificateValuesType(soap*, ns6__CertificateValuesType*) deserialize from a stream
/// - int soap_write_ns6__CertificateValuesType(soap*, ns6__CertificateValuesType*) serialize to a stream
/// - ns6__CertificateValuesType* ns6__CertificateValuesType::soap_dup(soap*) returns deep copy of ns6__CertificateValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CertificateValuesType::soap_del() deep deletes ns6__CertificateValuesType data members, use only after ns6__CertificateValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CertificateValuesType
{ public:
/// Vector of ns6__EncapsulatedX509CertificateType* element refs of length 1..unbounded.
    std::vector<ns6__EncapsulatedX509CertificateType*> ns6__EncapsulatedX509Certificate 1;	///< Elements.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":RevocationValuesType is a complexType.
///
/// class ns6__RevocationValuesType operations:
/// - ns6__RevocationValuesType* soap_new_ns6__RevocationValuesType(soap*) allocate and default initialize
/// - ns6__RevocationValuesType* soap_new_ns6__RevocationValuesType(soap*, int num) allocate array and default initialize values
/// - ns6__RevocationValuesType* soap_new_req_ns6__RevocationValuesType(soap*, ...) allocate, set required members
/// - ns6__RevocationValuesType* soap_new_set_ns6__RevocationValuesType(soap*, ...) allocate, set all public members
/// - ns6__RevocationValuesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__RevocationValuesType(soap*, ns6__RevocationValuesType*) deserialize from a stream
/// - int soap_write_ns6__RevocationValuesType(soap*, ns6__RevocationValuesType*) serialize to a stream
/// - ns6__RevocationValuesType* ns6__RevocationValuesType::soap_dup(soap*) returns deep copy of ns6__RevocationValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__RevocationValuesType::soap_del() deep deletes ns6__RevocationValuesType data members, use only after ns6__RevocationValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__RevocationValuesType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":CRLValues.
    ns6__CRLValuesType*                  ns6__CRLValues                 1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":OCSPValues.
    ns6__OCSPValuesType*                 ns6__OCSPValues                1;	///< Required element.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":CRLValuesType is a complexType.
///
/// class ns6__CRLValuesType operations:
/// - ns6__CRLValuesType* soap_new_ns6__CRLValuesType(soap*) allocate and default initialize
/// - ns6__CRLValuesType* soap_new_ns6__CRLValuesType(soap*, int num) allocate array and default initialize values
/// - ns6__CRLValuesType* soap_new_req_ns6__CRLValuesType(soap*, ...) allocate, set required members
/// - ns6__CRLValuesType* soap_new_set_ns6__CRLValuesType(soap*, ...) allocate, set all public members
/// - ns6__CRLValuesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__CRLValuesType(soap*, ns6__CRLValuesType*) deserialize from a stream
/// - int soap_write_ns6__CRLValuesType(soap*, ns6__CRLValuesType*) serialize to a stream
/// - ns6__CRLValuesType* ns6__CRLValuesType::soap_dup(soap*) returns deep copy of ns6__CRLValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__CRLValuesType::soap_del() deep deletes ns6__CRLValuesType data members, use only after ns6__CRLValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__CRLValuesType
{ public:
/// Vector of ns6__EncapsulatedCRLValueType* element refs of length 1..unbounded.
    std::vector<ns6__EncapsulatedCRLValueType*> ns6__EncapsulatedCRLValue      1;	///< Elements.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":OCSPValuesType is a complexType.
///
/// class ns6__OCSPValuesType operations:
/// - ns6__OCSPValuesType* soap_new_ns6__OCSPValuesType(soap*) allocate and default initialize
/// - ns6__OCSPValuesType* soap_new_ns6__OCSPValuesType(soap*, int num) allocate array and default initialize values
/// - ns6__OCSPValuesType* soap_new_req_ns6__OCSPValuesType(soap*, ...) allocate, set required members
/// - ns6__OCSPValuesType* soap_new_set_ns6__OCSPValuesType(soap*, ...) allocate, set all public members
/// - ns6__OCSPValuesType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__OCSPValuesType(soap*, ns6__OCSPValuesType*) deserialize from a stream
/// - int soap_write_ns6__OCSPValuesType(soap*, ns6__OCSPValuesType*) serialize to a stream
/// - ns6__OCSPValuesType* ns6__OCSPValuesType::soap_dup(soap*) returns deep copy of ns6__OCSPValuesType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__OCSPValuesType::soap_del() deep deletes ns6__OCSPValuesType data members, use only after ns6__OCSPValuesType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__OCSPValuesType
{ public:
/// Vector of ns6__EncapsulatedOCSPValueType* element refs of length 1..unbounded.
    std::vector<ns6__EncapsulatedOCSPValueType*> ns6__EncapsulatedOCSPValue     1;	///< Elements.
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStampType is a complexType.
///
/// class ns6__ArchiveTimeStampType operations:
/// - ns6__ArchiveTimeStampType* soap_new_ns6__ArchiveTimeStampType(soap*) allocate and default initialize
/// - ns6__ArchiveTimeStampType* soap_new_ns6__ArchiveTimeStampType(soap*, int num) allocate array and default initialize values
/// - ns6__ArchiveTimeStampType* soap_new_req_ns6__ArchiveTimeStampType(soap*, ...) allocate, set required members
/// - ns6__ArchiveTimeStampType* soap_new_set_ns6__ArchiveTimeStampType(soap*, ...) allocate, set all public members
/// - ns6__ArchiveTimeStampType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__ArchiveTimeStampType(soap*, ns6__ArchiveTimeStampType*) deserialize from a stream
/// - int soap_write_ns6__ArchiveTimeStampType(soap*, ns6__ArchiveTimeStampType*) serialize to a stream
/// - ns6__ArchiveTimeStampType* ns6__ArchiveTimeStampType::soap_dup(soap*) returns deep copy of ns6__ArchiveTimeStampType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__ArchiveTimeStampType::soap_del() deep deletes ns6__ArchiveTimeStampType data members, use only after ns6__ArchiveTimeStampType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__ArchiveTimeStampType
{ public:
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod.
    ns5__CanonicalizationMethodType*     ns5__CanonicalizationMethod    1;	///< Required element.
/// Element reference "http://uri.etsi.org/01903/v1.3.2#:""http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp.
    ns6__EncapsulatedTimeStampType       ns6__EncapsulatedTimeStamp     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGListType is a complexType.
///
/// class ns7__SVGListType operations:
/// - ns7__SVGListType* soap_new_ns7__SVGListType(soap*) allocate and default initialize
/// - ns7__SVGListType* soap_new_ns7__SVGListType(soap*, int num) allocate array and default initialize values
/// - ns7__SVGListType* soap_new_req_ns7__SVGListType(soap*, ...) allocate, set required members
/// - ns7__SVGListType* soap_new_set_ns7__SVGListType(soap*, ...) allocate, set all public members
/// - ns7__SVGListType::soap_default(soap*) default initialize members
/// - int soap_read_ns7__SVGListType(soap*, ns7__SVGListType*) deserialize from a stream
/// - int soap_write_ns7__SVGListType(soap*, ns7__SVGListType*) serialize to a stream
/// - ns7__SVGListType* ns7__SVGListType::soap_dup(soap*) returns deep copy of ns7__SVGListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns7__SVGListType::soap_del() deep deletes ns7__SVGListType data members, use only after ns7__SVGListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns7__SVGListType
{ public:
/// Vector of ns7__SVGType element refs of length 1..unbounded.
    std::vector<ns7__SVGType           > ns7__SVG                       1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponseType is a complexType.
///
/// class ns9__AttributeSupplierResponseType operations:
/// - ns9__AttributeSupplierResponseType* soap_new_ns9__AttributeSupplierResponseType(soap*) allocate and default initialize
/// - ns9__AttributeSupplierResponseType* soap_new_ns9__AttributeSupplierResponseType(soap*, int num) allocate array and default initialize values
/// - ns9__AttributeSupplierResponseType* soap_new_req_ns9__AttributeSupplierResponseType(soap*, ...) allocate, set required members
/// - ns9__AttributeSupplierResponseType* soap_new_set_ns9__AttributeSupplierResponseType(soap*, ...) allocate, set all public members
/// - ns9__AttributeSupplierResponseType::soap_default(soap*) default initialize members
/// - int soap_read_ns9__AttributeSupplierResponseType(soap*, ns9__AttributeSupplierResponseType*) deserialize from a stream
/// - int soap_write_ns9__AttributeSupplierResponseType(soap*, ns9__AttributeSupplierResponseType*) serialize to a stream
/// - ns9__AttributeSupplierResponseType* ns9__AttributeSupplierResponseType::soap_dup(soap*) returns deep copy of ns9__AttributeSupplierResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns9__AttributeSupplierResponseType::soap_del() deep deletes ns9__AttributeSupplierResponseType data members, use only after ns9__AttributeSupplierResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns9__AttributeSupplierResponseType
{ public:
/// Vector of ns3__AttributeSupplierType* of length 0..unbounded.
    std::vector<ns3__AttributeSupplierType*> AttributeSupplier              0;	///< Elements.
/// Element "ErrorMessage" of XSD type xs:string.
    std::string*                         ErrorMessage                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":PersonalData is a complexType.
///
/// class ns1__PersonalData operations:
/// - ns1__PersonalData* soap_new_ns1__PersonalData(soap*) allocate and default initialize
/// - ns1__PersonalData* soap_new_ns1__PersonalData(soap*, int num) allocate array and default initialize values
/// - ns1__PersonalData* soap_new_req_ns1__PersonalData(soap*, ...) allocate, set required members
/// - ns1__PersonalData* soap_new_set_ns1__PersonalData(soap*, ...) allocate, set all public members
/// - ns1__PersonalData::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PersonalData(soap*, ns1__PersonalData*) deserialize from a stream
/// - int soap_write_ns1__PersonalData(soap*, ns1__PersonalData*) serialize to a stream
/// - ns1__PersonalData* ns1__PersonalData::soap_dup(soap*) returns deep copy of ns1__PersonalData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PersonalData::soap_del() deep deletes ns1__PersonalData data members, use only after ns1__PersonalData::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__PersonalData
{ public:
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "NIC" of XSD type xs:string.
    std::string                          NIC                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AttributeListType is a complexType.
///
/// class ns1__AttributeListType operations:
/// - ns1__AttributeListType* soap_new_ns1__AttributeListType(soap*) allocate and default initialize
/// - ns1__AttributeListType* soap_new_ns1__AttributeListType(soap*, int num) allocate array and default initialize values
/// - ns1__AttributeListType* soap_new_req_ns1__AttributeListType(soap*, ...) allocate, set required members
/// - ns1__AttributeListType* soap_new_set_ns1__AttributeListType(soap*, ...) allocate, set all public members
/// - ns1__AttributeListType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AttributeListType(soap*, ns1__AttributeListType*) deserialize from a stream
/// - int soap_write_ns1__AttributeListType(soap*, ns1__AttributeListType*) serialize to a stream
/// - ns1__AttributeListType* ns1__AttributeListType::soap_dup(soap*) returns deep copy of ns1__AttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AttributeListType::soap_del() deep deletes ns1__AttributeListType data members, use only after ns1__AttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AttributeListType
{ public:
/// Vector of ns1__AttributeType* of length 1..unbounded.
    std::vector<ns1__AttributeType*    > Attribute                      1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AttributeType is a complexType.
///
/// class ns1__AttributeType operations:
/// - ns1__AttributeType* soap_new_ns1__AttributeType(soap*) allocate and default initialize
/// - ns1__AttributeType* soap_new_ns1__AttributeType(soap*, int num) allocate array and default initialize values
/// - ns1__AttributeType* soap_new_req_ns1__AttributeType(soap*, ...) allocate, set required members
/// - ns1__AttributeType* soap_new_set_ns1__AttributeType(soap*, ...) allocate, set all public members
/// - ns1__AttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AttributeType(soap*, ns1__AttributeType*) deserialize from a stream
/// - int soap_write_ns1__AttributeType(soap*, ns1__AttributeType*) serialize to a stream
/// - ns1__AttributeType* ns1__AttributeType::soap_dup(soap*) returns deep copy of ns1__AttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AttributeType::soap_del() deep deletes ns1__AttributeType data members, use only after ns1__AttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AttributeType
{ public:
/// Element "AttributeSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AttributeSupplierType.
    ns1__AttributeSupplierType*          AttributeSupplier              1;	///< Required element.
/// Element "MainAttribute" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":MainAttributeType.
    ns1__MainAttributeType*              MainAttribute                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AttributeSupplierType is a complexType.
///
/// class ns1__AttributeSupplierType operations:
/// - ns1__AttributeSupplierType* soap_new_ns1__AttributeSupplierType(soap*) allocate and default initialize
/// - ns1__AttributeSupplierType* soap_new_ns1__AttributeSupplierType(soap*, int num) allocate array and default initialize values
/// - ns1__AttributeSupplierType* soap_new_req_ns1__AttributeSupplierType(soap*, ...) allocate, set required members
/// - ns1__AttributeSupplierType* soap_new_set_ns1__AttributeSupplierType(soap*, ...) allocate, set all public members
/// - ns1__AttributeSupplierType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AttributeSupplierType(soap*, ns1__AttributeSupplierType*) deserialize from a stream
/// - int soap_write_ns1__AttributeSupplierType(soap*, ns1__AttributeSupplierType*) serialize to a stream
/// - ns1__AttributeSupplierType* ns1__AttributeSupplierType::soap_dup(soap*) returns deep copy of ns1__AttributeSupplierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AttributeSupplierType::soap_del() deep deletes ns1__AttributeSupplierType data members, use only after ns1__AttributeSupplierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__AttributeSupplierType
{ public:
/// Element "Id" of XSD type xs:string.
    std::string                          Id                             1;	///< Required element.
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Type" of XSD type xs:string.
    std::string*                         Type                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":MainAttributeType is a complexType.
///
/// class ns1__MainAttributeType operations:
/// - ns1__MainAttributeType* soap_new_ns1__MainAttributeType(soap*) allocate and default initialize
/// - ns1__MainAttributeType* soap_new_ns1__MainAttributeType(soap*, int num) allocate array and default initialize values
/// - ns1__MainAttributeType* soap_new_req_ns1__MainAttributeType(soap*, ...) allocate, set required members
/// - ns1__MainAttributeType* soap_new_set_ns1__MainAttributeType(soap*, ...) allocate, set all public members
/// - ns1__MainAttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MainAttributeType(soap*, ns1__MainAttributeType*) deserialize from a stream
/// - int soap_write_ns1__MainAttributeType(soap*, ns1__MainAttributeType*) serialize to a stream
/// - ns1__MainAttributeType* ns1__MainAttributeType::soap_dup(soap*) returns deep copy of ns1__MainAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MainAttributeType::soap_del() deep deletes ns1__MainAttributeType data members, use only after ns1__MainAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__MainAttributeType
{ public:
/// Element "AttributeID" of XSD type xs:string.
    std::string                          AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":LegalActListType.
    ns1__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "SubAttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SubAttributeListType.
    ns1__SubAttributeListType*           SubAttributeList               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":LegalActListType is a complexType.
///
/// class ns1__LegalActListType operations:
/// - ns1__LegalActListType* soap_new_ns1__LegalActListType(soap*) allocate and default initialize
/// - ns1__LegalActListType* soap_new_ns1__LegalActListType(soap*, int num) allocate array and default initialize values
/// - ns1__LegalActListType* soap_new_req_ns1__LegalActListType(soap*, ...) allocate, set required members
/// - ns1__LegalActListType* soap_new_set_ns1__LegalActListType(soap*, ...) allocate, set all public members
/// - ns1__LegalActListType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__LegalActListType(soap*, ns1__LegalActListType*) deserialize from a stream
/// - int soap_write_ns1__LegalActListType(soap*, ns1__LegalActListType*) serialize to a stream
/// - ns1__LegalActListType* ns1__LegalActListType::soap_dup(soap*) returns deep copy of ns1__LegalActListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LegalActListType::soap_del() deep deletes ns1__LegalActListType data members, use only after ns1__LegalActListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__LegalActListType
{ public:
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > LegalAct                       1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SubAttributeListType is a complexType.
///
/// class ns1__SubAttributeListType operations:
/// - ns1__SubAttributeListType* soap_new_ns1__SubAttributeListType(soap*) allocate and default initialize
/// - ns1__SubAttributeListType* soap_new_ns1__SubAttributeListType(soap*, int num) allocate array and default initialize values
/// - ns1__SubAttributeListType* soap_new_req_ns1__SubAttributeListType(soap*, ...) allocate, set required members
/// - ns1__SubAttributeListType* soap_new_set_ns1__SubAttributeListType(soap*, ...) allocate, set all public members
/// - ns1__SubAttributeListType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SubAttributeListType(soap*, ns1__SubAttributeListType*) deserialize from a stream
/// - int soap_write_ns1__SubAttributeListType(soap*, ns1__SubAttributeListType*) serialize to a stream
/// - ns1__SubAttributeListType* ns1__SubAttributeListType::soap_dup(soap*) returns deep copy of ns1__SubAttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SubAttributeListType::soap_del() deep deletes ns1__SubAttributeListType data members, use only after ns1__SubAttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SubAttributeListType
{ public:
/// Vector of ns1__SubAttributeType* of length 1..unbounded.
    std::vector<ns1__SubAttributeType* > SubAttribute                   1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SubAttributeType is a complexType.
///
/// class ns1__SubAttributeType operations:
/// - ns1__SubAttributeType* soap_new_ns1__SubAttributeType(soap*) allocate and default initialize
/// - ns1__SubAttributeType* soap_new_ns1__SubAttributeType(soap*, int num) allocate array and default initialize values
/// - ns1__SubAttributeType* soap_new_req_ns1__SubAttributeType(soap*, ...) allocate, set required members
/// - ns1__SubAttributeType* soap_new_set_ns1__SubAttributeType(soap*, ...) allocate, set all public members
/// - ns1__SubAttributeType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SubAttributeType(soap*, ns1__SubAttributeType*) deserialize from a stream
/// - int soap_write_ns1__SubAttributeType(soap*, ns1__SubAttributeType*) serialize to a stream
/// - ns1__SubAttributeType* ns1__SubAttributeType::soap_dup(soap*) returns deep copy of ns1__SubAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SubAttributeType::soap_del() deep deletes ns1__SubAttributeType data members, use only after ns1__SubAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SubAttributeType
{ public:
/// Element "AttributeID" of XSD type xs:string.
    std::string                          AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":LegalActListType.
    ns1__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "Value" of XSD type xs:string.
    std::string*                         Value                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":Status is a complexType.
///
/// class ns1__Status operations:
/// - ns1__Status* soap_new_ns1__Status(soap*) allocate and default initialize
/// - ns1__Status* soap_new_ns1__Status(soap*, int num) allocate array and default initialize values
/// - ns1__Status* soap_new_req_ns1__Status(soap*, ...) allocate, set required members
/// - ns1__Status* soap_new_set_ns1__Status(soap*, ...) allocate, set all public members
/// - ns1__Status::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Status(soap*, ns1__Status*) deserialize from a stream
/// - int soap_write_ns1__Status(soap*, ns1__Status*) serialize to a stream
/// - ns1__Status* ns1__Status::soap_dup(soap*) returns deep copy of ns1__Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Status::soap_del() deep deletes ns1__Status data members, use only after ns1__Status::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Status
{ public:
/// Element "Code" of XSD type xs:string.
    std::string                          Code                           1;	///< Required element.
/// Element "Message" of XSD type xs:string.
    std::string                          Message                        1;	///< Required element.
/// Element "Field" of XSD type xs:string.
    std::string*                         Field                          0;	///< Optional element.
/// Element "FieldValue" of XSD type xs:string.
    std::string*                         FieldValue                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":TransactionTypeList is a complexType.
///
/// class ns1__TransactionTypeList operations:
/// - ns1__TransactionTypeList* soap_new_ns1__TransactionTypeList(soap*) allocate and default initialize
/// - ns1__TransactionTypeList* soap_new_ns1__TransactionTypeList(soap*, int num) allocate array and default initialize values
/// - ns1__TransactionTypeList* soap_new_req_ns1__TransactionTypeList(soap*, ...) allocate, set required members
/// - ns1__TransactionTypeList* soap_new_set_ns1__TransactionTypeList(soap*, ...) allocate, set all public members
/// - ns1__TransactionTypeList::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TransactionTypeList(soap*, ns1__TransactionTypeList*) deserialize from a stream
/// - int soap_write_ns1__TransactionTypeList(soap*, ns1__TransactionTypeList*) serialize to a stream
/// - ns1__TransactionTypeList* ns1__TransactionTypeList::soap_dup(soap*) returns deep copy of ns1__TransactionTypeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TransactionTypeList::soap_del() deep deletes ns1__TransactionTypeList data members, use only after ns1__TransactionTypeList::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__TransactionTypeList
{ public:
/// Vector of ns1__TransactionType* of length 1..unbounded.
    std::vector<ns1__TransactionType*  > Transaction                    1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":TransactionType is a complexType.
///
/// class ns1__TransactionType operations:
/// - ns1__TransactionType* soap_new_ns1__TransactionType(soap*) allocate and default initialize
/// - ns1__TransactionType* soap_new_ns1__TransactionType(soap*, int num) allocate array and default initialize values
/// - ns1__TransactionType* soap_new_req_ns1__TransactionType(soap*, ...) allocate, set required members
/// - ns1__TransactionType* soap_new_set_ns1__TransactionType(soap*, ...) allocate, set all public members
/// - ns1__TransactionType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TransactionType(soap*, ns1__TransactionType*) deserialize from a stream
/// - int soap_write_ns1__TransactionType(soap*, ns1__TransactionType*) serialize to a stream
/// - ns1__TransactionType* ns1__TransactionType::soap_dup(soap*) returns deep copy of ns1__TransactionType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TransactionType::soap_del() deep deletes ns1__TransactionType data members, use only after ns1__TransactionType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__TransactionType
{ public:
/// Element "TransactionId" of XSD type xs:string.
    std::string                          TransactionId                  1;	///< Required element.
/// Element "AttributeSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AttributeSupplierType.
    ns1__AttributeSupplierType*          AttributeSupplier              1;	///< Required element.
/// Element "MainAttribute" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":MainAttributeType.
    ns1__MainAttributeType*              MainAttribute                  1;	///< Required element.
/// Element "AttributeSupplierCertificateChain" of XSD type xs:string.
    std::string                          AttributeSupplierCertificateChain 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AuthorizationRequest
/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AuthorizationRequest is a complexType.
///
/// class _ns1__AuthorizationRequest operations:
/// - _ns1__AuthorizationRequest* soap_new__ns1__AuthorizationRequest(soap*) allocate and default initialize
/// - _ns1__AuthorizationRequest* soap_new__ns1__AuthorizationRequest(soap*, int num) allocate array and default initialize values
/// - _ns1__AuthorizationRequest* soap_new_req__ns1__AuthorizationRequest(soap*, ...) allocate, set required members
/// - _ns1__AuthorizationRequest* soap_new_set__ns1__AuthorizationRequest(soap*, ...) allocate, set all public members
/// - _ns1__AuthorizationRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns1__AuthorizationRequest(soap*, _ns1__AuthorizationRequest*) deserialize from a stream
/// - int soap_write__ns1__AuthorizationRequest(soap*, _ns1__AuthorizationRequest*) serialize to a stream
/// - _ns1__AuthorizationRequest* _ns1__AuthorizationRequest::soap_dup(soap*) returns deep copy of _ns1__AuthorizationRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AuthorizationRequest::soap_del() deep deletes _ns1__AuthorizationRequest data members, use only after _ns1__AuthorizationRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AuthorizationRequest
{ public:
/// Element "AppId" of XSD type xs:string.
    std::string                          AppId                          1;	///< Required element.
/// Element "TOTP" of XSD type xs:string.
    std::string                          TOTP                           1;	///< Required element.
/// Element "DocumentSignature" of XSD type xs:base64Binary.
    xsd__base64Binary                    DocumentSignature              1;	///< Required element.
/// Element "DocumentHash" of XSD type xs:base64Binary.
    xsd__base64Binary                    DocumentHash                   1;	///< Required element.
/// Element "SignatureCertificate" of XSD type xs:string.
    std::string                          SignatureCertificate           1;	///< Required element.
/// Element "PersonalData" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":PersonalData.
    ns1__PersonalData*                   PersonalData                   1;	///< Required element.
/// Element "AttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AttributeListType.
    ns1__AttributeListType*              AttributeList                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AuthorizationResponse
/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":AuthorizationResponse is a complexType.
///
/// class _ns1__AuthorizationResponse operations:
/// - _ns1__AuthorizationResponse* soap_new__ns1__AuthorizationResponse(soap*) allocate and default initialize
/// - _ns1__AuthorizationResponse* soap_new__ns1__AuthorizationResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__AuthorizationResponse* soap_new_req__ns1__AuthorizationResponse(soap*, ...) allocate, set required members
/// - _ns1__AuthorizationResponse* soap_new_set__ns1__AuthorizationResponse(soap*, ...) allocate, set all public members
/// - _ns1__AuthorizationResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__AuthorizationResponse(soap*, _ns1__AuthorizationResponse*) deserialize from a stream
/// - int soap_write__ns1__AuthorizationResponse(soap*, _ns1__AuthorizationResponse*) serialize to a stream
/// - _ns1__AuthorizationResponse* _ns1__AuthorizationResponse::soap_dup(soap*) returns deep copy of _ns1__AuthorizationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__AuthorizationResponse::soap_del() deep deletes _ns1__AuthorizationResponse data members, use only after _ns1__AuthorizationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__AuthorizationResponse
{ public:
/// Element "Status" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":Status.
    ns1__Status*                         Status                         1;	///< Required element.
/// Element "ProcessId" of XSD type xs:string.
    std::string*                         ProcessId                      0;	///< Optional element.
/// Element "TransactionList" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":TransactionTypeList.
    ns1__TransactionTypeList*            TransactionList                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SignatureRequest
/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SignatureRequest is a complexType.
///
/// class _ns1__SignatureRequest operations:
/// - _ns1__SignatureRequest* soap_new__ns1__SignatureRequest(soap*) allocate and default initialize
/// - _ns1__SignatureRequest* soap_new__ns1__SignatureRequest(soap*, int num) allocate array and default initialize values
/// - _ns1__SignatureRequest* soap_new_req__ns1__SignatureRequest(soap*, ...) allocate, set required members
/// - _ns1__SignatureRequest* soap_new_set__ns1__SignatureRequest(soap*, ...) allocate, set all public members
/// - _ns1__SignatureRequest::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SignatureRequest(soap*, _ns1__SignatureRequest*) deserialize from a stream
/// - int soap_write__ns1__SignatureRequest(soap*, _ns1__SignatureRequest*) serialize to a stream
/// - _ns1__SignatureRequest* _ns1__SignatureRequest::soap_dup(soap*) returns deep copy of _ns1__SignatureRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SignatureRequest::soap_del() deep deletes _ns1__SignatureRequest data members, use only after _ns1__SignatureRequest::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SignatureRequest
{ public:
/// Element "AppId" of XSD type xs:string.
    std::string                          AppId                          1;	///< Required element.
/// Element "ProcessId" of XSD type xs:string.
    std::string                          ProcessId                      1;	///< Required element.
/// Element "TOTP" of XSD type xs:string.
    std::string*                         TOTP                           0;	///< Optional element.
/// Element "Hash" of XSD type xs:base64Binary.
    xsd__base64Binary                    Hash                           1;	///< Required element.
/// Element "Transaction" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":TransactionType.
    ns1__TransactionType*                Transaction                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SignatureResponse
/// @brief "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":SignatureResponse is a complexType.
///
/// class _ns1__SignatureResponse operations:
/// - _ns1__SignatureResponse* soap_new__ns1__SignatureResponse(soap*) allocate and default initialize
/// - _ns1__SignatureResponse* soap_new__ns1__SignatureResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SignatureResponse* soap_new_req__ns1__SignatureResponse(soap*, ...) allocate, set required members
/// - _ns1__SignatureResponse* soap_new_set__ns1__SignatureResponse(soap*, ...) allocate, set all public members
/// - _ns1__SignatureResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SignatureResponse(soap*, _ns1__SignatureResponse*) deserialize from a stream
/// - int soap_write__ns1__SignatureResponse(soap*, _ns1__SignatureResponse*) serialize to a stream
/// - _ns1__SignatureResponse* _ns1__SignatureResponse::soap_dup(soap*) returns deep copy of _ns1__SignatureResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SignatureResponse::soap_del() deep deletes _ns1__SignatureResponse data members, use only after _ns1__SignatureResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SignatureResponse
{ public:
/// Element "Status" of XSD type "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature":Status.
    ns1__Status*                         Status                         1;	///< Required element.
/// Element "ProcessId" of XSD type xs:string.
    std::string*                         ProcessId                      0;	///< Optional element.
/// Element "DocumentSignature" of XSD type xs:base64Binary.
    xsd__base64Binary*                   DocumentSignature              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":X509CertificateType is a complexType with simpleContent.
///
/// class ns5__X509CertificateType operations:
/// - ns5__X509CertificateType* soap_new_ns5__X509CertificateType(soap*) allocate and default initialize
/// - ns5__X509CertificateType* soap_new_ns5__X509CertificateType(soap*, int num) allocate array and default initialize values
/// - ns5__X509CertificateType* soap_new_req_ns5__X509CertificateType(soap*, ...) allocate, set required members
/// - ns5__X509CertificateType* soap_new_set_ns5__X509CertificateType(soap*, ...) allocate, set all public members
/// - ns5__X509CertificateType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__X509CertificateType(soap*, ns5__X509CertificateType*) deserialize from a stream
/// - int soap_write_ns5__X509CertificateType(soap*, ns5__X509CertificateType*) serialize to a stream
/// - ns5__X509CertificateType* ns5__X509CertificateType::soap_dup(soap*) returns deep copy of ns5__X509CertificateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__X509CertificateType::soap_del() deep deletes ns5__X509CertificateType data members, use only after ns5__X509CertificateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__X509CertificateType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":DigestValueType is a complexType with simpleContent.
///
/// class ns5__DigestValueType operations:
/// - ns5__DigestValueType* soap_new_ns5__DigestValueType(soap*) allocate and default initialize
/// - ns5__DigestValueType* soap_new_ns5__DigestValueType(soap*, int num) allocate array and default initialize values
/// - ns5__DigestValueType* soap_new_req_ns5__DigestValueType(soap*, ...) allocate, set required members
/// - ns5__DigestValueType* soap_new_set_ns5__DigestValueType(soap*, ...) allocate, set all public members
/// - ns5__DigestValueType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__DigestValueType(soap*, ns5__DigestValueType*) deserialize from a stream
/// - int soap_write_ns5__DigestValueType(soap*, ns5__DigestValueType*) serialize to a stream
/// - ns5__DigestValueType* ns5__DigestValueType::soap_dup(soap*) returns deep copy of ns5__DigestValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__DigestValueType::soap_del() deep deletes ns5__DigestValueType data members, use only after ns5__DigestValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__DigestValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID*                             Id                             0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2000/09/xmldsig#":SignatureValueType is a complexType with simpleContent.
///
/// class ns5__SignatureValueType operations:
/// - ns5__SignatureValueType* soap_new_ns5__SignatureValueType(soap*) allocate and default initialize
/// - ns5__SignatureValueType* soap_new_ns5__SignatureValueType(soap*, int num) allocate array and default initialize values
/// - ns5__SignatureValueType* soap_new_req_ns5__SignatureValueType(soap*, ...) allocate, set required members
/// - ns5__SignatureValueType* soap_new_set_ns5__SignatureValueType(soap*, ...) allocate, set all public members
/// - ns5__SignatureValueType::soap_default(soap*) default initialize members
/// - int soap_read_ns5__SignatureValueType(soap*, ns5__SignatureValueType*) deserialize from a stream
/// - int soap_write_ns5__SignatureValueType(soap*, ns5__SignatureValueType*) serialize to a stream
/// - ns5__SignatureValueType* ns5__SignatureValueType::soap_dup(soap*) returns deep copy of ns5__SignatureValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__SignatureValueType::soap_del() deep deletes ns5__SignatureValueType data members, use only after ns5__SignatureValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__SignatureValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedX509CertificateType is a complexType with simpleContent.
///
/// class ns6__EncapsulatedX509CertificateType operations:
/// - ns6__EncapsulatedX509CertificateType* soap_new_ns6__EncapsulatedX509CertificateType(soap*) allocate and default initialize
/// - ns6__EncapsulatedX509CertificateType* soap_new_ns6__EncapsulatedX509CertificateType(soap*, int num) allocate array and default initialize values
/// - ns6__EncapsulatedX509CertificateType* soap_new_req_ns6__EncapsulatedX509CertificateType(soap*, ...) allocate, set required members
/// - ns6__EncapsulatedX509CertificateType* soap_new_set_ns6__EncapsulatedX509CertificateType(soap*, ...) allocate, set all public members
/// - ns6__EncapsulatedX509CertificateType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__EncapsulatedX509CertificateType(soap*, ns6__EncapsulatedX509CertificateType*) deserialize from a stream
/// - int soap_write_ns6__EncapsulatedX509CertificateType(soap*, ns6__EncapsulatedX509CertificateType*) serialize to a stream
/// - ns6__EncapsulatedX509CertificateType* ns6__EncapsulatedX509CertificateType::soap_dup(soap*) returns deep copy of ns6__EncapsulatedX509CertificateType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__EncapsulatedX509CertificateType::soap_del() deep deletes ns6__EncapsulatedX509CertificateType data members, use only after ns6__EncapsulatedX509CertificateType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__EncapsulatedX509CertificateType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedCRLValueType is a complexType with simpleContent.
///
/// class ns6__EncapsulatedCRLValueType operations:
/// - ns6__EncapsulatedCRLValueType* soap_new_ns6__EncapsulatedCRLValueType(soap*) allocate and default initialize
/// - ns6__EncapsulatedCRLValueType* soap_new_ns6__EncapsulatedCRLValueType(soap*, int num) allocate array and default initialize values
/// - ns6__EncapsulatedCRLValueType* soap_new_req_ns6__EncapsulatedCRLValueType(soap*, ...) allocate, set required members
/// - ns6__EncapsulatedCRLValueType* soap_new_set_ns6__EncapsulatedCRLValueType(soap*, ...) allocate, set all public members
/// - ns6__EncapsulatedCRLValueType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__EncapsulatedCRLValueType(soap*, ns6__EncapsulatedCRLValueType*) deserialize from a stream
/// - int soap_write_ns6__EncapsulatedCRLValueType(soap*, ns6__EncapsulatedCRLValueType*) serialize to a stream
/// - ns6__EncapsulatedCRLValueType* ns6__EncapsulatedCRLValueType::soap_dup(soap*) returns deep copy of ns6__EncapsulatedCRLValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__EncapsulatedCRLValueType::soap_del() deep deletes ns6__EncapsulatedCRLValueType data members, use only after ns6__EncapsulatedCRLValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__EncapsulatedCRLValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedOCSPValueType is a complexType with simpleContent.
///
/// class ns6__EncapsulatedOCSPValueType operations:
/// - ns6__EncapsulatedOCSPValueType* soap_new_ns6__EncapsulatedOCSPValueType(soap*) allocate and default initialize
/// - ns6__EncapsulatedOCSPValueType* soap_new_ns6__EncapsulatedOCSPValueType(soap*, int num) allocate array and default initialize values
/// - ns6__EncapsulatedOCSPValueType* soap_new_req_ns6__EncapsulatedOCSPValueType(soap*, ...) allocate, set required members
/// - ns6__EncapsulatedOCSPValueType* soap_new_set_ns6__EncapsulatedOCSPValueType(soap*, ...) allocate, set all public members
/// - ns6__EncapsulatedOCSPValueType::soap_default(soap*) default initialize members
/// - int soap_read_ns6__EncapsulatedOCSPValueType(soap*, ns6__EncapsulatedOCSPValueType*) deserialize from a stream
/// - int soap_write_ns6__EncapsulatedOCSPValueType(soap*, ns6__EncapsulatedOCSPValueType*) serialize to a stream
/// - ns6__EncapsulatedOCSPValueType* ns6__EncapsulatedOCSPValueType::soap_dup(soap*) returns deep copy of ns6__EncapsulatedOCSPValueType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns6__EncapsulatedOCSPValueType::soap_del() deep deletes ns6__EncapsulatedOCSPValueType data members, use only after ns6__EncapsulatedOCSPValueType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns6__EncapsulatedOCSPValueType
{ public:
/// __item wraps "xs:base64Binary" simpleContent.
    xsd__base64Binary                    __item                        ;
/// Attribute "Id" of XSD type xs:ID.
   @xsd__ID                              Id                             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeRequest of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeRequestType.
typedef ns2__AttributeRequestType _ns2__AttributeRequest;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":AttributeResponseType.
typedef ns2__AttributeResponseType _ns2__AttributeResponse;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":PSAAttributeRequest of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":PSAAttributeRequestType.
typedef ns2__PSAAttributeRequestType _ns2__PSAAttributeRequest;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService":SingleAttributeResponseType.
typedef ns2__SingleAttributeResponseType _ns2__SingleAttributeResponse;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Signature of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureType.
typedef ns5__SignatureType _ns5__Signature;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":SignedInfo of XSD type "http://www.w3.org/2000/09/xmldsig#":SignedInfoType.
typedef ns5__SignedInfoType _ns5__SignedInfo;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethod of XSD type "http://www.w3.org/2000/09/xmldsig#":CanonicalizationMethodType.
typedef ns5__CanonicalizationMethodType _ns5__CanonicalizationMethod;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":SignatureMethod of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureMethodType.
typedef ns5__SignatureMethodType _ns5__SignatureMethod;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Reference of XSD type "http://www.w3.org/2000/09/xmldsig#":ReferenceType.
typedef ns5__ReferenceType _ns5__Reference;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Transforms of XSD type "http://www.w3.org/2000/09/xmldsig#":TransformsType.
typedef ns5__TransformsType _ns5__Transforms;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Transform of XSD type "http://www.w3.org/2000/09/xmldsig#":TransformType.
typedef ns5__TransformType _ns5__Transform;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":DigestMethod of XSD type "http://www.w3.org/2000/09/xmldsig#":DigestMethodType.
typedef ns5__DigestMethodType _ns5__DigestMethod;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":KeyInfo of XSD type "http://www.w3.org/2000/09/xmldsig#":KeyInfoType.
typedef ns5__KeyInfoType _ns5__KeyInfo;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509Data of XSD type "http://www.w3.org/2000/09/xmldsig#":X509DataType.
typedef ns5__X509DataType _ns5__X509Data;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":Object of XSD type "http://www.w3.org/2000/09/xmldsig#":ObjectType.
typedef ns5__ObjectType _ns5__Object;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509Certificate of XSD type "http://www.w3.org/2000/09/xmldsig#":X509CertificateType.
typedef ns5__X509CertificateType _ns5__X509Certificate;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":DigestValue of XSD type "http://www.w3.org/2000/09/xmldsig#":DigestValueType.
typedef ns5__DigestValueType _ns5__DigestValue;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":SignatureValue of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureValueType.
typedef ns5__SignatureValueType _ns5__SignatureValue;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509IssuerName of XSD type "http://www.w3.org/2000/09/xmldsig#":X509IssuerNameType.
typedef ns5__X509IssuerNameType _ns5__X509IssuerName;

/// @brief Top-level root element "http://www.w3.org/2000/09/xmldsig#":X509SerialNumber of XSD type "http://www.w3.org/2000/09/xmldsig#":X509SerialNumberType.
typedef ns5__X509SerialNumberType _ns5__X509SerialNumber;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/2000/09/xmldsig#                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":Attribute of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeType.
typedef ns3__AttributeType _ns3__Attribute;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SignatureAttribute of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureType.
typedef ns5__SignatureType _ns3__SignatureAttribute;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":QualifyingProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":QualifyingPropertiesType.
typedef ns6__QualifyingPropertiesType _ns6__QualifyingProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignedProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignedPropertiesType.
typedef ns6__SignedPropertiesType _ns6__SignedProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignedSignatureProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignedSignaturePropertiesType.
typedef ns6__SignedSignaturePropertiesType _ns6__SignedSignatureProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SigningCertificate of XSD type "http://uri.etsi.org/01903/v1.3.2#":SigningCertificateType.
typedef ns6__SigningCertificateType _ns6__SigningCertificate;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":Cert of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertType.
typedef ns6__CertType _ns6__Cert;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CertDigest of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertDigestType.
typedef ns6__CertDigestType _ns6__CertDigest;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":IssuerSerial of XSD type "http://uri.etsi.org/01903/v1.3.2#":IssuerSerialType.
typedef ns6__IssuerSerialType _ns6__IssuerSerial;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SigningTime of XSD type "http://uri.etsi.org/01903/v1.3.2#":SigningTimeType.
typedef ns6__SigningTimeType _ns6__SigningTime;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignerRole of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignerRoleType.
typedef ns6__SignerRoleType _ns6__SignerRole;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ClaimedRoles of XSD type "http://uri.etsi.org/01903/v1.3.2#":ClaimedRolesListType.
typedef ns6__ClaimedRolesListType _ns6__ClaimedRoles;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ClaimedRole of XSD type "http://uri.etsi.org/01903/v1.3.2#":ClaimedRoleType.
typedef ns6__ClaimedRoleType _ns6__ClaimedRole;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":UnsignedProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":UnsignedPropertiesType.
typedef ns6__UnsignedPropertiesType _ns6__UnsignedProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":UnsignedSignatureProperties of XSD type "http://uri.etsi.org/01903/v1.3.2#":UnsignedSignaturePropertiesType.
typedef ns6__UnsignedSignaturePropertiesType _ns6__UnsignedSignatureProperties;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CounterSignature of XSD type "http://uri.etsi.org/01903/v1.3.2#":CounterSignatureType.
typedef ns6__CounterSignatureType _ns6__CounterSignature;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":SignatureTimeStampType.
typedef ns6__SignatureTimeStampType _ns6__SignatureTimeStamp;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedTimeStampType.
typedef ns6__EncapsulatedTimeStampType _ns6__EncapsulatedTimeStamp;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CompleteCertificateRefsType.
typedef ns6__CompleteCertificateRefsType _ns6__CompleteCertificateRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CertRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertRefsType.
typedef ns6__CertRefsType _ns6__CertRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CompleteRevocationRefsType.
typedef ns6__CompleteRevocationRefsType _ns6__CompleteRevocationRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLRefsType.
typedef ns6__CRLRefsType _ns6__CRLRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLRef of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLRefType.
typedef ns6__CRLRefType _ns6__CRLRef;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValue of XSD type "http://uri.etsi.org/01903/v1.3.2#":DigestAlgAndValueType.
typedef ns6__DigestAlgAndValueType _ns6__DigestAlgAndValue;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLIdentifier of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLIdentifierType.
typedef ns6__CRLIdentifierType _ns6__CRLIdentifier;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPRefs of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPRefsType.
typedef ns6__OCSPRefsType _ns6__OCSPRefs;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPRef of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPRefType.
typedef ns6__OCSPRefType _ns6__OCSPRef;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifier of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPIdentifierType.
typedef ns6__OCSPIdentifierType _ns6__OCSPIdentifier;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ResponderID of XSD type "http://uri.etsi.org/01903/v1.3.2#":ResponderIDType.
typedef ns6__ResponderIDType _ns6__ResponderID;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":SigAndRefsTimeStampType.
typedef ns6__SigAndRefsTimeStampType _ns6__SigAndRefsTimeStamp;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CertificateValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":CertificateValuesType.
typedef ns6__CertificateValuesType _ns6__CertificateValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedX509Certificate of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedX509CertificateType.
typedef ns6__EncapsulatedX509CertificateType _ns6__EncapsulatedX509Certificate;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":RevocationValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":RevocationValuesType.
typedef ns6__RevocationValuesType _ns6__RevocationValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":CRLValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":CRLValuesType.
typedef ns6__CRLValuesType _ns6__CRLValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedCRLValue of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedCRLValueType.
typedef ns6__EncapsulatedCRLValueType _ns6__EncapsulatedCRLValue;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":OCSPValues of XSD type "http://uri.etsi.org/01903/v1.3.2#":OCSPValuesType.
typedef ns6__OCSPValuesType _ns6__OCSPValues;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedOCSPValue of XSD type "http://uri.etsi.org/01903/v1.3.2#":EncapsulatedOCSPValueType.
typedef ns6__EncapsulatedOCSPValueType _ns6__EncapsulatedOCSPValue;

/// @brief Top-level root element "http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStamp of XSD type "http://uri.etsi.org/01903/v1.3.2#":ArchiveTimeStampType.
typedef ns6__ArchiveTimeStampType _ns6__ArchiveTimeStamp;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://uri.etsi.org/01903/v1.3.2#                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGList of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGListType.
typedef ns7__SVGListType _ns7__SVGList;

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVG of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG":SVGType.
typedef ns7__SVGType _ns7__SVG;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/SVG                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponseType.
typedef ns9__AttributeSupplierResponseType _ns9__AttributeSupplierResponse;


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	AttributeClientServiceBinding 
//gsoap ns1  service type:	AttributeClientService 
//gsoap ns1  service port:	ajp://preprod.scap.autenticacao.gov.pt/DSS/ACService 
//gsoap ns1  service namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns2  service name:	AuthorizationServiceSoapBinding 
//gsoap ns2  service type:	SCAPAuthorizationService 
//gsoap ns2  service port:	https://preprod.scap.autenticacao.gov.pt/SCAPSignature/AuthorizationService 
//gsoap ns2  service namespace:	http://authorization.documentsignature.scap.gov.pt/ 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns3  service name:	SignatureServiceSoapBinding 
//gsoap ns3  service type:	SCAPSignatureService 
//gsoap ns3  service port:	https://preprod.scap.autenticacao.gov.pt/SCAPSignature/SignatureService 
//gsoap ns3  service namespace:	http://signature.documentsignature.scap.gov.pt/ 
//gsoap ns3  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns8  service name:	AttributeSupplierBinding 
//gsoap ns8  service type:	AttributeSupplierService 
//gsoap ns8  service port:	https://preprod.scap.autenticacao.gov.pt/DSS/ASService 
//gsoap ns8  service namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService 
//gsoap ns8  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSDL Definitions

@section WSDL_bindings Service Bindings

  - @ref AttributeClientServiceBinding

  - @ref AuthorizationServiceSoapBinding

  - @ref SignatureServiceSoapBinding

  - @ref AttributeSupplierBinding

@section WSDL_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AttributeClientServiceBinding Binding "AttributeClientServiceBinding"

@section AttributeClientServiceBinding_operations Operations of Binding "AttributeClientServiceBinding"

  - @ref __ns1__Attributes

@section AttributeClientServiceBinding_ports Default endpoints of Binding "AttributeClientServiceBinding"

  - ajp://preprod.scap.autenticacao.gov.pt/DSS/ACService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/**

@page AuthorizationServiceSoapBinding Binding "AuthorizationServiceSoapBinding"

@section AuthorizationServiceSoapBinding_operations Operations of Binding "AuthorizationServiceSoapBinding"

  - @ref __ns2__Authorization

@section AuthorizationServiceSoapBinding_ports Default endpoints of Binding "AuthorizationServiceSoapBinding"

  - https://preprod.scap.autenticacao.gov.pt/SCAPSignature/AuthorizationService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/**

@page SignatureServiceSoapBinding Binding "SignatureServiceSoapBinding"

@section SignatureServiceSoapBinding_operations Operations of Binding "SignatureServiceSoapBinding"

  - @ref __ns3__Signature

@section SignatureServiceSoapBinding_ports Default endpoints of Binding "SignatureServiceSoapBinding"

  - https://preprod.scap.autenticacao.gov.pt/SCAPSignature/SignatureService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/**

@page AttributeSupplierBinding Binding "AttributeSupplierBinding"

@section AttributeSupplierBinding_operations Operations of Binding "AttributeSupplierBinding"

  - @ref __ns8__AttributeSuppliers

@section AttributeSupplierBinding_ports Default endpoints of Binding "AttributeSupplierBinding"

  - https://preprod.scap.autenticacao.gov.pt/DSS/ASService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Custom SOAP Header                                                         *
 *                                                                            *
\******************************************************************************/

#import "wsa.h"
struct SOAP_ENV__Header
{
   _wsa__MessageID    wsa__MessageID 0;
   _wsa__RelatesTo *  wsa__RelatesTo 0;
   _wsa__From *       wsa__From      0;
   _wsa__ReplyTo *    wsa__ReplyTo   0;
   _wsa__FaultTo *    wsa__FaultTo   0;
   _wsa__To           wsa__To        0;
   _wsa__Action       wsa__Action    0;
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AttributeClientServiceBinding                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Attributes                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Attributes" of service binding "AttributeClientServiceBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - ajp://preprod.scap.autenticacao.gov.pt/DSS/ACService

  - Default SOAP action or REST location path:
    - "http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/Attributes"

  - Addressing input action: "http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/Attributes"

  - Addressing output action: "http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/AttributesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Attributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__AttributeRequestType*          ns2__AttributeRequest,
    // output parameters:
    ns2__AttributeResponseType         &ns2__AttributeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Attributes(
    struct soap *soap,
    // input parameters:
    ns2__AttributeRequestType*          ns2__AttributeRequest,
    // output parameters:
    ns2__AttributeResponseType         &ns2__AttributeResponse
  );
@endcode

C++ proxy class (defined in soapAttributeClientServiceBindingProxy.h generated with soapcpp2):
@code
  class AttributeClientServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAttributeClientServiceBindingService.h generated with soapcpp2):
@code
  class AttributeClientServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Attributes SOAP
//gsoap ns1  service method-style:	Attributes document
//gsoap ns1  service method-encoding:	Attributes literal
//gsoap ns1  service method-input-action:	Attributes http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/Attributes
//gsoap ns1  service method-output-action:	Attributes http://www.cartaodecidadao.pt/services/ccc/ACS/Operations/AttributesResponse
int __ns1__Attributes(
    ns2__AttributeRequestType*          ns2__AttributeRequest,	///< Input parameter
    ns2__AttributeResponseType         &ns2__AttributeResponse	///< Output parameter
);

/**

@page AttributeClientServiceBinding Binding "AttributeClientServiceBinding"

@section AttributeClientServiceBinding_policy_enablers Policy Enablers of Binding "AttributeClientServiceBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AuthorizationServiceSoapBinding                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__Authorization                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns2__Authorization" of service binding "AuthorizationServiceSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.scap.autenticacao.gov.pt/SCAPSignature/AuthorizationService

  - Default SOAP action or REST location path:
    - "http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/Authorization"

  - Addressing input action: "http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/Authorization"

  - Addressing output action: "http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/AuthorizationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__Authorization(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AuthorizationRequest*         ns1__AuthorizationRequest,
    // output parameters:
    _ns1__AuthorizationResponse        &ns1__AuthorizationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__Authorization(
    struct soap *soap,
    // input parameters:
    _ns1__AuthorizationRequest*         ns1__AuthorizationRequest,
    // output parameters:
    _ns1__AuthorizationResponse        &ns1__AuthorizationResponse
  );
@endcode

C++ proxy class (defined in soapAuthorizationServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AuthorizationServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAuthorizationServiceSoapBindingService.h generated with soapcpp2):
@code
  class AuthorizationServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	Authorization SOAP
//gsoap ns2  service method-style:	Authorization document
//gsoap ns2  service method-encoding:	Authorization literal
//gsoap ns2  service method-input-action:	Authorization http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/Authorization
//gsoap ns2  service method-output-action:	Authorization http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/AuthorizationResponse
int __ns2__Authorization(
    _ns1__AuthorizationRequest*         ns1__AuthorizationRequest,	///< Input parameter
    _ns1__AuthorizationResponse        &ns1__AuthorizationResponse	///< Output parameter
);

/**

@page AuthorizationServiceSoapBinding Binding "AuthorizationServiceSoapBinding"

@section AuthorizationServiceSoapBinding_policy_enablers Policy Enablers of Binding "AuthorizationServiceSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SignatureServiceSoapBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__Signature                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns3__Signature" of service binding "SignatureServiceSoapBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.scap.autenticacao.gov.pt/SCAPSignature/SignatureService

  - Default SOAP action or REST location path:
    - "http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/Signature"

  - Addressing input action: "http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/Signature"

  - Addressing output action: "http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/SignatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__Signature(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SignatureRequest*             ns1__SignatureRequest,
    // output parameters:
    _ns1__SignatureResponse            &ns1__SignatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__Signature(
    struct soap *soap,
    // input parameters:
    _ns1__SignatureRequest*             ns1__SignatureRequest,
    // output parameters:
    _ns1__SignatureResponse            &ns1__SignatureResponse
  );
@endcode

C++ proxy class (defined in soapSignatureServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class SignatureServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSignatureServiceSoapBindingService.h generated with soapcpp2):
@code
  class SignatureServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	Signature SOAP
//gsoap ns3  service method-style:	Signature document
//gsoap ns3  service method-encoding:	Signature literal
//gsoap ns3  service method-input-action:	Signature http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/Signature
//gsoap ns3  service method-output-action:	Signature http://www.cartaodecidadao.pt/ccc/internalservices/services/SCAPSignature/Operations/SignatureResponse
int __ns3__Signature(
    _ns1__SignatureRequest*             ns1__SignatureRequest,	///< Input parameter
    _ns1__SignatureResponse            &ns1__SignatureResponse	///< Output parameter
);

/**

@page SignatureServiceSoapBinding Binding "SignatureServiceSoapBinding"

@section SignatureServiceSoapBinding_policy_enablers Policy Enablers of Binding "SignatureServiceSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AttributeSupplierBinding                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns8__AttributeSuppliers                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns8__AttributeSuppliers" of service binding "AttributeSupplierBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://preprod.scap.autenticacao.gov.pt/DSS/ASService

  - Default SOAP action or REST location path:
    - "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList"

  - Addressing input action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList"

  - Addressing output action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns8__AttributeSuppliers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    ns9__AttributeSupplierResponseType &ns9__AttributeSupplierResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns8__AttributeSuppliers(
    struct soap *soap,
    // input parameters:
    // output parameters:
    ns9__AttributeSupplierResponseType &ns9__AttributeSupplierResponse
  );
@endcode

C++ proxy class (defined in soapAttributeSupplierBindingProxy.h generated with soapcpp2):
@code
  class AttributeSupplierBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAttributeSupplierBindingService.h generated with soapcpp2):
@code
  class AttributeSupplierBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns8  service method-protocol:	AttributeSuppliers SOAP
//gsoap ns8  service method-style:	AttributeSuppliers document
//gsoap ns8  service method-encoding:	AttributeSuppliers literal
//gsoap ns8  service method-input-action:	AttributeSuppliers http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList
//gsoap ns8  service method-output-action:	AttributeSuppliers http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierListResponse
int __ns8__AttributeSuppliers(
    ns9__AttributeSupplierResponseType &ns9__AttributeSupplierResponse	///< Output parameter
);

/**

@page AttributeSupplierBinding Binding "AttributeSupplierBinding"

@section AttributeSupplierBinding_policy_enablers Policy Enablers of Binding "AttributeSupplierBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeClientService"

@section ns2 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeClientService"

  - <ns2:AttributeRequest> @ref _ns2__AttributeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AttributeRequest(struct soap*, _ns2__AttributeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AttributeRequest(struct soap*, _ns2__AttributeRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__AttributeRequest(struct soap*, const char *URL, _ns2__AttributeRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__AttributeRequest(struct soap*, const char *URL, _ns2__AttributeRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__AttributeRequest(struct soap*, const char *URL, _ns2__AttributeRequest*);
    soap_POST_recv__ns2__AttributeRequest(struct soap*, _ns2__AttributeRequest*);
    @endcode

  - <ns2:AttributeResponse> @ref _ns2__AttributeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AttributeResponse(struct soap*, _ns2__AttributeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AttributeResponse(struct soap*, _ns2__AttributeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__AttributeResponse(struct soap*, const char *URL, _ns2__AttributeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__AttributeResponse(struct soap*, const char *URL, _ns2__AttributeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__AttributeResponse(struct soap*, const char *URL, _ns2__AttributeResponse*);
    soap_POST_recv__ns2__AttributeResponse(struct soap*, _ns2__AttributeResponse*);
    @endcode

  - <ns2:PSAAttributeRequest> @ref _ns2__PSAAttributeRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__PSAAttributeRequest(struct soap*, _ns2__PSAAttributeRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__PSAAttributeRequest(struct soap*, _ns2__PSAAttributeRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__PSAAttributeRequest(struct soap*, const char *URL, _ns2__PSAAttributeRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__PSAAttributeRequest(struct soap*, const char *URL, _ns2__PSAAttributeRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__PSAAttributeRequest(struct soap*, const char *URL, _ns2__PSAAttributeRequest*);
    soap_POST_recv__ns2__PSAAttributeRequest(struct soap*, _ns2__PSAAttributeRequest*);
    @endcode

  - <ns2:SingleAttributeResponse> @ref _ns2__SingleAttributeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__SingleAttributeResponse(struct soap*, _ns2__SingleAttributeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__SingleAttributeResponse(struct soap*, _ns2__SingleAttributeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__SingleAttributeResponse(struct soap*, const char *URL, _ns2__SingleAttributeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__SingleAttributeResponse(struct soap*, const char *URL, _ns2__SingleAttributeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__SingleAttributeResponse(struct soap*, const char *URL, _ns2__SingleAttributeResponse*);
    soap_POST_recv__ns2__SingleAttributeResponse(struct soap*, _ns2__SingleAttributeResponse*);
    @endcode

@section ns5 Top-level root elements of schema "http://www.w3.org/2000/09/xmldsig#"

  - <ns5:Signature> @ref _ns5__Signature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Signature(struct soap*, _ns5__Signature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Signature(struct soap*, _ns5__Signature*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__Signature(struct soap*, const char *URL, _ns5__Signature*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__Signature(struct soap*, const char *URL, _ns5__Signature*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__Signature(struct soap*, const char *URL, _ns5__Signature*);
    soap_POST_recv__ns5__Signature(struct soap*, _ns5__Signature*);
    @endcode

  - <ns5:SignedInfo> @ref _ns5__SignedInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__SignedInfo(struct soap*, _ns5__SignedInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__SignedInfo(struct soap*, _ns5__SignedInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__SignedInfo(struct soap*, const char *URL, _ns5__SignedInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__SignedInfo(struct soap*, const char *URL, _ns5__SignedInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__SignedInfo(struct soap*, const char *URL, _ns5__SignedInfo*);
    soap_POST_recv__ns5__SignedInfo(struct soap*, _ns5__SignedInfo*);
    @endcode

  - <ns5:CanonicalizationMethod> @ref _ns5__CanonicalizationMethod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__CanonicalizationMethod(struct soap*, _ns5__CanonicalizationMethod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__CanonicalizationMethod(struct soap*, _ns5__CanonicalizationMethod*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__CanonicalizationMethod(struct soap*, const char *URL, _ns5__CanonicalizationMethod*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__CanonicalizationMethod(struct soap*, const char *URL, _ns5__CanonicalizationMethod*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__CanonicalizationMethod(struct soap*, const char *URL, _ns5__CanonicalizationMethod*);
    soap_POST_recv__ns5__CanonicalizationMethod(struct soap*, _ns5__CanonicalizationMethod*);
    @endcode

  - <ns5:SignatureMethod> @ref _ns5__SignatureMethod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__SignatureMethod(struct soap*, _ns5__SignatureMethod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__SignatureMethod(struct soap*, _ns5__SignatureMethod*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__SignatureMethod(struct soap*, const char *URL, _ns5__SignatureMethod*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__SignatureMethod(struct soap*, const char *URL, _ns5__SignatureMethod*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__SignatureMethod(struct soap*, const char *URL, _ns5__SignatureMethod*);
    soap_POST_recv__ns5__SignatureMethod(struct soap*, _ns5__SignatureMethod*);
    @endcode

  - <ns5:Reference> @ref _ns5__Reference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Reference(struct soap*, _ns5__Reference*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Reference(struct soap*, _ns5__Reference*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__Reference(struct soap*, const char *URL, _ns5__Reference*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__Reference(struct soap*, const char *URL, _ns5__Reference*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__Reference(struct soap*, const char *URL, _ns5__Reference*);
    soap_POST_recv__ns5__Reference(struct soap*, _ns5__Reference*);
    @endcode

  - <ns5:Transforms> @ref _ns5__Transforms
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Transforms(struct soap*, _ns5__Transforms*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Transforms(struct soap*, _ns5__Transforms*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__Transforms(struct soap*, const char *URL, _ns5__Transforms*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__Transforms(struct soap*, const char *URL, _ns5__Transforms*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__Transforms(struct soap*, const char *URL, _ns5__Transforms*);
    soap_POST_recv__ns5__Transforms(struct soap*, _ns5__Transforms*);
    @endcode

  - <ns5:Transform> @ref _ns5__Transform
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Transform(struct soap*, _ns5__Transform*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Transform(struct soap*, _ns5__Transform*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__Transform(struct soap*, const char *URL, _ns5__Transform*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__Transform(struct soap*, const char *URL, _ns5__Transform*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__Transform(struct soap*, const char *URL, _ns5__Transform*);
    soap_POST_recv__ns5__Transform(struct soap*, _ns5__Transform*);
    @endcode

  - <ns5:DigestMethod> @ref _ns5__DigestMethod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__DigestMethod(struct soap*, _ns5__DigestMethod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__DigestMethod(struct soap*, _ns5__DigestMethod*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__DigestMethod(struct soap*, const char *URL, _ns5__DigestMethod*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__DigestMethod(struct soap*, const char *URL, _ns5__DigestMethod*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__DigestMethod(struct soap*, const char *URL, _ns5__DigestMethod*);
    soap_POST_recv__ns5__DigestMethod(struct soap*, _ns5__DigestMethod*);
    @endcode

  - <ns5:KeyInfo> @ref _ns5__KeyInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__KeyInfo(struct soap*, _ns5__KeyInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__KeyInfo(struct soap*, _ns5__KeyInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__KeyInfo(struct soap*, const char *URL, _ns5__KeyInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__KeyInfo(struct soap*, const char *URL, _ns5__KeyInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__KeyInfo(struct soap*, const char *URL, _ns5__KeyInfo*);
    soap_POST_recv__ns5__KeyInfo(struct soap*, _ns5__KeyInfo*);
    @endcode

  - <ns5:X509Data> @ref _ns5__X509Data
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509Data(struct soap*, _ns5__X509Data*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509Data(struct soap*, _ns5__X509Data*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__X509Data(struct soap*, const char *URL, _ns5__X509Data*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__X509Data(struct soap*, const char *URL, _ns5__X509Data*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__X509Data(struct soap*, const char *URL, _ns5__X509Data*);
    soap_POST_recv__ns5__X509Data(struct soap*, _ns5__X509Data*);
    @endcode

  - <ns5:Object> @ref _ns5__Object
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__Object(struct soap*, _ns5__Object*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__Object(struct soap*, _ns5__Object*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__Object(struct soap*, const char *URL, _ns5__Object*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__Object(struct soap*, const char *URL, _ns5__Object*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__Object(struct soap*, const char *URL, _ns5__Object*);
    soap_POST_recv__ns5__Object(struct soap*, _ns5__Object*);
    @endcode

  - <ns5:X509Certificate> @ref _ns5__X509Certificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509Certificate(struct soap*, _ns5__X509Certificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509Certificate(struct soap*, _ns5__X509Certificate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__X509Certificate(struct soap*, const char *URL, _ns5__X509Certificate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__X509Certificate(struct soap*, const char *URL, _ns5__X509Certificate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__X509Certificate(struct soap*, const char *URL, _ns5__X509Certificate*);
    soap_POST_recv__ns5__X509Certificate(struct soap*, _ns5__X509Certificate*);
    @endcode

  - <ns5:DigestValue> @ref _ns5__DigestValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__DigestValue(struct soap*, _ns5__DigestValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__DigestValue(struct soap*, _ns5__DigestValue*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__DigestValue(struct soap*, const char *URL, _ns5__DigestValue*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__DigestValue(struct soap*, const char *URL, _ns5__DigestValue*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__DigestValue(struct soap*, const char *URL, _ns5__DigestValue*);
    soap_POST_recv__ns5__DigestValue(struct soap*, _ns5__DigestValue*);
    @endcode

  - <ns5:SignatureValue> @ref _ns5__SignatureValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__SignatureValue(struct soap*, _ns5__SignatureValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__SignatureValue(struct soap*, _ns5__SignatureValue*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__SignatureValue(struct soap*, const char *URL, _ns5__SignatureValue*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__SignatureValue(struct soap*, const char *URL, _ns5__SignatureValue*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__SignatureValue(struct soap*, const char *URL, _ns5__SignatureValue*);
    soap_POST_recv__ns5__SignatureValue(struct soap*, _ns5__SignatureValue*);
    @endcode

  - <ns5:X509IssuerName> @ref _ns5__X509IssuerName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509IssuerName(struct soap*, _ns5__X509IssuerName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509IssuerName(struct soap*, _ns5__X509IssuerName*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__X509IssuerName(struct soap*, const char *URL, _ns5__X509IssuerName*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__X509IssuerName(struct soap*, const char *URL, _ns5__X509IssuerName*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__X509IssuerName(struct soap*, const char *URL, _ns5__X509IssuerName*);
    soap_POST_recv__ns5__X509IssuerName(struct soap*, _ns5__X509IssuerName*);
    @endcode

  - <ns5:X509SerialNumber> @ref _ns5__X509SerialNumber
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns5__X509SerialNumber(struct soap*, _ns5__X509SerialNumber*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns5__X509SerialNumber(struct soap*, _ns5__X509SerialNumber*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns5__X509SerialNumber(struct soap*, const char *URL, _ns5__X509SerialNumber*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns5__X509SerialNumber(struct soap*, const char *URL, _ns5__X509SerialNumber*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns5__X509SerialNumber(struct soap*, const char *URL, _ns5__X509SerialNumber*);
    soap_POST_recv__ns5__X509SerialNumber(struct soap*, _ns5__X509SerialNumber*);
    @endcode

@section ns3 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"

  - <ns3:Attribute> @ref _ns3__Attribute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__Attribute(struct soap*, _ns3__Attribute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__Attribute(struct soap*, _ns3__Attribute*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__Attribute(struct soap*, const char *URL, _ns3__Attribute*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__Attribute(struct soap*, const char *URL, _ns3__Attribute*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__Attribute(struct soap*, const char *URL, _ns3__Attribute*);
    soap_POST_recv__ns3__Attribute(struct soap*, _ns3__Attribute*);
    @endcode

  - <ns3:SignatureAttribute> @ref _ns3__SignatureAttribute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__SignatureAttribute(struct soap*, _ns3__SignatureAttribute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__SignatureAttribute(struct soap*, _ns3__SignatureAttribute*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__SignatureAttribute(struct soap*, const char *URL, _ns3__SignatureAttribute*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__SignatureAttribute(struct soap*, const char *URL, _ns3__SignatureAttribute*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__SignatureAttribute(struct soap*, const char *URL, _ns3__SignatureAttribute*);
    soap_POST_recv__ns3__SignatureAttribute(struct soap*, _ns3__SignatureAttribute*);
    @endcode

@section ns4 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/Types"

@section ns6 Top-level root elements of schema "http://uri.etsi.org/01903/v1.3.2#"

  - <ns6:QualifyingProperties> @ref _ns6__QualifyingProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__QualifyingProperties(struct soap*, _ns6__QualifyingProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__QualifyingProperties(struct soap*, _ns6__QualifyingProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__QualifyingProperties(struct soap*, const char *URL, _ns6__QualifyingProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__QualifyingProperties(struct soap*, const char *URL, _ns6__QualifyingProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__QualifyingProperties(struct soap*, const char *URL, _ns6__QualifyingProperties*);
    soap_POST_recv__ns6__QualifyingProperties(struct soap*, _ns6__QualifyingProperties*);
    @endcode

  - <ns6:SignedProperties> @ref _ns6__SignedProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SignedProperties(struct soap*, _ns6__SignedProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SignedProperties(struct soap*, _ns6__SignedProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SignedProperties(struct soap*, const char *URL, _ns6__SignedProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SignedProperties(struct soap*, const char *URL, _ns6__SignedProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SignedProperties(struct soap*, const char *URL, _ns6__SignedProperties*);
    soap_POST_recv__ns6__SignedProperties(struct soap*, _ns6__SignedProperties*);
    @endcode

  - <ns6:SignedSignatureProperties> @ref _ns6__SignedSignatureProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SignedSignatureProperties(struct soap*, _ns6__SignedSignatureProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SignedSignatureProperties(struct soap*, _ns6__SignedSignatureProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SignedSignatureProperties(struct soap*, const char *URL, _ns6__SignedSignatureProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SignedSignatureProperties(struct soap*, const char *URL, _ns6__SignedSignatureProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SignedSignatureProperties(struct soap*, const char *URL, _ns6__SignedSignatureProperties*);
    soap_POST_recv__ns6__SignedSignatureProperties(struct soap*, _ns6__SignedSignatureProperties*);
    @endcode

  - <ns6:SigningCertificate> @ref _ns6__SigningCertificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SigningCertificate(struct soap*, _ns6__SigningCertificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SigningCertificate(struct soap*, _ns6__SigningCertificate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SigningCertificate(struct soap*, const char *URL, _ns6__SigningCertificate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SigningCertificate(struct soap*, const char *URL, _ns6__SigningCertificate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SigningCertificate(struct soap*, const char *URL, _ns6__SigningCertificate*);
    soap_POST_recv__ns6__SigningCertificate(struct soap*, _ns6__SigningCertificate*);
    @endcode

  - <ns6:Cert> @ref _ns6__Cert
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__Cert(struct soap*, _ns6__Cert*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__Cert(struct soap*, _ns6__Cert*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__Cert(struct soap*, const char *URL, _ns6__Cert*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__Cert(struct soap*, const char *URL, _ns6__Cert*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__Cert(struct soap*, const char *URL, _ns6__Cert*);
    soap_POST_recv__ns6__Cert(struct soap*, _ns6__Cert*);
    @endcode

  - <ns6:CertDigest> @ref _ns6__CertDigest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CertDigest(struct soap*, _ns6__CertDigest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CertDigest(struct soap*, _ns6__CertDigest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CertDigest(struct soap*, const char *URL, _ns6__CertDigest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CertDigest(struct soap*, const char *URL, _ns6__CertDigest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CertDigest(struct soap*, const char *URL, _ns6__CertDigest*);
    soap_POST_recv__ns6__CertDigest(struct soap*, _ns6__CertDigest*);
    @endcode

  - <ns6:IssuerSerial> @ref _ns6__IssuerSerial
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__IssuerSerial(struct soap*, _ns6__IssuerSerial*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__IssuerSerial(struct soap*, _ns6__IssuerSerial*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__IssuerSerial(struct soap*, const char *URL, _ns6__IssuerSerial*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__IssuerSerial(struct soap*, const char *URL, _ns6__IssuerSerial*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__IssuerSerial(struct soap*, const char *URL, _ns6__IssuerSerial*);
    soap_POST_recv__ns6__IssuerSerial(struct soap*, _ns6__IssuerSerial*);
    @endcode

  - <ns6:SigningTime> @ref _ns6__SigningTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SigningTime(struct soap*, _ns6__SigningTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SigningTime(struct soap*, _ns6__SigningTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SigningTime(struct soap*, const char *URL, _ns6__SigningTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SigningTime(struct soap*, const char *URL, _ns6__SigningTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SigningTime(struct soap*, const char *URL, _ns6__SigningTime*);
    soap_POST_recv__ns6__SigningTime(struct soap*, _ns6__SigningTime*);
    @endcode

  - <ns6:SignerRole> @ref _ns6__SignerRole
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SignerRole(struct soap*, _ns6__SignerRole*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SignerRole(struct soap*, _ns6__SignerRole*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SignerRole(struct soap*, const char *URL, _ns6__SignerRole*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SignerRole(struct soap*, const char *URL, _ns6__SignerRole*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SignerRole(struct soap*, const char *URL, _ns6__SignerRole*);
    soap_POST_recv__ns6__SignerRole(struct soap*, _ns6__SignerRole*);
    @endcode

  - <ns6:ClaimedRoles> @ref _ns6__ClaimedRoles
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__ClaimedRoles(struct soap*, _ns6__ClaimedRoles*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__ClaimedRoles(struct soap*, _ns6__ClaimedRoles*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__ClaimedRoles(struct soap*, const char *URL, _ns6__ClaimedRoles*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__ClaimedRoles(struct soap*, const char *URL, _ns6__ClaimedRoles*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__ClaimedRoles(struct soap*, const char *URL, _ns6__ClaimedRoles*);
    soap_POST_recv__ns6__ClaimedRoles(struct soap*, _ns6__ClaimedRoles*);
    @endcode

  - <ns6:ClaimedRole> @ref _ns6__ClaimedRole
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__ClaimedRole(struct soap*, _ns6__ClaimedRole*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__ClaimedRole(struct soap*, _ns6__ClaimedRole*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__ClaimedRole(struct soap*, const char *URL, _ns6__ClaimedRole*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__ClaimedRole(struct soap*, const char *URL, _ns6__ClaimedRole*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__ClaimedRole(struct soap*, const char *URL, _ns6__ClaimedRole*);
    soap_POST_recv__ns6__ClaimedRole(struct soap*, _ns6__ClaimedRole*);
    @endcode

  - <ns6:UnsignedProperties> @ref _ns6__UnsignedProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__UnsignedProperties(struct soap*, _ns6__UnsignedProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__UnsignedProperties(struct soap*, _ns6__UnsignedProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__UnsignedProperties(struct soap*, const char *URL, _ns6__UnsignedProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__UnsignedProperties(struct soap*, const char *URL, _ns6__UnsignedProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__UnsignedProperties(struct soap*, const char *URL, _ns6__UnsignedProperties*);
    soap_POST_recv__ns6__UnsignedProperties(struct soap*, _ns6__UnsignedProperties*);
    @endcode

  - <ns6:UnsignedSignatureProperties> @ref _ns6__UnsignedSignatureProperties
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__UnsignedSignatureProperties(struct soap*, _ns6__UnsignedSignatureProperties*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__UnsignedSignatureProperties(struct soap*, _ns6__UnsignedSignatureProperties*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__UnsignedSignatureProperties(struct soap*, const char *URL, _ns6__UnsignedSignatureProperties*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__UnsignedSignatureProperties(struct soap*, const char *URL, _ns6__UnsignedSignatureProperties*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__UnsignedSignatureProperties(struct soap*, const char *URL, _ns6__UnsignedSignatureProperties*);
    soap_POST_recv__ns6__UnsignedSignatureProperties(struct soap*, _ns6__UnsignedSignatureProperties*);
    @endcode

  - <ns6:CounterSignature> @ref _ns6__CounterSignature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CounterSignature(struct soap*, _ns6__CounterSignature*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CounterSignature(struct soap*, _ns6__CounterSignature*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CounterSignature(struct soap*, const char *URL, _ns6__CounterSignature*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CounterSignature(struct soap*, const char *URL, _ns6__CounterSignature*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CounterSignature(struct soap*, const char *URL, _ns6__CounterSignature*);
    soap_POST_recv__ns6__CounterSignature(struct soap*, _ns6__CounterSignature*);
    @endcode

  - <ns6:SignatureTimeStamp> @ref _ns6__SignatureTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SignatureTimeStamp(struct soap*, _ns6__SignatureTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SignatureTimeStamp(struct soap*, _ns6__SignatureTimeStamp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SignatureTimeStamp(struct soap*, const char *URL, _ns6__SignatureTimeStamp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SignatureTimeStamp(struct soap*, const char *URL, _ns6__SignatureTimeStamp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SignatureTimeStamp(struct soap*, const char *URL, _ns6__SignatureTimeStamp*);
    soap_POST_recv__ns6__SignatureTimeStamp(struct soap*, _ns6__SignatureTimeStamp*);
    @endcode

  - <ns6:EncapsulatedTimeStamp> @ref _ns6__EncapsulatedTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__EncapsulatedTimeStamp(struct soap*, _ns6__EncapsulatedTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__EncapsulatedTimeStamp(struct soap*, _ns6__EncapsulatedTimeStamp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__EncapsulatedTimeStamp(struct soap*, const char *URL, _ns6__EncapsulatedTimeStamp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__EncapsulatedTimeStamp(struct soap*, const char *URL, _ns6__EncapsulatedTimeStamp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__EncapsulatedTimeStamp(struct soap*, const char *URL, _ns6__EncapsulatedTimeStamp*);
    soap_POST_recv__ns6__EncapsulatedTimeStamp(struct soap*, _ns6__EncapsulatedTimeStamp*);
    @endcode

  - <ns6:CompleteCertificateRefs> @ref _ns6__CompleteCertificateRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CompleteCertificateRefs(struct soap*, _ns6__CompleteCertificateRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CompleteCertificateRefs(struct soap*, _ns6__CompleteCertificateRefs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CompleteCertificateRefs(struct soap*, const char *URL, _ns6__CompleteCertificateRefs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CompleteCertificateRefs(struct soap*, const char *URL, _ns6__CompleteCertificateRefs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CompleteCertificateRefs(struct soap*, const char *URL, _ns6__CompleteCertificateRefs*);
    soap_POST_recv__ns6__CompleteCertificateRefs(struct soap*, _ns6__CompleteCertificateRefs*);
    @endcode

  - <ns6:CertRefs> @ref _ns6__CertRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CertRefs(struct soap*, _ns6__CertRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CertRefs(struct soap*, _ns6__CertRefs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CertRefs(struct soap*, const char *URL, _ns6__CertRefs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CertRefs(struct soap*, const char *URL, _ns6__CertRefs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CertRefs(struct soap*, const char *URL, _ns6__CertRefs*);
    soap_POST_recv__ns6__CertRefs(struct soap*, _ns6__CertRefs*);
    @endcode

  - <ns6:CompleteRevocationRefs> @ref _ns6__CompleteRevocationRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CompleteRevocationRefs(struct soap*, _ns6__CompleteRevocationRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CompleteRevocationRefs(struct soap*, _ns6__CompleteRevocationRefs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CompleteRevocationRefs(struct soap*, const char *URL, _ns6__CompleteRevocationRefs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CompleteRevocationRefs(struct soap*, const char *URL, _ns6__CompleteRevocationRefs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CompleteRevocationRefs(struct soap*, const char *URL, _ns6__CompleteRevocationRefs*);
    soap_POST_recv__ns6__CompleteRevocationRefs(struct soap*, _ns6__CompleteRevocationRefs*);
    @endcode

  - <ns6:CRLRefs> @ref _ns6__CRLRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CRLRefs(struct soap*, _ns6__CRLRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CRLRefs(struct soap*, _ns6__CRLRefs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CRLRefs(struct soap*, const char *URL, _ns6__CRLRefs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CRLRefs(struct soap*, const char *URL, _ns6__CRLRefs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CRLRefs(struct soap*, const char *URL, _ns6__CRLRefs*);
    soap_POST_recv__ns6__CRLRefs(struct soap*, _ns6__CRLRefs*);
    @endcode

  - <ns6:CRLRef> @ref _ns6__CRLRef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CRLRef(struct soap*, _ns6__CRLRef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CRLRef(struct soap*, _ns6__CRLRef*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CRLRef(struct soap*, const char *URL, _ns6__CRLRef*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CRLRef(struct soap*, const char *URL, _ns6__CRLRef*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CRLRef(struct soap*, const char *URL, _ns6__CRLRef*);
    soap_POST_recv__ns6__CRLRef(struct soap*, _ns6__CRLRef*);
    @endcode

  - <ns6:DigestAlgAndValue> @ref _ns6__DigestAlgAndValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__DigestAlgAndValue(struct soap*, _ns6__DigestAlgAndValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__DigestAlgAndValue(struct soap*, _ns6__DigestAlgAndValue*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__DigestAlgAndValue(struct soap*, const char *URL, _ns6__DigestAlgAndValue*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__DigestAlgAndValue(struct soap*, const char *URL, _ns6__DigestAlgAndValue*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__DigestAlgAndValue(struct soap*, const char *URL, _ns6__DigestAlgAndValue*);
    soap_POST_recv__ns6__DigestAlgAndValue(struct soap*, _ns6__DigestAlgAndValue*);
    @endcode

  - <ns6:CRLIdentifier> @ref _ns6__CRLIdentifier
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CRLIdentifier(struct soap*, _ns6__CRLIdentifier*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CRLIdentifier(struct soap*, _ns6__CRLIdentifier*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CRLIdentifier(struct soap*, const char *URL, _ns6__CRLIdentifier*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CRLIdentifier(struct soap*, const char *URL, _ns6__CRLIdentifier*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CRLIdentifier(struct soap*, const char *URL, _ns6__CRLIdentifier*);
    soap_POST_recv__ns6__CRLIdentifier(struct soap*, _ns6__CRLIdentifier*);
    @endcode

  - <ns6:Issuer> @ref _ns6__Issuer
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__Issuer(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__Issuer(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__Issuer(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__Issuer(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__Issuer(struct soap*, const char *URL, _XML);
    soap_POST_recv__ns6__Issuer(struct soap*, _XML);
    @endcode

  - <ns6:IssueTime> @ref _ns6__IssueTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__IssueTime(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__IssueTime(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__IssueTime(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__IssueTime(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__IssueTime(struct soap*, const char *URL, _XML);
    soap_POST_recv__ns6__IssueTime(struct soap*, _XML);
    @endcode

  - <ns6:Number> @ref _ns6__Number
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__Number(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__Number(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__Number(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__Number(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__Number(struct soap*, const char *URL, _XML);
    soap_POST_recv__ns6__Number(struct soap*, _XML);
    @endcode

  - <ns6:OCSPRefs> @ref _ns6__OCSPRefs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__OCSPRefs(struct soap*, _ns6__OCSPRefs*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__OCSPRefs(struct soap*, _ns6__OCSPRefs*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__OCSPRefs(struct soap*, const char *URL, _ns6__OCSPRefs*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__OCSPRefs(struct soap*, const char *URL, _ns6__OCSPRefs*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__OCSPRefs(struct soap*, const char *URL, _ns6__OCSPRefs*);
    soap_POST_recv__ns6__OCSPRefs(struct soap*, _ns6__OCSPRefs*);
    @endcode

  - <ns6:OCSPRef> @ref _ns6__OCSPRef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__OCSPRef(struct soap*, _ns6__OCSPRef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__OCSPRef(struct soap*, _ns6__OCSPRef*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__OCSPRef(struct soap*, const char *URL, _ns6__OCSPRef*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__OCSPRef(struct soap*, const char *URL, _ns6__OCSPRef*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__OCSPRef(struct soap*, const char *URL, _ns6__OCSPRef*);
    soap_POST_recv__ns6__OCSPRef(struct soap*, _ns6__OCSPRef*);
    @endcode

  - <ns6:OCSPIdentifier> @ref _ns6__OCSPIdentifier
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__OCSPIdentifier(struct soap*, _ns6__OCSPIdentifier*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__OCSPIdentifier(struct soap*, _ns6__OCSPIdentifier*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__OCSPIdentifier(struct soap*, const char *URL, _ns6__OCSPIdentifier*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__OCSPIdentifier(struct soap*, const char *URL, _ns6__OCSPIdentifier*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__OCSPIdentifier(struct soap*, const char *URL, _ns6__OCSPIdentifier*);
    soap_POST_recv__ns6__OCSPIdentifier(struct soap*, _ns6__OCSPIdentifier*);
    @endcode

  - <ns6:ResponderID> @ref _ns6__ResponderID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__ResponderID(struct soap*, _ns6__ResponderID*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__ResponderID(struct soap*, _ns6__ResponderID*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__ResponderID(struct soap*, const char *URL, _ns6__ResponderID*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__ResponderID(struct soap*, const char *URL, _ns6__ResponderID*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__ResponderID(struct soap*, const char *URL, _ns6__ResponderID*);
    soap_POST_recv__ns6__ResponderID(struct soap*, _ns6__ResponderID*);
    @endcode

  - <ns6:ByName> @ref _ns6__ByName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__ByName(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__ByName(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__ByName(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__ByName(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__ByName(struct soap*, const char *URL, _XML);
    soap_POST_recv__ns6__ByName(struct soap*, _XML);
    @endcode

  - <ns6:ProducedAt> @ref _ns6__ProducedAt
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__ProducedAt(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__ProducedAt(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__ProducedAt(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__ProducedAt(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__ProducedAt(struct soap*, const char *URL, _XML);
    soap_POST_recv__ns6__ProducedAt(struct soap*, _XML);
    @endcode

  - <ns6:SigAndRefsTimeStamp> @ref _ns6__SigAndRefsTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__SigAndRefsTimeStamp(struct soap*, _ns6__SigAndRefsTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__SigAndRefsTimeStamp(struct soap*, _ns6__SigAndRefsTimeStamp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__SigAndRefsTimeStamp(struct soap*, const char *URL, _ns6__SigAndRefsTimeStamp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__SigAndRefsTimeStamp(struct soap*, const char *URL, _ns6__SigAndRefsTimeStamp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__SigAndRefsTimeStamp(struct soap*, const char *URL, _ns6__SigAndRefsTimeStamp*);
    soap_POST_recv__ns6__SigAndRefsTimeStamp(struct soap*, _ns6__SigAndRefsTimeStamp*);
    @endcode

  - <ns6:CertificateValues> @ref _ns6__CertificateValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CertificateValues(struct soap*, _ns6__CertificateValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CertificateValues(struct soap*, _ns6__CertificateValues*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CertificateValues(struct soap*, const char *URL, _ns6__CertificateValues*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CertificateValues(struct soap*, const char *URL, _ns6__CertificateValues*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CertificateValues(struct soap*, const char *URL, _ns6__CertificateValues*);
    soap_POST_recv__ns6__CertificateValues(struct soap*, _ns6__CertificateValues*);
    @endcode

  - <ns6:EncapsulatedX509Certificate> @ref _ns6__EncapsulatedX509Certificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__EncapsulatedX509Certificate(struct soap*, _ns6__EncapsulatedX509Certificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__EncapsulatedX509Certificate(struct soap*, _ns6__EncapsulatedX509Certificate*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__EncapsulatedX509Certificate(struct soap*, const char *URL, _ns6__EncapsulatedX509Certificate*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__EncapsulatedX509Certificate(struct soap*, const char *URL, _ns6__EncapsulatedX509Certificate*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__EncapsulatedX509Certificate(struct soap*, const char *URL, _ns6__EncapsulatedX509Certificate*);
    soap_POST_recv__ns6__EncapsulatedX509Certificate(struct soap*, _ns6__EncapsulatedX509Certificate*);
    @endcode

  - <ns6:RevocationValues> @ref _ns6__RevocationValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__RevocationValues(struct soap*, _ns6__RevocationValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__RevocationValues(struct soap*, _ns6__RevocationValues*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__RevocationValues(struct soap*, const char *URL, _ns6__RevocationValues*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__RevocationValues(struct soap*, const char *URL, _ns6__RevocationValues*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__RevocationValues(struct soap*, const char *URL, _ns6__RevocationValues*);
    soap_POST_recv__ns6__RevocationValues(struct soap*, _ns6__RevocationValues*);
    @endcode

  - <ns6:CRLValues> @ref _ns6__CRLValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__CRLValues(struct soap*, _ns6__CRLValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__CRLValues(struct soap*, _ns6__CRLValues*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__CRLValues(struct soap*, const char *URL, _ns6__CRLValues*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__CRLValues(struct soap*, const char *URL, _ns6__CRLValues*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__CRLValues(struct soap*, const char *URL, _ns6__CRLValues*);
    soap_POST_recv__ns6__CRLValues(struct soap*, _ns6__CRLValues*);
    @endcode

  - <ns6:EncapsulatedCRLValue> @ref _ns6__EncapsulatedCRLValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__EncapsulatedCRLValue(struct soap*, _ns6__EncapsulatedCRLValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__EncapsulatedCRLValue(struct soap*, _ns6__EncapsulatedCRLValue*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__EncapsulatedCRLValue(struct soap*, const char *URL, _ns6__EncapsulatedCRLValue*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__EncapsulatedCRLValue(struct soap*, const char *URL, _ns6__EncapsulatedCRLValue*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__EncapsulatedCRLValue(struct soap*, const char *URL, _ns6__EncapsulatedCRLValue*);
    soap_POST_recv__ns6__EncapsulatedCRLValue(struct soap*, _ns6__EncapsulatedCRLValue*);
    @endcode

  - <ns6:OCSPValues> @ref _ns6__OCSPValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__OCSPValues(struct soap*, _ns6__OCSPValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__OCSPValues(struct soap*, _ns6__OCSPValues*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__OCSPValues(struct soap*, const char *URL, _ns6__OCSPValues*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__OCSPValues(struct soap*, const char *URL, _ns6__OCSPValues*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__OCSPValues(struct soap*, const char *URL, _ns6__OCSPValues*);
    soap_POST_recv__ns6__OCSPValues(struct soap*, _ns6__OCSPValues*);
    @endcode

  - <ns6:EncapsulatedOCSPValue> @ref _ns6__EncapsulatedOCSPValue
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__EncapsulatedOCSPValue(struct soap*, _ns6__EncapsulatedOCSPValue*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__EncapsulatedOCSPValue(struct soap*, _ns6__EncapsulatedOCSPValue*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__EncapsulatedOCSPValue(struct soap*, const char *URL, _ns6__EncapsulatedOCSPValue*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__EncapsulatedOCSPValue(struct soap*, const char *URL, _ns6__EncapsulatedOCSPValue*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__EncapsulatedOCSPValue(struct soap*, const char *URL, _ns6__EncapsulatedOCSPValue*);
    soap_POST_recv__ns6__EncapsulatedOCSPValue(struct soap*, _ns6__EncapsulatedOCSPValue*);
    @endcode

  - <ns6:ArchiveTimeStamp> @ref _ns6__ArchiveTimeStamp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns6__ArchiveTimeStamp(struct soap*, _ns6__ArchiveTimeStamp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns6__ArchiveTimeStamp(struct soap*, _ns6__ArchiveTimeStamp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns6__ArchiveTimeStamp(struct soap*, const char *URL, _ns6__ArchiveTimeStamp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns6__ArchiveTimeStamp(struct soap*, const char *URL, _ns6__ArchiveTimeStamp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns6__ArchiveTimeStamp(struct soap*, const char *URL, _ns6__ArchiveTimeStamp*);
    soap_POST_recv__ns6__ArchiveTimeStamp(struct soap*, _ns6__ArchiveTimeStamp*);
    @endcode

@section ns7 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/SVG"

  - <ns7:SVGList> @ref _ns7__SVGList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns7__SVGList(struct soap*, _ns7__SVGList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns7__SVGList(struct soap*, _ns7__SVGList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns7__SVGList(struct soap*, const char *URL, _ns7__SVGList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns7__SVGList(struct soap*, const char *URL, _ns7__SVGList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns7__SVGList(struct soap*, const char *URL, _ns7__SVGList*);
    soap_POST_recv__ns7__SVGList(struct soap*, _ns7__SVGList*);
    @endcode

  - <ns7:SVG> @ref _ns7__SVG
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns7__SVG(struct soap*, _ns7__SVG*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns7__SVG(struct soap*, _ns7__SVG*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns7__SVG(struct soap*, const char *URL, _ns7__SVG*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns7__SVG(struct soap*, const char *URL, _ns7__SVG*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns7__SVG(struct soap*, const char *URL, _ns7__SVG*);
    soap_POST_recv__ns7__SVG(struct soap*, _ns7__SVG*);
    @endcode

@section ns8 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"

@section ns9 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"

  - <ns9:AttributeSupplierResponse> @ref _ns9__AttributeSupplierResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns9__AttributeSupplierResponse(struct soap*, _ns9__AttributeSupplierResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns9__AttributeSupplierResponse(struct soap*, _ns9__AttributeSupplierResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns9__AttributeSupplierResponse(struct soap*, const char *URL, _ns9__AttributeSupplierResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns9__AttributeSupplierResponse(struct soap*, const char *URL, _ns9__AttributeSupplierResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns9__AttributeSupplierResponse(struct soap*, const char *URL, _ns9__AttributeSupplierResponse*);
    soap_POST_recv__ns9__AttributeSupplierResponse(struct soap*, _ns9__AttributeSupplierResponse*);
    @endcode

@section ns1 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/tipos/SCAPSignature"

  - <ns1:AuthorizationRequest> @ref _ns1__AuthorizationRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__AuthorizationRequest(struct soap*, const char *URL, _ns1__AuthorizationRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__AuthorizationRequest(struct soap*, const char *URL, _ns1__AuthorizationRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__AuthorizationRequest(struct soap*, const char *URL, _ns1__AuthorizationRequest*);
    soap_POST_recv__ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest*);
    @endcode

  - <ns1:AuthorizationResponse> @ref _ns1__AuthorizationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AuthorizationResponse(struct soap*, _ns1__AuthorizationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AuthorizationResponse(struct soap*, _ns1__AuthorizationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__AuthorizationResponse(struct soap*, const char *URL, _ns1__AuthorizationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__AuthorizationResponse(struct soap*, const char *URL, _ns1__AuthorizationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__AuthorizationResponse(struct soap*, const char *URL, _ns1__AuthorizationResponse*);
    soap_POST_recv__ns1__AuthorizationResponse(struct soap*, _ns1__AuthorizationResponse*);
    @endcode

  - <ns1:SignatureRequest> @ref _ns1__SignatureRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SignatureRequest(struct soap*, const char *URL, _ns1__SignatureRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SignatureRequest(struct soap*, const char *URL, _ns1__SignatureRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SignatureRequest(struct soap*, const char *URL, _ns1__SignatureRequest*);
    soap_POST_recv__ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest*);
    @endcode

  - <ns1:SignatureResponse> @ref _ns1__SignatureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SignatureResponse(struct soap*, _ns1__SignatureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SignatureResponse(struct soap*, _ns1__SignatureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SignatureResponse(struct soap*, const char *URL, _ns1__SignatureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SignatureResponse(struct soap*, const char *URL, _ns1__SignatureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SignatureResponse(struct soap*, const char *URL, _ns1__SignatureResponse*);
    soap_POST_recv__ns1__SignatureResponse(struct soap*, _ns1__SignatureResponse*);
    @endcode

*/

/* End of SCAP-Services.h */
