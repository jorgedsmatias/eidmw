/* SCAPH.h
   Generated by gSOAP 2.8.49 for SCAP-Services.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef SCAPH_H
#define SCAPH_H
#include "SCAPStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 SCAP_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 SCAP_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 SCAP_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 SCAP_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* _wsa__ReplyAfter is a typedef synonym for unsignedInt */

#ifndef SOAP_TYPE__wsa__ReplyAfter_DEFINED
#define SOAP_TYPE__wsa__ReplyAfter_DEFINED

#define soap_default__wsa__ReplyAfter soap_default_unsignedInt


#define soap__wsa__ReplyAfter2s soap_unsignedInt2s


#define soap_out__wsa__ReplyAfter soap_out_unsignedInt


#define soap_s2_wsa__ReplyAfter soap_s2unsignedInt


#define soap_in__wsa__ReplyAfter soap_in_unsignedInt


#define SCAP_instantiate__wsa__ReplyAfter SCAP_instantiate_unsignedInt


#define soap_new__wsa__ReplyAfter soap_new_unsignedInt


#define soap_put__wsa__ReplyAfter soap_put_unsignedInt


#define soap_write__wsa__ReplyAfter soap_write_unsignedInt


#define soap_PUT__wsa__ReplyAfter soap_PUT_unsignedInt


#define soap_POST_send__wsa__ReplyAfter soap_POST_send_unsignedInt


#define soap_get__wsa__ReplyAfter soap_get_unsignedInt


#define soap_read__wsa__ReplyAfter soap_read_unsignedInt


#define soap_GET__wsa__ReplyAfter soap_GET_unsignedInt


#define soap_POST_recv__wsa__ReplyAfter soap_POST_recv_unsignedInt

#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* _ns6__SigningTime is a typedef synonym for ns6__SigningTimeType */

#ifndef SOAP_TYPE__ns6__SigningTime_DEFINED
#define SOAP_TYPE__ns6__SigningTime_DEFINED

#define soap_default__ns6__SigningTime soap_default_ns6__SigningTimeType


#define soap__ns6__SigningTime2s soap_ns6__SigningTimeType2s


#define soap_out__ns6__SigningTime soap_out_ns6__SigningTimeType


#define soap_s2_ns6__SigningTime soap_s2ns6__SigningTimeType


#define soap_in__ns6__SigningTime soap_in_ns6__SigningTimeType


#define SCAP_instantiate__ns6__SigningTime SCAP_instantiate_ns6__SigningTimeType


#define soap_new__ns6__SigningTime soap_new_ns6__SigningTimeType


#define soap_put__ns6__SigningTime soap_put_ns6__SigningTimeType


#define soap_write__ns6__SigningTime soap_write_ns6__SigningTimeType


#define soap_PUT__ns6__SigningTime soap_PUT_ns6__SigningTimeType


#define soap_POST_send__ns6__SigningTime soap_POST_send_ns6__SigningTimeType


#define soap_get__ns6__SigningTime soap_get_ns6__SigningTimeType


#define soap_read__ns6__SigningTime soap_read_ns6__SigningTimeType


#define soap_GET__ns6__SigningTime soap_GET_ns6__SigningTimeType


#define soap_POST_recv__ns6__SigningTime soap_POST_recv_ns6__SigningTimeType

#endif

#ifndef SOAP_TYPE_ns6__ProducedAtType_DEFINED
#define SOAP_TYPE_ns6__ProducedAtType_DEFINED

inline void soap_default_ns6__ProducedAtType(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns6__ProducedAtType
	*a = SOAP_DEFAULT_ns6__ProducedAtType;
#else
	*a = (time_t)0;
#endif
}

#define soap_ns6__ProducedAtType2s soap_dateTime2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ProducedAtType(struct soap*, const char*, int, const time_t *, const char*);

#define soap_s2ns6__ProducedAtType soap_s2dateTime

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_ns6__ProducedAtType(struct soap*, const char*, time_t *, const char*);

#define SCAP_instantiate_ns6__ProducedAtType SCAP_instantiate_dateTime


#define soap_new_ns6__ProducedAtType soap_new_dateTime

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__ProducedAtType(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_ns6__ProducedAtType(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__ProducedAtType(soap, p, "ns6:ProducedAtType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__ProducedAtType(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns6__ProducedAtType(soap, p, "ns6:ProducedAtType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ProducedAtType(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns6__ProducedAtType(soap, p, "ns6:ProducedAtType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_ns6__ProducedAtType(struct soap*, time_t *, const char*, const char*);

inline int soap_read_ns6__ProducedAtType(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__ProducedAtType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ProducedAtType(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ProducedAtType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ProducedAtType(struct soap *soap, time_t *p)
{
	if (soap_read_ns6__ProducedAtType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__IssueTimeType_DEFINED
#define SOAP_TYPE_ns6__IssueTimeType_DEFINED

inline void soap_default_ns6__IssueTimeType(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns6__IssueTimeType
	*a = SOAP_DEFAULT_ns6__IssueTimeType;
#else
	*a = (time_t)0;
#endif
}

#define soap_ns6__IssueTimeType2s soap_dateTime2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__IssueTimeType(struct soap*, const char*, int, const time_t *, const char*);

#define soap_s2ns6__IssueTimeType soap_s2dateTime

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_ns6__IssueTimeType(struct soap*, const char*, time_t *, const char*);

#define SCAP_instantiate_ns6__IssueTimeType SCAP_instantiate_dateTime


#define soap_new_ns6__IssueTimeType soap_new_dateTime

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__IssueTimeType(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_ns6__IssueTimeType(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__IssueTimeType(soap, p, "ns6:IssueTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__IssueTimeType(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns6__IssueTimeType(soap, p, "ns6:IssueTimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__IssueTimeType(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns6__IssueTimeType(soap, p, "ns6:IssueTimeType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_ns6__IssueTimeType(struct soap*, time_t *, const char*, const char*);

inline int soap_read_ns6__IssueTimeType(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__IssueTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__IssueTimeType(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__IssueTimeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__IssueTimeType(struct soap *soap, time_t *p)
{
	if (soap_read_ns6__IssueTimeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SigningTimeType_DEFINED
#define SOAP_TYPE_ns6__SigningTimeType_DEFINED

inline void soap_default_ns6__SigningTimeType(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns6__SigningTimeType
	*a = SOAP_DEFAULT_ns6__SigningTimeType;
#else
	*a = (time_t)0;
#endif
}

#define soap_ns6__SigningTimeType2s soap_dateTime2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SigningTimeType(struct soap*, const char*, int, const time_t *, const char*);

#define soap_s2ns6__SigningTimeType soap_s2dateTime

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_ns6__SigningTimeType(struct soap*, const char*, time_t *, const char*);

#define SCAP_instantiate_ns6__SigningTimeType SCAP_instantiate_dateTime


#define soap_new_ns6__SigningTimeType soap_new_dateTime

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__SigningTimeType(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_ns6__SigningTimeType(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__SigningTimeType(soap, p, "ns6:SigningTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__SigningTimeType(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns6__SigningTimeType(soap, p, "ns6:SigningTimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SigningTimeType(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns6__SigningTimeType(soap, p, "ns6:SigningTimeType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_ns6__SigningTimeType(struct soap*, time_t *, const char*, const char*);

inline int soap_read_ns6__SigningTimeType(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__SigningTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SigningTimeType(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SigningTimeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SigningTimeType(struct soap *soap, time_t *p)
{
	if (soap_read_ns6__SigningTimeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa__FaultSubcodeValues_DEFINED
#define SOAP_TYPE_wsa__FaultSubcodeValues_DEFINED

inline void soap_default_wsa__FaultSubcodeValues(struct soap *soap, enum wsa__FaultSubcodeValues *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa__FaultSubcodeValues
	*a = SOAP_DEFAULT_wsa__FaultSubcodeValues;
#else
	*a = (enum wsa__FaultSubcodeValues)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__FaultSubcodeValues(struct soap*, const char*, int, const enum wsa__FaultSubcodeValues *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa__FaultSubcodeValues2s(struct soap*, enum wsa__FaultSubcodeValues);
SOAP_FMAC3 enum wsa__FaultSubcodeValues * SOAP_FMAC4 soap_in_wsa__FaultSubcodeValues(struct soap*, const char*, enum wsa__FaultSubcodeValues *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa__FaultSubcodeValues(struct soap*, const char*, enum wsa__FaultSubcodeValues *);

SOAP_FMAC3 enum wsa__FaultSubcodeValues * SOAP_FMAC4 soap_new_wsa__FaultSubcodeValues(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__FaultSubcodeValues(struct soap*, const enum wsa__FaultSubcodeValues *, const char*, const char*);

inline int soap_write_wsa__FaultSubcodeValues(struct soap *soap, enum wsa__FaultSubcodeValues const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsa__FaultSubcodeValues(soap, p, "wsa:FaultSubcodeValues", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa__FaultSubcodeValues(struct soap *soap, const char *URL, enum wsa__FaultSubcodeValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_wsa__FaultSubcodeValues(soap, p, "wsa:FaultSubcodeValues", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__FaultSubcodeValues(struct soap *soap, const char *URL, enum wsa__FaultSubcodeValues const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_wsa__FaultSubcodeValues(soap, p, "wsa:FaultSubcodeValues", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa__FaultSubcodeValues * SOAP_FMAC4 soap_get_wsa__FaultSubcodeValues(struct soap*, enum wsa__FaultSubcodeValues *, const char*, const char*);

inline int soap_read_wsa__FaultSubcodeValues(struct soap *soap, enum wsa__FaultSubcodeValues *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsa__FaultSubcodeValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__FaultSubcodeValues(struct soap *soap, const char *URL, enum wsa__FaultSubcodeValues *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__FaultSubcodeValues(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__FaultSubcodeValues(struct soap *soap, enum wsa__FaultSubcodeValues *p)
{
	if (soap_read_wsa__FaultSubcodeValues(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa__RelationshipTypeValues_DEFINED
#define SOAP_TYPE_wsa__RelationshipTypeValues_DEFINED

inline void soap_default_wsa__RelationshipTypeValues(struct soap *soap, enum wsa__RelationshipTypeValues *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa__RelationshipTypeValues
	*a = SOAP_DEFAULT_wsa__RelationshipTypeValues;
#else
	*a = (enum wsa__RelationshipTypeValues)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__RelationshipTypeValues(struct soap*, const char*, int, const enum wsa__RelationshipTypeValues *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa__RelationshipTypeValues2s(struct soap*, enum wsa__RelationshipTypeValues);
SOAP_FMAC3 enum wsa__RelationshipTypeValues * SOAP_FMAC4 soap_in_wsa__RelationshipTypeValues(struct soap*, const char*, enum wsa__RelationshipTypeValues *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa__RelationshipTypeValues(struct soap*, const char*, enum wsa__RelationshipTypeValues *);

SOAP_FMAC3 enum wsa__RelationshipTypeValues * SOAP_FMAC4 soap_new_wsa__RelationshipTypeValues(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__RelationshipTypeValues(struct soap*, const enum wsa__RelationshipTypeValues *, const char*, const char*);

inline int soap_write_wsa__RelationshipTypeValues(struct soap *soap, enum wsa__RelationshipTypeValues const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsa__RelationshipTypeValues(soap, p, "wsa:RelationshipTypeValues", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa__RelationshipTypeValues(struct soap *soap, const char *URL, enum wsa__RelationshipTypeValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_wsa__RelationshipTypeValues(soap, p, "wsa:RelationshipTypeValues", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__RelationshipTypeValues(struct soap *soap, const char *URL, enum wsa__RelationshipTypeValues const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_wsa__RelationshipTypeValues(soap, p, "wsa:RelationshipTypeValues", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa__RelationshipTypeValues * SOAP_FMAC4 soap_get_wsa__RelationshipTypeValues(struct soap*, enum wsa__RelationshipTypeValues *, const char*, const char*);

inline int soap_read_wsa__RelationshipTypeValues(struct soap *soap, enum wsa__RelationshipTypeValues *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsa__RelationshipTypeValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__RelationshipTypeValues(struct soap *soap, const char *URL, enum wsa__RelationshipTypeValues *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__RelationshipTypeValues(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__RelationshipTypeValues(struct soap *soap, enum wsa__RelationshipTypeValues *p)
{
	if (soap_read_wsa__RelationshipTypeValues(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* _ns9__AttributeSupplierResponse is a typedef synonym for ns9__AttributeSupplierResponseType */

#ifndef SOAP_TYPE__ns9__AttributeSupplierResponse_DEFINED
#define SOAP_TYPE__ns9__AttributeSupplierResponse_DEFINED

#define soap_default__ns9__AttributeSupplierResponse(soap, a) (a)->ns9__AttributeSupplierResponseType::soap_default(soap)


#define soap_serialize__ns9__AttributeSupplierResponse(soap, a) (a)->soap_serialize(soap)


#define soap__ns9__AttributeSupplierResponse2s soap_ns9__AttributeSupplierResponseType2s


#define soap_out__ns9__AttributeSupplierResponse soap_out_ns9__AttributeSupplierResponseType


#define soap_s2_ns9__AttributeSupplierResponse soap_s2ns9__AttributeSupplierResponseType


#define soap_in__ns9__AttributeSupplierResponse soap_in_ns9__AttributeSupplierResponseType


#define SCAP_instantiate__ns9__AttributeSupplierResponse SCAP_instantiate_ns9__AttributeSupplierResponseType


#define soap_new__ns9__AttributeSupplierResponse soap_new_ns9__AttributeSupplierResponseType


#define soap_new_req__ns9__AttributeSupplierResponse soap_new_req_ns9__AttributeSupplierResponseType


#define soap_new_set__ns9__AttributeSupplierResponse soap_new_set_ns9__AttributeSupplierResponseType


#define soap_put__ns9__AttributeSupplierResponse soap_put_ns9__AttributeSupplierResponseType


#define soap_write__ns9__AttributeSupplierResponse soap_write_ns9__AttributeSupplierResponseType


#define soap_PUT__ns9__AttributeSupplierResponse soap_PUT_ns9__AttributeSupplierResponseType


#define soap_POST_send__ns9__AttributeSupplierResponse soap_POST_send_ns9__AttributeSupplierResponseType


#define soap_get__ns9__AttributeSupplierResponse soap_get_ns9__AttributeSupplierResponseType


#define soap_read__ns9__AttributeSupplierResponse soap_read_ns9__AttributeSupplierResponseType


#define soap_GET__ns9__AttributeSupplierResponse soap_GET_ns9__AttributeSupplierResponseType


#define soap_POST_recv__ns9__AttributeSupplierResponse soap_POST_recv_ns9__AttributeSupplierResponseType

#endif
/* _ns7__SVG is a typedef synonym for ns7__SVGType */

#ifndef SOAP_TYPE__ns7__SVG_DEFINED
#define SOAP_TYPE__ns7__SVG_DEFINED

#define soap_default__ns7__SVG(soap, a) (a)->ns7__SVGType::soap_default(soap)


#define soap_serialize__ns7__SVG(soap, a) (a)->soap_serialize(soap)

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns7__SVG(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns7__SVG2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in__ns7__SVG(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns7__SVG(struct soap*, const char*, xsd__base64Binary *);

#define SCAP_instantiate__ns7__SVG SCAP_instantiate_ns7__SVGType


#define soap_new__ns7__SVG soap_new_ns7__SVGType


#define soap_new_req__ns7__SVG soap_new_req_ns7__SVGType


#define soap_new_set__ns7__SVG soap_new_set_ns7__SVGType


#define soap_put__ns7__SVG soap_put_ns7__SVGType


#define soap_write__ns7__SVG soap_write_ns7__SVGType


#define soap_PUT__ns7__SVG soap_PUT_ns7__SVGType


#define soap_POST_send__ns7__SVG soap_POST_send_ns7__SVGType


#define soap_get__ns7__SVG soap_get_ns7__SVGType


#define soap_read__ns7__SVG soap_read_ns7__SVGType


#define soap_GET__ns7__SVG soap_GET_ns7__SVGType


#define soap_POST_recv__ns7__SVG soap_POST_recv_ns7__SVGType

#endif
/* _ns7__SVGList is a typedef synonym for ns7__SVGListType */

#ifndef SOAP_TYPE__ns7__SVGList_DEFINED
#define SOAP_TYPE__ns7__SVGList_DEFINED

#define soap_default__ns7__SVGList(soap, a) (a)->ns7__SVGListType::soap_default(soap)


#define soap_serialize__ns7__SVGList(soap, a) (a)->soap_serialize(soap)


#define soap__ns7__SVGList2s soap_ns7__SVGListType2s


#define soap_out__ns7__SVGList soap_out_ns7__SVGListType


#define soap_s2_ns7__SVGList soap_s2ns7__SVGListType


#define soap_in__ns7__SVGList soap_in_ns7__SVGListType


#define SCAP_instantiate__ns7__SVGList SCAP_instantiate_ns7__SVGListType


#define soap_new__ns7__SVGList soap_new_ns7__SVGListType


#define soap_new_req__ns7__SVGList soap_new_req_ns7__SVGListType


#define soap_new_set__ns7__SVGList soap_new_set_ns7__SVGListType


#define soap_put__ns7__SVGList soap_put_ns7__SVGListType


#define soap_write__ns7__SVGList soap_write_ns7__SVGListType


#define soap_PUT__ns7__SVGList soap_PUT_ns7__SVGListType


#define soap_POST_send__ns7__SVGList soap_POST_send_ns7__SVGListType


#define soap_get__ns7__SVGList soap_get_ns7__SVGListType


#define soap_read__ns7__SVGList soap_read_ns7__SVGListType


#define soap_GET__ns7__SVGList soap_GET_ns7__SVGListType


#define soap_POST_recv__ns7__SVGList soap_POST_recv_ns7__SVGListType

#endif
/* _ns6__ArchiveTimeStamp is a typedef synonym for ns6__ArchiveTimeStampType */

#ifndef SOAP_TYPE__ns6__ArchiveTimeStamp_DEFINED
#define SOAP_TYPE__ns6__ArchiveTimeStamp_DEFINED

#define soap_default__ns6__ArchiveTimeStamp(soap, a) (a)->ns6__ArchiveTimeStampType::soap_default(soap)


#define soap_serialize__ns6__ArchiveTimeStamp(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__ArchiveTimeStamp2s soap_ns6__ArchiveTimeStampType2s


#define soap_out__ns6__ArchiveTimeStamp soap_out_ns6__ArchiveTimeStampType


#define soap_s2_ns6__ArchiveTimeStamp soap_s2ns6__ArchiveTimeStampType


#define soap_in__ns6__ArchiveTimeStamp soap_in_ns6__ArchiveTimeStampType


#define SCAP_instantiate__ns6__ArchiveTimeStamp SCAP_instantiate_ns6__ArchiveTimeStampType


#define soap_new__ns6__ArchiveTimeStamp soap_new_ns6__ArchiveTimeStampType


#define soap_new_req__ns6__ArchiveTimeStamp soap_new_req_ns6__ArchiveTimeStampType


#define soap_new_set__ns6__ArchiveTimeStamp soap_new_set_ns6__ArchiveTimeStampType


#define soap_put__ns6__ArchiveTimeStamp soap_put_ns6__ArchiveTimeStampType


#define soap_write__ns6__ArchiveTimeStamp soap_write_ns6__ArchiveTimeStampType


#define soap_PUT__ns6__ArchiveTimeStamp soap_PUT_ns6__ArchiveTimeStampType


#define soap_POST_send__ns6__ArchiveTimeStamp soap_POST_send_ns6__ArchiveTimeStampType


#define soap_get__ns6__ArchiveTimeStamp soap_get_ns6__ArchiveTimeStampType


#define soap_read__ns6__ArchiveTimeStamp soap_read_ns6__ArchiveTimeStampType


#define soap_GET__ns6__ArchiveTimeStamp soap_GET_ns6__ArchiveTimeStampType


#define soap_POST_recv__ns6__ArchiveTimeStamp soap_POST_recv_ns6__ArchiveTimeStampType

#endif
/* _ns6__EncapsulatedOCSPValue is a typedef synonym for ns6__EncapsulatedOCSPValueType */

#ifndef SOAP_TYPE__ns6__EncapsulatedOCSPValue_DEFINED
#define SOAP_TYPE__ns6__EncapsulatedOCSPValue_DEFINED

#define soap_default__ns6__EncapsulatedOCSPValue(soap, a) (a)->ns6__EncapsulatedOCSPValueType::soap_default(soap)


#define soap_serialize__ns6__EncapsulatedOCSPValue(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__EncapsulatedOCSPValue2s soap_ns6__EncapsulatedOCSPValueType2s


#define soap_out__ns6__EncapsulatedOCSPValue soap_out_ns6__EncapsulatedOCSPValueType


#define soap_s2_ns6__EncapsulatedOCSPValue soap_s2ns6__EncapsulatedOCSPValueType


#define soap_in__ns6__EncapsulatedOCSPValue soap_in_ns6__EncapsulatedOCSPValueType


#define SCAP_instantiate__ns6__EncapsulatedOCSPValue SCAP_instantiate_ns6__EncapsulatedOCSPValueType


#define soap_new__ns6__EncapsulatedOCSPValue soap_new_ns6__EncapsulatedOCSPValueType


#define soap_new_req__ns6__EncapsulatedOCSPValue soap_new_req_ns6__EncapsulatedOCSPValueType


#define soap_new_set__ns6__EncapsulatedOCSPValue soap_new_set_ns6__EncapsulatedOCSPValueType


#define soap_put__ns6__EncapsulatedOCSPValue soap_put_ns6__EncapsulatedOCSPValueType


#define soap_write__ns6__EncapsulatedOCSPValue soap_write_ns6__EncapsulatedOCSPValueType


#define soap_PUT__ns6__EncapsulatedOCSPValue soap_PUT_ns6__EncapsulatedOCSPValueType


#define soap_POST_send__ns6__EncapsulatedOCSPValue soap_POST_send_ns6__EncapsulatedOCSPValueType


#define soap_get__ns6__EncapsulatedOCSPValue soap_get_ns6__EncapsulatedOCSPValueType


#define soap_read__ns6__EncapsulatedOCSPValue soap_read_ns6__EncapsulatedOCSPValueType


#define soap_GET__ns6__EncapsulatedOCSPValue soap_GET_ns6__EncapsulatedOCSPValueType


#define soap_POST_recv__ns6__EncapsulatedOCSPValue soap_POST_recv_ns6__EncapsulatedOCSPValueType

#endif
/* _ns6__OCSPValues is a typedef synonym for ns6__OCSPValuesType */

#ifndef SOAP_TYPE__ns6__OCSPValues_DEFINED
#define SOAP_TYPE__ns6__OCSPValues_DEFINED

#define soap_default__ns6__OCSPValues(soap, a) (a)->ns6__OCSPValuesType::soap_default(soap)


#define soap_serialize__ns6__OCSPValues(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__OCSPValues2s soap_ns6__OCSPValuesType2s


#define soap_out__ns6__OCSPValues soap_out_ns6__OCSPValuesType


#define soap_s2_ns6__OCSPValues soap_s2ns6__OCSPValuesType


#define soap_in__ns6__OCSPValues soap_in_ns6__OCSPValuesType


#define SCAP_instantiate__ns6__OCSPValues SCAP_instantiate_ns6__OCSPValuesType


#define soap_new__ns6__OCSPValues soap_new_ns6__OCSPValuesType


#define soap_new_req__ns6__OCSPValues soap_new_req_ns6__OCSPValuesType


#define soap_new_set__ns6__OCSPValues soap_new_set_ns6__OCSPValuesType


#define soap_put__ns6__OCSPValues soap_put_ns6__OCSPValuesType


#define soap_write__ns6__OCSPValues soap_write_ns6__OCSPValuesType


#define soap_PUT__ns6__OCSPValues soap_PUT_ns6__OCSPValuesType


#define soap_POST_send__ns6__OCSPValues soap_POST_send_ns6__OCSPValuesType


#define soap_get__ns6__OCSPValues soap_get_ns6__OCSPValuesType


#define soap_read__ns6__OCSPValues soap_read_ns6__OCSPValuesType


#define soap_GET__ns6__OCSPValues soap_GET_ns6__OCSPValuesType


#define soap_POST_recv__ns6__OCSPValues soap_POST_recv_ns6__OCSPValuesType

#endif
/* _ns6__EncapsulatedCRLValue is a typedef synonym for ns6__EncapsulatedCRLValueType */

#ifndef SOAP_TYPE__ns6__EncapsulatedCRLValue_DEFINED
#define SOAP_TYPE__ns6__EncapsulatedCRLValue_DEFINED

#define soap_default__ns6__EncapsulatedCRLValue(soap, a) (a)->ns6__EncapsulatedCRLValueType::soap_default(soap)


#define soap_serialize__ns6__EncapsulatedCRLValue(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__EncapsulatedCRLValue2s soap_ns6__EncapsulatedCRLValueType2s


#define soap_out__ns6__EncapsulatedCRLValue soap_out_ns6__EncapsulatedCRLValueType


#define soap_s2_ns6__EncapsulatedCRLValue soap_s2ns6__EncapsulatedCRLValueType


#define soap_in__ns6__EncapsulatedCRLValue soap_in_ns6__EncapsulatedCRLValueType


#define SCAP_instantiate__ns6__EncapsulatedCRLValue SCAP_instantiate_ns6__EncapsulatedCRLValueType


#define soap_new__ns6__EncapsulatedCRLValue soap_new_ns6__EncapsulatedCRLValueType


#define soap_new_req__ns6__EncapsulatedCRLValue soap_new_req_ns6__EncapsulatedCRLValueType


#define soap_new_set__ns6__EncapsulatedCRLValue soap_new_set_ns6__EncapsulatedCRLValueType


#define soap_put__ns6__EncapsulatedCRLValue soap_put_ns6__EncapsulatedCRLValueType


#define soap_write__ns6__EncapsulatedCRLValue soap_write_ns6__EncapsulatedCRLValueType


#define soap_PUT__ns6__EncapsulatedCRLValue soap_PUT_ns6__EncapsulatedCRLValueType


#define soap_POST_send__ns6__EncapsulatedCRLValue soap_POST_send_ns6__EncapsulatedCRLValueType


#define soap_get__ns6__EncapsulatedCRLValue soap_get_ns6__EncapsulatedCRLValueType


#define soap_read__ns6__EncapsulatedCRLValue soap_read_ns6__EncapsulatedCRLValueType


#define soap_GET__ns6__EncapsulatedCRLValue soap_GET_ns6__EncapsulatedCRLValueType


#define soap_POST_recv__ns6__EncapsulatedCRLValue soap_POST_recv_ns6__EncapsulatedCRLValueType

#endif
/* _ns6__CRLValues is a typedef synonym for ns6__CRLValuesType */

#ifndef SOAP_TYPE__ns6__CRLValues_DEFINED
#define SOAP_TYPE__ns6__CRLValues_DEFINED

#define soap_default__ns6__CRLValues(soap, a) (a)->ns6__CRLValuesType::soap_default(soap)


#define soap_serialize__ns6__CRLValues(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CRLValues2s soap_ns6__CRLValuesType2s


#define soap_out__ns6__CRLValues soap_out_ns6__CRLValuesType


#define soap_s2_ns6__CRLValues soap_s2ns6__CRLValuesType


#define soap_in__ns6__CRLValues soap_in_ns6__CRLValuesType


#define SCAP_instantiate__ns6__CRLValues SCAP_instantiate_ns6__CRLValuesType


#define soap_new__ns6__CRLValues soap_new_ns6__CRLValuesType


#define soap_new_req__ns6__CRLValues soap_new_req_ns6__CRLValuesType


#define soap_new_set__ns6__CRLValues soap_new_set_ns6__CRLValuesType


#define soap_put__ns6__CRLValues soap_put_ns6__CRLValuesType


#define soap_write__ns6__CRLValues soap_write_ns6__CRLValuesType


#define soap_PUT__ns6__CRLValues soap_PUT_ns6__CRLValuesType


#define soap_POST_send__ns6__CRLValues soap_POST_send_ns6__CRLValuesType


#define soap_get__ns6__CRLValues soap_get_ns6__CRLValuesType


#define soap_read__ns6__CRLValues soap_read_ns6__CRLValuesType


#define soap_GET__ns6__CRLValues soap_GET_ns6__CRLValuesType


#define soap_POST_recv__ns6__CRLValues soap_POST_recv_ns6__CRLValuesType

#endif
/* _ns6__RevocationValues is a typedef synonym for ns6__RevocationValuesType */

#ifndef SOAP_TYPE__ns6__RevocationValues_DEFINED
#define SOAP_TYPE__ns6__RevocationValues_DEFINED

#define soap_default__ns6__RevocationValues(soap, a) (a)->ns6__RevocationValuesType::soap_default(soap)


#define soap_serialize__ns6__RevocationValues(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__RevocationValues2s soap_ns6__RevocationValuesType2s


#define soap_out__ns6__RevocationValues soap_out_ns6__RevocationValuesType


#define soap_s2_ns6__RevocationValues soap_s2ns6__RevocationValuesType


#define soap_in__ns6__RevocationValues soap_in_ns6__RevocationValuesType


#define SCAP_instantiate__ns6__RevocationValues SCAP_instantiate_ns6__RevocationValuesType


#define soap_new__ns6__RevocationValues soap_new_ns6__RevocationValuesType


#define soap_new_req__ns6__RevocationValues soap_new_req_ns6__RevocationValuesType


#define soap_new_set__ns6__RevocationValues soap_new_set_ns6__RevocationValuesType


#define soap_put__ns6__RevocationValues soap_put_ns6__RevocationValuesType


#define soap_write__ns6__RevocationValues soap_write_ns6__RevocationValuesType


#define soap_PUT__ns6__RevocationValues soap_PUT_ns6__RevocationValuesType


#define soap_POST_send__ns6__RevocationValues soap_POST_send_ns6__RevocationValuesType


#define soap_get__ns6__RevocationValues soap_get_ns6__RevocationValuesType


#define soap_read__ns6__RevocationValues soap_read_ns6__RevocationValuesType


#define soap_GET__ns6__RevocationValues soap_GET_ns6__RevocationValuesType


#define soap_POST_recv__ns6__RevocationValues soap_POST_recv_ns6__RevocationValuesType

#endif
/* _ns6__EncapsulatedX509Certificate is a typedef synonym for ns6__EncapsulatedX509CertificateType */

#ifndef SOAP_TYPE__ns6__EncapsulatedX509Certificate_DEFINED
#define SOAP_TYPE__ns6__EncapsulatedX509Certificate_DEFINED

#define soap_default__ns6__EncapsulatedX509Certificate(soap, a) (a)->ns6__EncapsulatedX509CertificateType::soap_default(soap)


#define soap_serialize__ns6__EncapsulatedX509Certificate(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__EncapsulatedX509Certificate2s soap_ns6__EncapsulatedX509CertificateType2s


#define soap_out__ns6__EncapsulatedX509Certificate soap_out_ns6__EncapsulatedX509CertificateType


#define soap_s2_ns6__EncapsulatedX509Certificate soap_s2ns6__EncapsulatedX509CertificateType


#define soap_in__ns6__EncapsulatedX509Certificate soap_in_ns6__EncapsulatedX509CertificateType


#define SCAP_instantiate__ns6__EncapsulatedX509Certificate SCAP_instantiate_ns6__EncapsulatedX509CertificateType


#define soap_new__ns6__EncapsulatedX509Certificate soap_new_ns6__EncapsulatedX509CertificateType


#define soap_new_req__ns6__EncapsulatedX509Certificate soap_new_req_ns6__EncapsulatedX509CertificateType


#define soap_new_set__ns6__EncapsulatedX509Certificate soap_new_set_ns6__EncapsulatedX509CertificateType


#define soap_put__ns6__EncapsulatedX509Certificate soap_put_ns6__EncapsulatedX509CertificateType


#define soap_write__ns6__EncapsulatedX509Certificate soap_write_ns6__EncapsulatedX509CertificateType


#define soap_PUT__ns6__EncapsulatedX509Certificate soap_PUT_ns6__EncapsulatedX509CertificateType


#define soap_POST_send__ns6__EncapsulatedX509Certificate soap_POST_send_ns6__EncapsulatedX509CertificateType


#define soap_get__ns6__EncapsulatedX509Certificate soap_get_ns6__EncapsulatedX509CertificateType


#define soap_read__ns6__EncapsulatedX509Certificate soap_read_ns6__EncapsulatedX509CertificateType


#define soap_GET__ns6__EncapsulatedX509Certificate soap_GET_ns6__EncapsulatedX509CertificateType


#define soap_POST_recv__ns6__EncapsulatedX509Certificate soap_POST_recv_ns6__EncapsulatedX509CertificateType

#endif
/* _ns6__CertificateValues is a typedef synonym for ns6__CertificateValuesType */

#ifndef SOAP_TYPE__ns6__CertificateValues_DEFINED
#define SOAP_TYPE__ns6__CertificateValues_DEFINED

#define soap_default__ns6__CertificateValues(soap, a) (a)->ns6__CertificateValuesType::soap_default(soap)


#define soap_serialize__ns6__CertificateValues(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CertificateValues2s soap_ns6__CertificateValuesType2s


#define soap_out__ns6__CertificateValues soap_out_ns6__CertificateValuesType


#define soap_s2_ns6__CertificateValues soap_s2ns6__CertificateValuesType


#define soap_in__ns6__CertificateValues soap_in_ns6__CertificateValuesType


#define SCAP_instantiate__ns6__CertificateValues SCAP_instantiate_ns6__CertificateValuesType


#define soap_new__ns6__CertificateValues soap_new_ns6__CertificateValuesType


#define soap_new_req__ns6__CertificateValues soap_new_req_ns6__CertificateValuesType


#define soap_new_set__ns6__CertificateValues soap_new_set_ns6__CertificateValuesType


#define soap_put__ns6__CertificateValues soap_put_ns6__CertificateValuesType


#define soap_write__ns6__CertificateValues soap_write_ns6__CertificateValuesType


#define soap_PUT__ns6__CertificateValues soap_PUT_ns6__CertificateValuesType


#define soap_POST_send__ns6__CertificateValues soap_POST_send_ns6__CertificateValuesType


#define soap_get__ns6__CertificateValues soap_get_ns6__CertificateValuesType


#define soap_read__ns6__CertificateValues soap_read_ns6__CertificateValuesType


#define soap_GET__ns6__CertificateValues soap_GET_ns6__CertificateValuesType


#define soap_POST_recv__ns6__CertificateValues soap_POST_recv_ns6__CertificateValuesType

#endif
/* _ns6__SigAndRefsTimeStamp is a typedef synonym for ns6__SigAndRefsTimeStampType */

#ifndef SOAP_TYPE__ns6__SigAndRefsTimeStamp_DEFINED
#define SOAP_TYPE__ns6__SigAndRefsTimeStamp_DEFINED

#define soap_default__ns6__SigAndRefsTimeStamp(soap, a) (a)->ns6__SigAndRefsTimeStampType::soap_default(soap)


#define soap_serialize__ns6__SigAndRefsTimeStamp(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__SigAndRefsTimeStamp2s soap_ns6__SigAndRefsTimeStampType2s


#define soap_out__ns6__SigAndRefsTimeStamp soap_out_ns6__SigAndRefsTimeStampType


#define soap_s2_ns6__SigAndRefsTimeStamp soap_s2ns6__SigAndRefsTimeStampType


#define soap_in__ns6__SigAndRefsTimeStamp soap_in_ns6__SigAndRefsTimeStampType


#define SCAP_instantiate__ns6__SigAndRefsTimeStamp SCAP_instantiate_ns6__SigAndRefsTimeStampType


#define soap_new__ns6__SigAndRefsTimeStamp soap_new_ns6__SigAndRefsTimeStampType


#define soap_new_req__ns6__SigAndRefsTimeStamp soap_new_req_ns6__SigAndRefsTimeStampType


#define soap_new_set__ns6__SigAndRefsTimeStamp soap_new_set_ns6__SigAndRefsTimeStampType


#define soap_put__ns6__SigAndRefsTimeStamp soap_put_ns6__SigAndRefsTimeStampType


#define soap_write__ns6__SigAndRefsTimeStamp soap_write_ns6__SigAndRefsTimeStampType


#define soap_PUT__ns6__SigAndRefsTimeStamp soap_PUT_ns6__SigAndRefsTimeStampType


#define soap_POST_send__ns6__SigAndRefsTimeStamp soap_POST_send_ns6__SigAndRefsTimeStampType


#define soap_get__ns6__SigAndRefsTimeStamp soap_get_ns6__SigAndRefsTimeStampType


#define soap_read__ns6__SigAndRefsTimeStamp soap_read_ns6__SigAndRefsTimeStampType


#define soap_GET__ns6__SigAndRefsTimeStamp soap_GET_ns6__SigAndRefsTimeStampType


#define soap_POST_recv__ns6__SigAndRefsTimeStamp soap_POST_recv_ns6__SigAndRefsTimeStampType

#endif
/* _ns6__ResponderID is a typedef synonym for ns6__ResponderIDType */

#ifndef SOAP_TYPE__ns6__ResponderID_DEFINED
#define SOAP_TYPE__ns6__ResponderID_DEFINED

#define soap_default__ns6__ResponderID(soap, a) (a)->ns6__ResponderIDType::soap_default(soap)


#define soap_serialize__ns6__ResponderID(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__ResponderID2s soap_ns6__ResponderIDType2s


#define soap_out__ns6__ResponderID soap_out_ns6__ResponderIDType


#define soap_s2_ns6__ResponderID soap_s2ns6__ResponderIDType


#define soap_in__ns6__ResponderID soap_in_ns6__ResponderIDType


#define SCAP_instantiate__ns6__ResponderID SCAP_instantiate_ns6__ResponderIDType


#define soap_new__ns6__ResponderID soap_new_ns6__ResponderIDType


#define soap_new_req__ns6__ResponderID soap_new_req_ns6__ResponderIDType


#define soap_new_set__ns6__ResponderID soap_new_set_ns6__ResponderIDType


#define soap_put__ns6__ResponderID soap_put_ns6__ResponderIDType


#define soap_write__ns6__ResponderID soap_write_ns6__ResponderIDType


#define soap_PUT__ns6__ResponderID soap_PUT_ns6__ResponderIDType


#define soap_POST_send__ns6__ResponderID soap_POST_send_ns6__ResponderIDType


#define soap_get__ns6__ResponderID soap_get_ns6__ResponderIDType


#define soap_read__ns6__ResponderID soap_read_ns6__ResponderIDType


#define soap_GET__ns6__ResponderID soap_GET_ns6__ResponderIDType


#define soap_POST_recv__ns6__ResponderID soap_POST_recv_ns6__ResponderIDType

#endif
/* _ns6__OCSPIdentifier is a typedef synonym for ns6__OCSPIdentifierType */

#ifndef SOAP_TYPE__ns6__OCSPIdentifier_DEFINED
#define SOAP_TYPE__ns6__OCSPIdentifier_DEFINED

#define soap_default__ns6__OCSPIdentifier(soap, a) (a)->ns6__OCSPIdentifierType::soap_default(soap)


#define soap_serialize__ns6__OCSPIdentifier(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__OCSPIdentifier2s soap_ns6__OCSPIdentifierType2s


#define soap_out__ns6__OCSPIdentifier soap_out_ns6__OCSPIdentifierType


#define soap_s2_ns6__OCSPIdentifier soap_s2ns6__OCSPIdentifierType


#define soap_in__ns6__OCSPIdentifier soap_in_ns6__OCSPIdentifierType


#define SCAP_instantiate__ns6__OCSPIdentifier SCAP_instantiate_ns6__OCSPIdentifierType


#define soap_new__ns6__OCSPIdentifier soap_new_ns6__OCSPIdentifierType


#define soap_new_req__ns6__OCSPIdentifier soap_new_req_ns6__OCSPIdentifierType


#define soap_new_set__ns6__OCSPIdentifier soap_new_set_ns6__OCSPIdentifierType


#define soap_put__ns6__OCSPIdentifier soap_put_ns6__OCSPIdentifierType


#define soap_write__ns6__OCSPIdentifier soap_write_ns6__OCSPIdentifierType


#define soap_PUT__ns6__OCSPIdentifier soap_PUT_ns6__OCSPIdentifierType


#define soap_POST_send__ns6__OCSPIdentifier soap_POST_send_ns6__OCSPIdentifierType


#define soap_get__ns6__OCSPIdentifier soap_get_ns6__OCSPIdentifierType


#define soap_read__ns6__OCSPIdentifier soap_read_ns6__OCSPIdentifierType


#define soap_GET__ns6__OCSPIdentifier soap_GET_ns6__OCSPIdentifierType


#define soap_POST_recv__ns6__OCSPIdentifier soap_POST_recv_ns6__OCSPIdentifierType

#endif
/* _ns6__OCSPRef is a typedef synonym for ns6__OCSPRefType */

#ifndef SOAP_TYPE__ns6__OCSPRef_DEFINED
#define SOAP_TYPE__ns6__OCSPRef_DEFINED

#define soap_default__ns6__OCSPRef(soap, a) (a)->ns6__OCSPRefType::soap_default(soap)


#define soap_serialize__ns6__OCSPRef(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__OCSPRef2s soap_ns6__OCSPRefType2s


#define soap_out__ns6__OCSPRef soap_out_ns6__OCSPRefType


#define soap_s2_ns6__OCSPRef soap_s2ns6__OCSPRefType


#define soap_in__ns6__OCSPRef soap_in_ns6__OCSPRefType


#define SCAP_instantiate__ns6__OCSPRef SCAP_instantiate_ns6__OCSPRefType


#define soap_new__ns6__OCSPRef soap_new_ns6__OCSPRefType


#define soap_new_req__ns6__OCSPRef soap_new_req_ns6__OCSPRefType


#define soap_new_set__ns6__OCSPRef soap_new_set_ns6__OCSPRefType


#define soap_put__ns6__OCSPRef soap_put_ns6__OCSPRefType


#define soap_write__ns6__OCSPRef soap_write_ns6__OCSPRefType


#define soap_PUT__ns6__OCSPRef soap_PUT_ns6__OCSPRefType


#define soap_POST_send__ns6__OCSPRef soap_POST_send_ns6__OCSPRefType


#define soap_get__ns6__OCSPRef soap_get_ns6__OCSPRefType


#define soap_read__ns6__OCSPRef soap_read_ns6__OCSPRefType


#define soap_GET__ns6__OCSPRef soap_GET_ns6__OCSPRefType


#define soap_POST_recv__ns6__OCSPRef soap_POST_recv_ns6__OCSPRefType

#endif
/* _ns6__OCSPRefs is a typedef synonym for ns6__OCSPRefsType */

#ifndef SOAP_TYPE__ns6__OCSPRefs_DEFINED
#define SOAP_TYPE__ns6__OCSPRefs_DEFINED

#define soap_default__ns6__OCSPRefs(soap, a) (a)->ns6__OCSPRefsType::soap_default(soap)


#define soap_serialize__ns6__OCSPRefs(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__OCSPRefs2s soap_ns6__OCSPRefsType2s


#define soap_out__ns6__OCSPRefs soap_out_ns6__OCSPRefsType


#define soap_s2_ns6__OCSPRefs soap_s2ns6__OCSPRefsType


#define soap_in__ns6__OCSPRefs soap_in_ns6__OCSPRefsType


#define SCAP_instantiate__ns6__OCSPRefs SCAP_instantiate_ns6__OCSPRefsType


#define soap_new__ns6__OCSPRefs soap_new_ns6__OCSPRefsType


#define soap_new_req__ns6__OCSPRefs soap_new_req_ns6__OCSPRefsType


#define soap_new_set__ns6__OCSPRefs soap_new_set_ns6__OCSPRefsType


#define soap_put__ns6__OCSPRefs soap_put_ns6__OCSPRefsType


#define soap_write__ns6__OCSPRefs soap_write_ns6__OCSPRefsType


#define soap_PUT__ns6__OCSPRefs soap_PUT_ns6__OCSPRefsType


#define soap_POST_send__ns6__OCSPRefs soap_POST_send_ns6__OCSPRefsType


#define soap_get__ns6__OCSPRefs soap_get_ns6__OCSPRefsType


#define soap_read__ns6__OCSPRefs soap_read_ns6__OCSPRefsType


#define soap_GET__ns6__OCSPRefs soap_GET_ns6__OCSPRefsType


#define soap_POST_recv__ns6__OCSPRefs soap_POST_recv_ns6__OCSPRefsType

#endif
/* _ns6__CRLIdentifier is a typedef synonym for ns6__CRLIdentifierType */

#ifndef SOAP_TYPE__ns6__CRLIdentifier_DEFINED
#define SOAP_TYPE__ns6__CRLIdentifier_DEFINED

#define soap_default__ns6__CRLIdentifier(soap, a) (a)->ns6__CRLIdentifierType::soap_default(soap)


#define soap_serialize__ns6__CRLIdentifier(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CRLIdentifier2s soap_ns6__CRLIdentifierType2s


#define soap_out__ns6__CRLIdentifier soap_out_ns6__CRLIdentifierType


#define soap_s2_ns6__CRLIdentifier soap_s2ns6__CRLIdentifierType


#define soap_in__ns6__CRLIdentifier soap_in_ns6__CRLIdentifierType


#define SCAP_instantiate__ns6__CRLIdentifier SCAP_instantiate_ns6__CRLIdentifierType


#define soap_new__ns6__CRLIdentifier soap_new_ns6__CRLIdentifierType


#define soap_new_req__ns6__CRLIdentifier soap_new_req_ns6__CRLIdentifierType


#define soap_new_set__ns6__CRLIdentifier soap_new_set_ns6__CRLIdentifierType


#define soap_put__ns6__CRLIdentifier soap_put_ns6__CRLIdentifierType


#define soap_write__ns6__CRLIdentifier soap_write_ns6__CRLIdentifierType


#define soap_PUT__ns6__CRLIdentifier soap_PUT_ns6__CRLIdentifierType


#define soap_POST_send__ns6__CRLIdentifier soap_POST_send_ns6__CRLIdentifierType


#define soap_get__ns6__CRLIdentifier soap_get_ns6__CRLIdentifierType


#define soap_read__ns6__CRLIdentifier soap_read_ns6__CRLIdentifierType


#define soap_GET__ns6__CRLIdentifier soap_GET_ns6__CRLIdentifierType


#define soap_POST_recv__ns6__CRLIdentifier soap_POST_recv_ns6__CRLIdentifierType

#endif
/* _ns6__DigestAlgAndValue is a typedef synonym for ns6__DigestAlgAndValueType */

#ifndef SOAP_TYPE__ns6__DigestAlgAndValue_DEFINED
#define SOAP_TYPE__ns6__DigestAlgAndValue_DEFINED

#define soap_default__ns6__DigestAlgAndValue(soap, a) (a)->ns6__DigestAlgAndValueType::soap_default(soap)


#define soap_serialize__ns6__DigestAlgAndValue(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__DigestAlgAndValue2s soap_ns6__DigestAlgAndValueType2s


#define soap_out__ns6__DigestAlgAndValue soap_out_ns6__DigestAlgAndValueType


#define soap_s2_ns6__DigestAlgAndValue soap_s2ns6__DigestAlgAndValueType


#define soap_in__ns6__DigestAlgAndValue soap_in_ns6__DigestAlgAndValueType


#define SCAP_instantiate__ns6__DigestAlgAndValue SCAP_instantiate_ns6__DigestAlgAndValueType


#define soap_new__ns6__DigestAlgAndValue soap_new_ns6__DigestAlgAndValueType


#define soap_new_req__ns6__DigestAlgAndValue soap_new_req_ns6__DigestAlgAndValueType


#define soap_new_set__ns6__DigestAlgAndValue soap_new_set_ns6__DigestAlgAndValueType


#define soap_put__ns6__DigestAlgAndValue soap_put_ns6__DigestAlgAndValueType


#define soap_write__ns6__DigestAlgAndValue soap_write_ns6__DigestAlgAndValueType


#define soap_PUT__ns6__DigestAlgAndValue soap_PUT_ns6__DigestAlgAndValueType


#define soap_POST_send__ns6__DigestAlgAndValue soap_POST_send_ns6__DigestAlgAndValueType


#define soap_get__ns6__DigestAlgAndValue soap_get_ns6__DigestAlgAndValueType


#define soap_read__ns6__DigestAlgAndValue soap_read_ns6__DigestAlgAndValueType


#define soap_GET__ns6__DigestAlgAndValue soap_GET_ns6__DigestAlgAndValueType


#define soap_POST_recv__ns6__DigestAlgAndValue soap_POST_recv_ns6__DigestAlgAndValueType

#endif
/* _ns6__CRLRef is a typedef synonym for ns6__CRLRefType */

#ifndef SOAP_TYPE__ns6__CRLRef_DEFINED
#define SOAP_TYPE__ns6__CRLRef_DEFINED

#define soap_default__ns6__CRLRef(soap, a) (a)->ns6__CRLRefType::soap_default(soap)


#define soap_serialize__ns6__CRLRef(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CRLRef2s soap_ns6__CRLRefType2s


#define soap_out__ns6__CRLRef soap_out_ns6__CRLRefType


#define soap_s2_ns6__CRLRef soap_s2ns6__CRLRefType


#define soap_in__ns6__CRLRef soap_in_ns6__CRLRefType


#define SCAP_instantiate__ns6__CRLRef SCAP_instantiate_ns6__CRLRefType


#define soap_new__ns6__CRLRef soap_new_ns6__CRLRefType


#define soap_new_req__ns6__CRLRef soap_new_req_ns6__CRLRefType


#define soap_new_set__ns6__CRLRef soap_new_set_ns6__CRLRefType


#define soap_put__ns6__CRLRef soap_put_ns6__CRLRefType


#define soap_write__ns6__CRLRef soap_write_ns6__CRLRefType


#define soap_PUT__ns6__CRLRef soap_PUT_ns6__CRLRefType


#define soap_POST_send__ns6__CRLRef soap_POST_send_ns6__CRLRefType


#define soap_get__ns6__CRLRef soap_get_ns6__CRLRefType


#define soap_read__ns6__CRLRef soap_read_ns6__CRLRefType


#define soap_GET__ns6__CRLRef soap_GET_ns6__CRLRefType


#define soap_POST_recv__ns6__CRLRef soap_POST_recv_ns6__CRLRefType

#endif
/* _ns6__CRLRefs is a typedef synonym for ns6__CRLRefsType */

#ifndef SOAP_TYPE__ns6__CRLRefs_DEFINED
#define SOAP_TYPE__ns6__CRLRefs_DEFINED

#define soap_default__ns6__CRLRefs(soap, a) (a)->ns6__CRLRefsType::soap_default(soap)


#define soap_serialize__ns6__CRLRefs(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CRLRefs2s soap_ns6__CRLRefsType2s


#define soap_out__ns6__CRLRefs soap_out_ns6__CRLRefsType


#define soap_s2_ns6__CRLRefs soap_s2ns6__CRLRefsType


#define soap_in__ns6__CRLRefs soap_in_ns6__CRLRefsType


#define SCAP_instantiate__ns6__CRLRefs SCAP_instantiate_ns6__CRLRefsType


#define soap_new__ns6__CRLRefs soap_new_ns6__CRLRefsType


#define soap_new_req__ns6__CRLRefs soap_new_req_ns6__CRLRefsType


#define soap_new_set__ns6__CRLRefs soap_new_set_ns6__CRLRefsType


#define soap_put__ns6__CRLRefs soap_put_ns6__CRLRefsType


#define soap_write__ns6__CRLRefs soap_write_ns6__CRLRefsType


#define soap_PUT__ns6__CRLRefs soap_PUT_ns6__CRLRefsType


#define soap_POST_send__ns6__CRLRefs soap_POST_send_ns6__CRLRefsType


#define soap_get__ns6__CRLRefs soap_get_ns6__CRLRefsType


#define soap_read__ns6__CRLRefs soap_read_ns6__CRLRefsType


#define soap_GET__ns6__CRLRefs soap_GET_ns6__CRLRefsType


#define soap_POST_recv__ns6__CRLRefs soap_POST_recv_ns6__CRLRefsType

#endif
/* _ns6__CompleteRevocationRefs is a typedef synonym for ns6__CompleteRevocationRefsType */

#ifndef SOAP_TYPE__ns6__CompleteRevocationRefs_DEFINED
#define SOAP_TYPE__ns6__CompleteRevocationRefs_DEFINED

#define soap_default__ns6__CompleteRevocationRefs(soap, a) (a)->ns6__CompleteRevocationRefsType::soap_default(soap)


#define soap_serialize__ns6__CompleteRevocationRefs(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CompleteRevocationRefs2s soap_ns6__CompleteRevocationRefsType2s


#define soap_out__ns6__CompleteRevocationRefs soap_out_ns6__CompleteRevocationRefsType


#define soap_s2_ns6__CompleteRevocationRefs soap_s2ns6__CompleteRevocationRefsType


#define soap_in__ns6__CompleteRevocationRefs soap_in_ns6__CompleteRevocationRefsType


#define SCAP_instantiate__ns6__CompleteRevocationRefs SCAP_instantiate_ns6__CompleteRevocationRefsType


#define soap_new__ns6__CompleteRevocationRefs soap_new_ns6__CompleteRevocationRefsType


#define soap_new_req__ns6__CompleteRevocationRefs soap_new_req_ns6__CompleteRevocationRefsType


#define soap_new_set__ns6__CompleteRevocationRefs soap_new_set_ns6__CompleteRevocationRefsType


#define soap_put__ns6__CompleteRevocationRefs soap_put_ns6__CompleteRevocationRefsType


#define soap_write__ns6__CompleteRevocationRefs soap_write_ns6__CompleteRevocationRefsType


#define soap_PUT__ns6__CompleteRevocationRefs soap_PUT_ns6__CompleteRevocationRefsType


#define soap_POST_send__ns6__CompleteRevocationRefs soap_POST_send_ns6__CompleteRevocationRefsType


#define soap_get__ns6__CompleteRevocationRefs soap_get_ns6__CompleteRevocationRefsType


#define soap_read__ns6__CompleteRevocationRefs soap_read_ns6__CompleteRevocationRefsType


#define soap_GET__ns6__CompleteRevocationRefs soap_GET_ns6__CompleteRevocationRefsType


#define soap_POST_recv__ns6__CompleteRevocationRefs soap_POST_recv_ns6__CompleteRevocationRefsType

#endif
/* _ns6__CertRefs is a typedef synonym for ns6__CertRefsType */

#ifndef SOAP_TYPE__ns6__CertRefs_DEFINED
#define SOAP_TYPE__ns6__CertRefs_DEFINED

#define soap_default__ns6__CertRefs(soap, a) (a)->ns6__CertRefsType::soap_default(soap)


#define soap_serialize__ns6__CertRefs(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CertRefs2s soap_ns6__CertRefsType2s


#define soap_out__ns6__CertRefs soap_out_ns6__CertRefsType


#define soap_s2_ns6__CertRefs soap_s2ns6__CertRefsType


#define soap_in__ns6__CertRefs soap_in_ns6__CertRefsType


#define SCAP_instantiate__ns6__CertRefs SCAP_instantiate_ns6__CertRefsType


#define soap_new__ns6__CertRefs soap_new_ns6__CertRefsType


#define soap_new_req__ns6__CertRefs soap_new_req_ns6__CertRefsType


#define soap_new_set__ns6__CertRefs soap_new_set_ns6__CertRefsType


#define soap_put__ns6__CertRefs soap_put_ns6__CertRefsType


#define soap_write__ns6__CertRefs soap_write_ns6__CertRefsType


#define soap_PUT__ns6__CertRefs soap_PUT_ns6__CertRefsType


#define soap_POST_send__ns6__CertRefs soap_POST_send_ns6__CertRefsType


#define soap_get__ns6__CertRefs soap_get_ns6__CertRefsType


#define soap_read__ns6__CertRefs soap_read_ns6__CertRefsType


#define soap_GET__ns6__CertRefs soap_GET_ns6__CertRefsType


#define soap_POST_recv__ns6__CertRefs soap_POST_recv_ns6__CertRefsType

#endif
/* _ns6__CompleteCertificateRefs is a typedef synonym for ns6__CompleteCertificateRefsType */

#ifndef SOAP_TYPE__ns6__CompleteCertificateRefs_DEFINED
#define SOAP_TYPE__ns6__CompleteCertificateRefs_DEFINED

#define soap_default__ns6__CompleteCertificateRefs(soap, a) (a)->ns6__CompleteCertificateRefsType::soap_default(soap)


#define soap_serialize__ns6__CompleteCertificateRefs(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CompleteCertificateRefs2s soap_ns6__CompleteCertificateRefsType2s


#define soap_out__ns6__CompleteCertificateRefs soap_out_ns6__CompleteCertificateRefsType


#define soap_s2_ns6__CompleteCertificateRefs soap_s2ns6__CompleteCertificateRefsType


#define soap_in__ns6__CompleteCertificateRefs soap_in_ns6__CompleteCertificateRefsType


#define SCAP_instantiate__ns6__CompleteCertificateRefs SCAP_instantiate_ns6__CompleteCertificateRefsType


#define soap_new__ns6__CompleteCertificateRefs soap_new_ns6__CompleteCertificateRefsType


#define soap_new_req__ns6__CompleteCertificateRefs soap_new_req_ns6__CompleteCertificateRefsType


#define soap_new_set__ns6__CompleteCertificateRefs soap_new_set_ns6__CompleteCertificateRefsType


#define soap_put__ns6__CompleteCertificateRefs soap_put_ns6__CompleteCertificateRefsType


#define soap_write__ns6__CompleteCertificateRefs soap_write_ns6__CompleteCertificateRefsType


#define soap_PUT__ns6__CompleteCertificateRefs soap_PUT_ns6__CompleteCertificateRefsType


#define soap_POST_send__ns6__CompleteCertificateRefs soap_POST_send_ns6__CompleteCertificateRefsType


#define soap_get__ns6__CompleteCertificateRefs soap_get_ns6__CompleteCertificateRefsType


#define soap_read__ns6__CompleteCertificateRefs soap_read_ns6__CompleteCertificateRefsType


#define soap_GET__ns6__CompleteCertificateRefs soap_GET_ns6__CompleteCertificateRefsType


#define soap_POST_recv__ns6__CompleteCertificateRefs soap_POST_recv_ns6__CompleteCertificateRefsType

#endif
/* _ns6__EncapsulatedTimeStamp is a typedef synonym for ns6__EncapsulatedTimeStampType */

#ifndef SOAP_TYPE__ns6__EncapsulatedTimeStamp_DEFINED
#define SOAP_TYPE__ns6__EncapsulatedTimeStamp_DEFINED

#define soap_default__ns6__EncapsulatedTimeStamp(soap, a) (a)->ns6__EncapsulatedTimeStampType::soap_default(soap)


#define soap_serialize__ns6__EncapsulatedTimeStamp(soap, a) (a)->soap_serialize(soap)

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns6__EncapsulatedTimeStamp(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns6__EncapsulatedTimeStamp2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in__ns6__EncapsulatedTimeStamp(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns6__EncapsulatedTimeStamp(struct soap*, const char*, xsd__base64Binary *);

#define SCAP_instantiate__ns6__EncapsulatedTimeStamp SCAP_instantiate_ns6__EncapsulatedTimeStampType


#define soap_new__ns6__EncapsulatedTimeStamp soap_new_ns6__EncapsulatedTimeStampType


#define soap_new_req__ns6__EncapsulatedTimeStamp soap_new_req_ns6__EncapsulatedTimeStampType


#define soap_new_set__ns6__EncapsulatedTimeStamp soap_new_set_ns6__EncapsulatedTimeStampType


#define soap_put__ns6__EncapsulatedTimeStamp soap_put_ns6__EncapsulatedTimeStampType


#define soap_write__ns6__EncapsulatedTimeStamp soap_write_ns6__EncapsulatedTimeStampType


#define soap_PUT__ns6__EncapsulatedTimeStamp soap_PUT_ns6__EncapsulatedTimeStampType


#define soap_POST_send__ns6__EncapsulatedTimeStamp soap_POST_send_ns6__EncapsulatedTimeStampType


#define soap_get__ns6__EncapsulatedTimeStamp soap_get_ns6__EncapsulatedTimeStampType


#define soap_read__ns6__EncapsulatedTimeStamp soap_read_ns6__EncapsulatedTimeStampType


#define soap_GET__ns6__EncapsulatedTimeStamp soap_GET_ns6__EncapsulatedTimeStampType


#define soap_POST_recv__ns6__EncapsulatedTimeStamp soap_POST_recv_ns6__EncapsulatedTimeStampType

#endif
/* _ns6__SignatureTimeStamp is a typedef synonym for ns6__SignatureTimeStampType */

#ifndef SOAP_TYPE__ns6__SignatureTimeStamp_DEFINED
#define SOAP_TYPE__ns6__SignatureTimeStamp_DEFINED

#define soap_default__ns6__SignatureTimeStamp(soap, a) (a)->ns6__SignatureTimeStampType::soap_default(soap)


#define soap_serialize__ns6__SignatureTimeStamp(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__SignatureTimeStamp2s soap_ns6__SignatureTimeStampType2s


#define soap_out__ns6__SignatureTimeStamp soap_out_ns6__SignatureTimeStampType


#define soap_s2_ns6__SignatureTimeStamp soap_s2ns6__SignatureTimeStampType


#define soap_in__ns6__SignatureTimeStamp soap_in_ns6__SignatureTimeStampType


#define SCAP_instantiate__ns6__SignatureTimeStamp SCAP_instantiate_ns6__SignatureTimeStampType


#define soap_new__ns6__SignatureTimeStamp soap_new_ns6__SignatureTimeStampType


#define soap_new_req__ns6__SignatureTimeStamp soap_new_req_ns6__SignatureTimeStampType


#define soap_new_set__ns6__SignatureTimeStamp soap_new_set_ns6__SignatureTimeStampType


#define soap_put__ns6__SignatureTimeStamp soap_put_ns6__SignatureTimeStampType


#define soap_write__ns6__SignatureTimeStamp soap_write_ns6__SignatureTimeStampType


#define soap_PUT__ns6__SignatureTimeStamp soap_PUT_ns6__SignatureTimeStampType


#define soap_POST_send__ns6__SignatureTimeStamp soap_POST_send_ns6__SignatureTimeStampType


#define soap_get__ns6__SignatureTimeStamp soap_get_ns6__SignatureTimeStampType


#define soap_read__ns6__SignatureTimeStamp soap_read_ns6__SignatureTimeStampType


#define soap_GET__ns6__SignatureTimeStamp soap_GET_ns6__SignatureTimeStampType


#define soap_POST_recv__ns6__SignatureTimeStamp soap_POST_recv_ns6__SignatureTimeStampType

#endif
/* _ns6__CounterSignature is a typedef synonym for ns6__CounterSignatureType */

#ifndef SOAP_TYPE__ns6__CounterSignature_DEFINED
#define SOAP_TYPE__ns6__CounterSignature_DEFINED

#define soap_default__ns6__CounterSignature(soap, a) (a)->ns6__CounterSignatureType::soap_default(soap)


#define soap_serialize__ns6__CounterSignature(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CounterSignature2s soap_ns6__CounterSignatureType2s


#define soap_out__ns6__CounterSignature soap_out_ns6__CounterSignatureType


#define soap_s2_ns6__CounterSignature soap_s2ns6__CounterSignatureType


#define soap_in__ns6__CounterSignature soap_in_ns6__CounterSignatureType


#define SCAP_instantiate__ns6__CounterSignature SCAP_instantiate_ns6__CounterSignatureType


#define soap_new__ns6__CounterSignature soap_new_ns6__CounterSignatureType


#define soap_new_req__ns6__CounterSignature soap_new_req_ns6__CounterSignatureType


#define soap_new_set__ns6__CounterSignature soap_new_set_ns6__CounterSignatureType


#define soap_put__ns6__CounterSignature soap_put_ns6__CounterSignatureType


#define soap_write__ns6__CounterSignature soap_write_ns6__CounterSignatureType


#define soap_PUT__ns6__CounterSignature soap_PUT_ns6__CounterSignatureType


#define soap_POST_send__ns6__CounterSignature soap_POST_send_ns6__CounterSignatureType


#define soap_get__ns6__CounterSignature soap_get_ns6__CounterSignatureType


#define soap_read__ns6__CounterSignature soap_read_ns6__CounterSignatureType


#define soap_GET__ns6__CounterSignature soap_GET_ns6__CounterSignatureType


#define soap_POST_recv__ns6__CounterSignature soap_POST_recv_ns6__CounterSignatureType

#endif
/* _ns6__UnsignedSignatureProperties is a typedef synonym for ns6__UnsignedSignaturePropertiesType */

#ifndef SOAP_TYPE__ns6__UnsignedSignatureProperties_DEFINED
#define SOAP_TYPE__ns6__UnsignedSignatureProperties_DEFINED

#define soap_default__ns6__UnsignedSignatureProperties(soap, a) (a)->ns6__UnsignedSignaturePropertiesType::soap_default(soap)


#define soap_serialize__ns6__UnsignedSignatureProperties(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__UnsignedSignatureProperties2s soap_ns6__UnsignedSignaturePropertiesType2s


#define soap_out__ns6__UnsignedSignatureProperties soap_out_ns6__UnsignedSignaturePropertiesType


#define soap_s2_ns6__UnsignedSignatureProperties soap_s2ns6__UnsignedSignaturePropertiesType


#define soap_in__ns6__UnsignedSignatureProperties soap_in_ns6__UnsignedSignaturePropertiesType


#define SCAP_instantiate__ns6__UnsignedSignatureProperties SCAP_instantiate_ns6__UnsignedSignaturePropertiesType


#define soap_new__ns6__UnsignedSignatureProperties soap_new_ns6__UnsignedSignaturePropertiesType


#define soap_new_req__ns6__UnsignedSignatureProperties soap_new_req_ns6__UnsignedSignaturePropertiesType


#define soap_new_set__ns6__UnsignedSignatureProperties soap_new_set_ns6__UnsignedSignaturePropertiesType


#define soap_put__ns6__UnsignedSignatureProperties soap_put_ns6__UnsignedSignaturePropertiesType


#define soap_write__ns6__UnsignedSignatureProperties soap_write_ns6__UnsignedSignaturePropertiesType


#define soap_PUT__ns6__UnsignedSignatureProperties soap_PUT_ns6__UnsignedSignaturePropertiesType


#define soap_POST_send__ns6__UnsignedSignatureProperties soap_POST_send_ns6__UnsignedSignaturePropertiesType


#define soap_get__ns6__UnsignedSignatureProperties soap_get_ns6__UnsignedSignaturePropertiesType


#define soap_read__ns6__UnsignedSignatureProperties soap_read_ns6__UnsignedSignaturePropertiesType


#define soap_GET__ns6__UnsignedSignatureProperties soap_GET_ns6__UnsignedSignaturePropertiesType


#define soap_POST_recv__ns6__UnsignedSignatureProperties soap_POST_recv_ns6__UnsignedSignaturePropertiesType

#endif
/* _ns6__UnsignedProperties is a typedef synonym for ns6__UnsignedPropertiesType */

#ifndef SOAP_TYPE__ns6__UnsignedProperties_DEFINED
#define SOAP_TYPE__ns6__UnsignedProperties_DEFINED

#define soap_default__ns6__UnsignedProperties(soap, a) (a)->ns6__UnsignedPropertiesType::soap_default(soap)


#define soap_serialize__ns6__UnsignedProperties(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__UnsignedProperties2s soap_ns6__UnsignedPropertiesType2s


#define soap_out__ns6__UnsignedProperties soap_out_ns6__UnsignedPropertiesType


#define soap_s2_ns6__UnsignedProperties soap_s2ns6__UnsignedPropertiesType


#define soap_in__ns6__UnsignedProperties soap_in_ns6__UnsignedPropertiesType


#define SCAP_instantiate__ns6__UnsignedProperties SCAP_instantiate_ns6__UnsignedPropertiesType


#define soap_new__ns6__UnsignedProperties soap_new_ns6__UnsignedPropertiesType


#define soap_new_req__ns6__UnsignedProperties soap_new_req_ns6__UnsignedPropertiesType


#define soap_new_set__ns6__UnsignedProperties soap_new_set_ns6__UnsignedPropertiesType


#define soap_put__ns6__UnsignedProperties soap_put_ns6__UnsignedPropertiesType


#define soap_write__ns6__UnsignedProperties soap_write_ns6__UnsignedPropertiesType


#define soap_PUT__ns6__UnsignedProperties soap_PUT_ns6__UnsignedPropertiesType


#define soap_POST_send__ns6__UnsignedProperties soap_POST_send_ns6__UnsignedPropertiesType


#define soap_get__ns6__UnsignedProperties soap_get_ns6__UnsignedPropertiesType


#define soap_read__ns6__UnsignedProperties soap_read_ns6__UnsignedPropertiesType


#define soap_GET__ns6__UnsignedProperties soap_GET_ns6__UnsignedPropertiesType


#define soap_POST_recv__ns6__UnsignedProperties soap_POST_recv_ns6__UnsignedPropertiesType

#endif
/* _ns6__ClaimedRole is a typedef synonym for ns6__ClaimedRoleType */

#ifndef SOAP_TYPE__ns6__ClaimedRole_DEFINED
#define SOAP_TYPE__ns6__ClaimedRole_DEFINED

#define soap_default__ns6__ClaimedRole(soap, a) (a)->ns6__ClaimedRoleType::soap_default(soap)


#define soap_serialize__ns6__ClaimedRole(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__ClaimedRole2s soap_ns6__ClaimedRoleType2s


#define soap_out__ns6__ClaimedRole soap_out_ns6__ClaimedRoleType


#define soap_s2_ns6__ClaimedRole soap_s2ns6__ClaimedRoleType


#define soap_in__ns6__ClaimedRole soap_in_ns6__ClaimedRoleType


#define SCAP_instantiate__ns6__ClaimedRole SCAP_instantiate_ns6__ClaimedRoleType


#define soap_new__ns6__ClaimedRole soap_new_ns6__ClaimedRoleType


#define soap_new_req__ns6__ClaimedRole soap_new_req_ns6__ClaimedRoleType


#define soap_new_set__ns6__ClaimedRole soap_new_set_ns6__ClaimedRoleType


#define soap_put__ns6__ClaimedRole soap_put_ns6__ClaimedRoleType


#define soap_write__ns6__ClaimedRole soap_write_ns6__ClaimedRoleType


#define soap_PUT__ns6__ClaimedRole soap_PUT_ns6__ClaimedRoleType


#define soap_POST_send__ns6__ClaimedRole soap_POST_send_ns6__ClaimedRoleType


#define soap_get__ns6__ClaimedRole soap_get_ns6__ClaimedRoleType


#define soap_read__ns6__ClaimedRole soap_read_ns6__ClaimedRoleType


#define soap_GET__ns6__ClaimedRole soap_GET_ns6__ClaimedRoleType


#define soap_POST_recv__ns6__ClaimedRole soap_POST_recv_ns6__ClaimedRoleType

#endif
/* _ns6__ClaimedRoles is a typedef synonym for ns6__ClaimedRolesListType */

#ifndef SOAP_TYPE__ns6__ClaimedRoles_DEFINED
#define SOAP_TYPE__ns6__ClaimedRoles_DEFINED

#define soap_default__ns6__ClaimedRoles(soap, a) (a)->ns6__ClaimedRolesListType::soap_default(soap)


#define soap_serialize__ns6__ClaimedRoles(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__ClaimedRoles2s soap_ns6__ClaimedRolesListType2s


#define soap_out__ns6__ClaimedRoles soap_out_ns6__ClaimedRolesListType


#define soap_s2_ns6__ClaimedRoles soap_s2ns6__ClaimedRolesListType


#define soap_in__ns6__ClaimedRoles soap_in_ns6__ClaimedRolesListType


#define SCAP_instantiate__ns6__ClaimedRoles SCAP_instantiate_ns6__ClaimedRolesListType


#define soap_new__ns6__ClaimedRoles soap_new_ns6__ClaimedRolesListType


#define soap_new_req__ns6__ClaimedRoles soap_new_req_ns6__ClaimedRolesListType


#define soap_new_set__ns6__ClaimedRoles soap_new_set_ns6__ClaimedRolesListType


#define soap_put__ns6__ClaimedRoles soap_put_ns6__ClaimedRolesListType


#define soap_write__ns6__ClaimedRoles soap_write_ns6__ClaimedRolesListType


#define soap_PUT__ns6__ClaimedRoles soap_PUT_ns6__ClaimedRolesListType


#define soap_POST_send__ns6__ClaimedRoles soap_POST_send_ns6__ClaimedRolesListType


#define soap_get__ns6__ClaimedRoles soap_get_ns6__ClaimedRolesListType


#define soap_read__ns6__ClaimedRoles soap_read_ns6__ClaimedRolesListType


#define soap_GET__ns6__ClaimedRoles soap_GET_ns6__ClaimedRolesListType


#define soap_POST_recv__ns6__ClaimedRoles soap_POST_recv_ns6__ClaimedRolesListType

#endif
/* _ns6__SignerRole is a typedef synonym for ns6__SignerRoleType */

#ifndef SOAP_TYPE__ns6__SignerRole_DEFINED
#define SOAP_TYPE__ns6__SignerRole_DEFINED

#define soap_default__ns6__SignerRole(soap, a) (a)->ns6__SignerRoleType::soap_default(soap)


#define soap_serialize__ns6__SignerRole(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__SignerRole2s soap_ns6__SignerRoleType2s


#define soap_out__ns6__SignerRole soap_out_ns6__SignerRoleType


#define soap_s2_ns6__SignerRole soap_s2ns6__SignerRoleType


#define soap_in__ns6__SignerRole soap_in_ns6__SignerRoleType


#define SCAP_instantiate__ns6__SignerRole SCAP_instantiate_ns6__SignerRoleType


#define soap_new__ns6__SignerRole soap_new_ns6__SignerRoleType


#define soap_new_req__ns6__SignerRole soap_new_req_ns6__SignerRoleType


#define soap_new_set__ns6__SignerRole soap_new_set_ns6__SignerRoleType


#define soap_put__ns6__SignerRole soap_put_ns6__SignerRoleType


#define soap_write__ns6__SignerRole soap_write_ns6__SignerRoleType


#define soap_PUT__ns6__SignerRole soap_PUT_ns6__SignerRoleType


#define soap_POST_send__ns6__SignerRole soap_POST_send_ns6__SignerRoleType


#define soap_get__ns6__SignerRole soap_get_ns6__SignerRoleType


#define soap_read__ns6__SignerRole soap_read_ns6__SignerRoleType


#define soap_GET__ns6__SignerRole soap_GET_ns6__SignerRoleType


#define soap_POST_recv__ns6__SignerRole soap_POST_recv_ns6__SignerRoleType

#endif
/* _ns6__IssuerSerial is a typedef synonym for ns6__IssuerSerialType */

#ifndef SOAP_TYPE__ns6__IssuerSerial_DEFINED
#define SOAP_TYPE__ns6__IssuerSerial_DEFINED

#define soap_default__ns6__IssuerSerial(soap, a) (a)->ns6__IssuerSerialType::soap_default(soap)


#define soap_serialize__ns6__IssuerSerial(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__IssuerSerial2s soap_ns6__IssuerSerialType2s


#define soap_out__ns6__IssuerSerial soap_out_ns6__IssuerSerialType


#define soap_s2_ns6__IssuerSerial soap_s2ns6__IssuerSerialType


#define soap_in__ns6__IssuerSerial soap_in_ns6__IssuerSerialType


#define SCAP_instantiate__ns6__IssuerSerial SCAP_instantiate_ns6__IssuerSerialType


#define soap_new__ns6__IssuerSerial soap_new_ns6__IssuerSerialType


#define soap_new_req__ns6__IssuerSerial soap_new_req_ns6__IssuerSerialType


#define soap_new_set__ns6__IssuerSerial soap_new_set_ns6__IssuerSerialType


#define soap_put__ns6__IssuerSerial soap_put_ns6__IssuerSerialType


#define soap_write__ns6__IssuerSerial soap_write_ns6__IssuerSerialType


#define soap_PUT__ns6__IssuerSerial soap_PUT_ns6__IssuerSerialType


#define soap_POST_send__ns6__IssuerSerial soap_POST_send_ns6__IssuerSerialType


#define soap_get__ns6__IssuerSerial soap_get_ns6__IssuerSerialType


#define soap_read__ns6__IssuerSerial soap_read_ns6__IssuerSerialType


#define soap_GET__ns6__IssuerSerial soap_GET_ns6__IssuerSerialType


#define soap_POST_recv__ns6__IssuerSerial soap_POST_recv_ns6__IssuerSerialType

#endif
/* _ns6__CertDigest is a typedef synonym for ns6__CertDigestType */

#ifndef SOAP_TYPE__ns6__CertDigest_DEFINED
#define SOAP_TYPE__ns6__CertDigest_DEFINED

#define soap_default__ns6__CertDigest(soap, a) (a)->ns6__CertDigestType::soap_default(soap)


#define soap_serialize__ns6__CertDigest(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__CertDigest2s soap_ns6__CertDigestType2s


#define soap_out__ns6__CertDigest soap_out_ns6__CertDigestType


#define soap_s2_ns6__CertDigest soap_s2ns6__CertDigestType


#define soap_in__ns6__CertDigest soap_in_ns6__CertDigestType


#define SCAP_instantiate__ns6__CertDigest SCAP_instantiate_ns6__CertDigestType


#define soap_new__ns6__CertDigest soap_new_ns6__CertDigestType


#define soap_new_req__ns6__CertDigest soap_new_req_ns6__CertDigestType


#define soap_new_set__ns6__CertDigest soap_new_set_ns6__CertDigestType


#define soap_put__ns6__CertDigest soap_put_ns6__CertDigestType


#define soap_write__ns6__CertDigest soap_write_ns6__CertDigestType


#define soap_PUT__ns6__CertDigest soap_PUT_ns6__CertDigestType


#define soap_POST_send__ns6__CertDigest soap_POST_send_ns6__CertDigestType


#define soap_get__ns6__CertDigest soap_get_ns6__CertDigestType


#define soap_read__ns6__CertDigest soap_read_ns6__CertDigestType


#define soap_GET__ns6__CertDigest soap_GET_ns6__CertDigestType


#define soap_POST_recv__ns6__CertDigest soap_POST_recv_ns6__CertDigestType

#endif
/* _ns6__Cert is a typedef synonym for ns6__CertType */

#ifndef SOAP_TYPE__ns6__Cert_DEFINED
#define SOAP_TYPE__ns6__Cert_DEFINED

#define soap_default__ns6__Cert(soap, a) (a)->ns6__CertType::soap_default(soap)


#define soap_serialize__ns6__Cert(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__Cert2s soap_ns6__CertType2s


#define soap_out__ns6__Cert soap_out_ns6__CertType


#define soap_s2_ns6__Cert soap_s2ns6__CertType


#define soap_in__ns6__Cert soap_in_ns6__CertType


#define SCAP_instantiate__ns6__Cert SCAP_instantiate_ns6__CertType


#define soap_new__ns6__Cert soap_new_ns6__CertType


#define soap_new_req__ns6__Cert soap_new_req_ns6__CertType


#define soap_new_set__ns6__Cert soap_new_set_ns6__CertType


#define soap_put__ns6__Cert soap_put_ns6__CertType


#define soap_write__ns6__Cert soap_write_ns6__CertType


#define soap_PUT__ns6__Cert soap_PUT_ns6__CertType


#define soap_POST_send__ns6__Cert soap_POST_send_ns6__CertType


#define soap_get__ns6__Cert soap_get_ns6__CertType


#define soap_read__ns6__Cert soap_read_ns6__CertType


#define soap_GET__ns6__Cert soap_GET_ns6__CertType


#define soap_POST_recv__ns6__Cert soap_POST_recv_ns6__CertType

#endif
/* _ns6__SigningCertificate is a typedef synonym for ns6__SigningCertificateType */

#ifndef SOAP_TYPE__ns6__SigningCertificate_DEFINED
#define SOAP_TYPE__ns6__SigningCertificate_DEFINED

#define soap_default__ns6__SigningCertificate(soap, a) (a)->ns6__SigningCertificateType::soap_default(soap)


#define soap_serialize__ns6__SigningCertificate(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__SigningCertificate2s soap_ns6__SigningCertificateType2s


#define soap_out__ns6__SigningCertificate soap_out_ns6__SigningCertificateType


#define soap_s2_ns6__SigningCertificate soap_s2ns6__SigningCertificateType


#define soap_in__ns6__SigningCertificate soap_in_ns6__SigningCertificateType


#define SCAP_instantiate__ns6__SigningCertificate SCAP_instantiate_ns6__SigningCertificateType


#define soap_new__ns6__SigningCertificate soap_new_ns6__SigningCertificateType


#define soap_new_req__ns6__SigningCertificate soap_new_req_ns6__SigningCertificateType


#define soap_new_set__ns6__SigningCertificate soap_new_set_ns6__SigningCertificateType


#define soap_put__ns6__SigningCertificate soap_put_ns6__SigningCertificateType


#define soap_write__ns6__SigningCertificate soap_write_ns6__SigningCertificateType


#define soap_PUT__ns6__SigningCertificate soap_PUT_ns6__SigningCertificateType


#define soap_POST_send__ns6__SigningCertificate soap_POST_send_ns6__SigningCertificateType


#define soap_get__ns6__SigningCertificate soap_get_ns6__SigningCertificateType


#define soap_read__ns6__SigningCertificate soap_read_ns6__SigningCertificateType


#define soap_GET__ns6__SigningCertificate soap_GET_ns6__SigningCertificateType


#define soap_POST_recv__ns6__SigningCertificate soap_POST_recv_ns6__SigningCertificateType

#endif
/* _ns6__SignedSignatureProperties is a typedef synonym for ns6__SignedSignaturePropertiesType */

#ifndef SOAP_TYPE__ns6__SignedSignatureProperties_DEFINED
#define SOAP_TYPE__ns6__SignedSignatureProperties_DEFINED

#define soap_default__ns6__SignedSignatureProperties(soap, a) (a)->ns6__SignedSignaturePropertiesType::soap_default(soap)


#define soap_serialize__ns6__SignedSignatureProperties(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__SignedSignatureProperties2s soap_ns6__SignedSignaturePropertiesType2s


#define soap_out__ns6__SignedSignatureProperties soap_out_ns6__SignedSignaturePropertiesType


#define soap_s2_ns6__SignedSignatureProperties soap_s2ns6__SignedSignaturePropertiesType


#define soap_in__ns6__SignedSignatureProperties soap_in_ns6__SignedSignaturePropertiesType


#define SCAP_instantiate__ns6__SignedSignatureProperties SCAP_instantiate_ns6__SignedSignaturePropertiesType


#define soap_new__ns6__SignedSignatureProperties soap_new_ns6__SignedSignaturePropertiesType


#define soap_new_req__ns6__SignedSignatureProperties soap_new_req_ns6__SignedSignaturePropertiesType


#define soap_new_set__ns6__SignedSignatureProperties soap_new_set_ns6__SignedSignaturePropertiesType


#define soap_put__ns6__SignedSignatureProperties soap_put_ns6__SignedSignaturePropertiesType


#define soap_write__ns6__SignedSignatureProperties soap_write_ns6__SignedSignaturePropertiesType


#define soap_PUT__ns6__SignedSignatureProperties soap_PUT_ns6__SignedSignaturePropertiesType


#define soap_POST_send__ns6__SignedSignatureProperties soap_POST_send_ns6__SignedSignaturePropertiesType


#define soap_get__ns6__SignedSignatureProperties soap_get_ns6__SignedSignaturePropertiesType


#define soap_read__ns6__SignedSignatureProperties soap_read_ns6__SignedSignaturePropertiesType


#define soap_GET__ns6__SignedSignatureProperties soap_GET_ns6__SignedSignaturePropertiesType


#define soap_POST_recv__ns6__SignedSignatureProperties soap_POST_recv_ns6__SignedSignaturePropertiesType

#endif
/* _ns6__SignedProperties is a typedef synonym for ns6__SignedPropertiesType */

#ifndef SOAP_TYPE__ns6__SignedProperties_DEFINED
#define SOAP_TYPE__ns6__SignedProperties_DEFINED

#define soap_default__ns6__SignedProperties(soap, a) (a)->ns6__SignedPropertiesType::soap_default(soap)


#define soap_serialize__ns6__SignedProperties(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__SignedProperties2s soap_ns6__SignedPropertiesType2s


#define soap_out__ns6__SignedProperties soap_out_ns6__SignedPropertiesType


#define soap_s2_ns6__SignedProperties soap_s2ns6__SignedPropertiesType


#define soap_in__ns6__SignedProperties soap_in_ns6__SignedPropertiesType


#define SCAP_instantiate__ns6__SignedProperties SCAP_instantiate_ns6__SignedPropertiesType


#define soap_new__ns6__SignedProperties soap_new_ns6__SignedPropertiesType


#define soap_new_req__ns6__SignedProperties soap_new_req_ns6__SignedPropertiesType


#define soap_new_set__ns6__SignedProperties soap_new_set_ns6__SignedPropertiesType


#define soap_put__ns6__SignedProperties soap_put_ns6__SignedPropertiesType


#define soap_write__ns6__SignedProperties soap_write_ns6__SignedPropertiesType


#define soap_PUT__ns6__SignedProperties soap_PUT_ns6__SignedPropertiesType


#define soap_POST_send__ns6__SignedProperties soap_POST_send_ns6__SignedPropertiesType


#define soap_get__ns6__SignedProperties soap_get_ns6__SignedPropertiesType


#define soap_read__ns6__SignedProperties soap_read_ns6__SignedPropertiesType


#define soap_GET__ns6__SignedProperties soap_GET_ns6__SignedPropertiesType


#define soap_POST_recv__ns6__SignedProperties soap_POST_recv_ns6__SignedPropertiesType

#endif
/* _ns6__QualifyingProperties is a typedef synonym for ns6__QualifyingPropertiesType */

#ifndef SOAP_TYPE__ns6__QualifyingProperties_DEFINED
#define SOAP_TYPE__ns6__QualifyingProperties_DEFINED

#define soap_default__ns6__QualifyingProperties(soap, a) (a)->ns6__QualifyingPropertiesType::soap_default(soap)


#define soap_serialize__ns6__QualifyingProperties(soap, a) (a)->soap_serialize(soap)


#define soap__ns6__QualifyingProperties2s soap_ns6__QualifyingPropertiesType2s


#define soap_out__ns6__QualifyingProperties soap_out_ns6__QualifyingPropertiesType


#define soap_s2_ns6__QualifyingProperties soap_s2ns6__QualifyingPropertiesType


#define soap_in__ns6__QualifyingProperties soap_in_ns6__QualifyingPropertiesType


#define SCAP_instantiate__ns6__QualifyingProperties SCAP_instantiate_ns6__QualifyingPropertiesType


#define soap_new__ns6__QualifyingProperties soap_new_ns6__QualifyingPropertiesType


#define soap_new_req__ns6__QualifyingProperties soap_new_req_ns6__QualifyingPropertiesType


#define soap_new_set__ns6__QualifyingProperties soap_new_set_ns6__QualifyingPropertiesType


#define soap_put__ns6__QualifyingProperties soap_put_ns6__QualifyingPropertiesType


#define soap_write__ns6__QualifyingProperties soap_write_ns6__QualifyingPropertiesType


#define soap_PUT__ns6__QualifyingProperties soap_PUT_ns6__QualifyingPropertiesType


#define soap_POST_send__ns6__QualifyingProperties soap_POST_send_ns6__QualifyingPropertiesType


#define soap_get__ns6__QualifyingProperties soap_get_ns6__QualifyingPropertiesType


#define soap_read__ns6__QualifyingProperties soap_read_ns6__QualifyingPropertiesType


#define soap_GET__ns6__QualifyingProperties soap_GET_ns6__QualifyingPropertiesType


#define soap_POST_recv__ns6__QualifyingProperties soap_POST_recv_ns6__QualifyingPropertiesType

#endif
/* _ns3__SignatureAttribute is a typedef synonym for ns5__SignatureType */

#ifndef SOAP_TYPE__ns3__SignatureAttribute_DEFINED
#define SOAP_TYPE__ns3__SignatureAttribute_DEFINED

#define soap_default__ns3__SignatureAttribute(soap, a) (a)->ns5__SignatureType::soap_default(soap)


#define soap_serialize__ns3__SignatureAttribute(soap, a) (a)->soap_serialize(soap)


#define soap__ns3__SignatureAttribute2s soap_ns5__SignatureType2s


#define soap_out__ns3__SignatureAttribute soap_out_ns5__SignatureType


#define soap_s2_ns3__SignatureAttribute soap_s2ns5__SignatureType


#define soap_in__ns3__SignatureAttribute soap_in_ns5__SignatureType


#define SCAP_instantiate__ns3__SignatureAttribute SCAP_instantiate_ns5__SignatureType


#define soap_new__ns3__SignatureAttribute soap_new_ns5__SignatureType


#define soap_new_req__ns3__SignatureAttribute soap_new_req_ns5__SignatureType


#define soap_new_set__ns3__SignatureAttribute soap_new_set_ns5__SignatureType


#define soap_put__ns3__SignatureAttribute soap_put_ns5__SignatureType


#define soap_write__ns3__SignatureAttribute soap_write_ns5__SignatureType


#define soap_PUT__ns3__SignatureAttribute soap_PUT_ns5__SignatureType


#define soap_POST_send__ns3__SignatureAttribute soap_POST_send_ns5__SignatureType


#define soap_get__ns3__SignatureAttribute soap_get_ns5__SignatureType


#define soap_read__ns3__SignatureAttribute soap_read_ns5__SignatureType


#define soap_GET__ns3__SignatureAttribute soap_GET_ns5__SignatureType


#define soap_POST_recv__ns3__SignatureAttribute soap_POST_recv_ns5__SignatureType

#endif
/* _ns3__Attribute is a typedef synonym for ns3__AttributeType */

#ifndef SOAP_TYPE__ns3__Attribute_DEFINED
#define SOAP_TYPE__ns3__Attribute_DEFINED

#define soap_default__ns3__Attribute(soap, a) (a)->ns3__AttributeType::soap_default(soap)


#define soap_serialize__ns3__Attribute(soap, a) (a)->soap_serialize(soap)


#define soap__ns3__Attribute2s soap_ns3__AttributeType2s


#define soap_out__ns3__Attribute soap_out_ns3__AttributeType


#define soap_s2_ns3__Attribute soap_s2ns3__AttributeType


#define soap_in__ns3__Attribute soap_in_ns3__AttributeType


#define SCAP_instantiate__ns3__Attribute SCAP_instantiate_ns3__AttributeType


#define soap_new__ns3__Attribute soap_new_ns3__AttributeType


#define soap_new_req__ns3__Attribute soap_new_req_ns3__AttributeType


#define soap_new_set__ns3__Attribute soap_new_set_ns3__AttributeType


#define soap_put__ns3__Attribute soap_put_ns3__AttributeType


#define soap_write__ns3__Attribute soap_write_ns3__AttributeType


#define soap_PUT__ns3__Attribute soap_PUT_ns3__AttributeType


#define soap_POST_send__ns3__Attribute soap_POST_send_ns3__AttributeType


#define soap_get__ns3__Attribute soap_get_ns3__AttributeType


#define soap_read__ns3__Attribute soap_read_ns3__AttributeType


#define soap_GET__ns3__Attribute soap_GET_ns3__AttributeType


#define soap_POST_recv__ns3__Attribute soap_POST_recv_ns3__AttributeType

#endif
/* _ns5__X509SerialNumber is a typedef synonym for ns5__X509SerialNumberType */

#ifndef SOAP_TYPE__ns5__X509SerialNumber_DEFINED
#define SOAP_TYPE__ns5__X509SerialNumber_DEFINED

#define soap_default__ns5__X509SerialNumber soap_default_ns5__X509SerialNumberType


#define soap_serialize__ns5__X509SerialNumber soap_serialize_ns5__X509SerialNumberType


#define soap__ns5__X509SerialNumber2s(soap, a) ((a).c_str())

#define soap_out__ns5__X509SerialNumber soap_out_ns5__X509SerialNumberType


#define soap_s2_ns5__X509SerialNumber(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")

#define soap_in__ns5__X509SerialNumber soap_in_ns5__X509SerialNumberType


#define SCAP_instantiate__ns5__X509SerialNumber SCAP_instantiate_ns5__X509SerialNumberType


#define soap_new__ns5__X509SerialNumber soap_new_ns5__X509SerialNumberType


#define soap_put__ns5__X509SerialNumber soap_put_ns5__X509SerialNumberType


#define soap_write__ns5__X509SerialNumber soap_write_ns5__X509SerialNumberType


#define soap_PUT__ns5__X509SerialNumber soap_PUT_ns5__X509SerialNumberType


#define soap_POST_send__ns5__X509SerialNumber soap_POST_send_ns5__X509SerialNumberType


#define soap_get__ns5__X509SerialNumber soap_get_ns5__X509SerialNumberType


#define soap_read__ns5__X509SerialNumber soap_read_ns5__X509SerialNumberType


#define soap_GET__ns5__X509SerialNumber soap_GET_ns5__X509SerialNumberType


#define soap_POST_recv__ns5__X509SerialNumber soap_POST_recv_ns5__X509SerialNumberType

#endif
/* _ns5__X509IssuerName is a typedef synonym for ns5__X509IssuerNameType */

#ifndef SOAP_TYPE__ns5__X509IssuerName_DEFINED
#define SOAP_TYPE__ns5__X509IssuerName_DEFINED

#define soap_default__ns5__X509IssuerName soap_default_ns5__X509IssuerNameType


#define soap_serialize__ns5__X509IssuerName soap_serialize_ns5__X509IssuerNameType


#define soap__ns5__X509IssuerName2s(soap, a) ((a).c_str())

#define soap_out__ns5__X509IssuerName soap_out_ns5__X509IssuerNameType


#define soap_s2_ns5__X509IssuerName(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__ns5__X509IssuerName soap_in_ns5__X509IssuerNameType


#define SCAP_instantiate__ns5__X509IssuerName SCAP_instantiate_ns5__X509IssuerNameType


#define soap_new__ns5__X509IssuerName soap_new_ns5__X509IssuerNameType


#define soap_put__ns5__X509IssuerName soap_put_ns5__X509IssuerNameType


#define soap_write__ns5__X509IssuerName soap_write_ns5__X509IssuerNameType


#define soap_PUT__ns5__X509IssuerName soap_PUT_ns5__X509IssuerNameType


#define soap_POST_send__ns5__X509IssuerName soap_POST_send_ns5__X509IssuerNameType


#define soap_get__ns5__X509IssuerName soap_get_ns5__X509IssuerNameType


#define soap_read__ns5__X509IssuerName soap_read_ns5__X509IssuerNameType


#define soap_GET__ns5__X509IssuerName soap_GET_ns5__X509IssuerNameType


#define soap_POST_recv__ns5__X509IssuerName soap_POST_recv_ns5__X509IssuerNameType

#endif
/* _ns5__SignatureValue is a typedef synonym for ns5__SignatureValueType */

#ifndef SOAP_TYPE__ns5__SignatureValue_DEFINED
#define SOAP_TYPE__ns5__SignatureValue_DEFINED

#define soap_default__ns5__SignatureValue(soap, a) (a)->ns5__SignatureValueType::soap_default(soap)


#define soap_serialize__ns5__SignatureValue(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__SignatureValue2s soap_ns5__SignatureValueType2s


#define soap_out__ns5__SignatureValue soap_out_ns5__SignatureValueType


#define soap_s2_ns5__SignatureValue soap_s2ns5__SignatureValueType


#define soap_in__ns5__SignatureValue soap_in_ns5__SignatureValueType


#define SCAP_instantiate__ns5__SignatureValue SCAP_instantiate_ns5__SignatureValueType


#define soap_new__ns5__SignatureValue soap_new_ns5__SignatureValueType


#define soap_new_req__ns5__SignatureValue soap_new_req_ns5__SignatureValueType


#define soap_new_set__ns5__SignatureValue soap_new_set_ns5__SignatureValueType


#define soap_put__ns5__SignatureValue soap_put_ns5__SignatureValueType


#define soap_write__ns5__SignatureValue soap_write_ns5__SignatureValueType


#define soap_PUT__ns5__SignatureValue soap_PUT_ns5__SignatureValueType


#define soap_POST_send__ns5__SignatureValue soap_POST_send_ns5__SignatureValueType


#define soap_get__ns5__SignatureValue soap_get_ns5__SignatureValueType


#define soap_read__ns5__SignatureValue soap_read_ns5__SignatureValueType


#define soap_GET__ns5__SignatureValue soap_GET_ns5__SignatureValueType


#define soap_POST_recv__ns5__SignatureValue soap_POST_recv_ns5__SignatureValueType

#endif
/* _ns5__DigestValue is a typedef synonym for ns5__DigestValueType */

#ifndef SOAP_TYPE__ns5__DigestValue_DEFINED
#define SOAP_TYPE__ns5__DigestValue_DEFINED

#define soap_default__ns5__DigestValue(soap, a) (a)->ns5__DigestValueType::soap_default(soap)


#define soap_serialize__ns5__DigestValue(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__DigestValue2s soap_ns5__DigestValueType2s


#define soap_out__ns5__DigestValue soap_out_ns5__DigestValueType


#define soap_s2_ns5__DigestValue soap_s2ns5__DigestValueType


#define soap_in__ns5__DigestValue soap_in_ns5__DigestValueType


#define SCAP_instantiate__ns5__DigestValue SCAP_instantiate_ns5__DigestValueType


#define soap_new__ns5__DigestValue soap_new_ns5__DigestValueType


#define soap_new_req__ns5__DigestValue soap_new_req_ns5__DigestValueType


#define soap_new_set__ns5__DigestValue soap_new_set_ns5__DigestValueType


#define soap_put__ns5__DigestValue soap_put_ns5__DigestValueType


#define soap_write__ns5__DigestValue soap_write_ns5__DigestValueType


#define soap_PUT__ns5__DigestValue soap_PUT_ns5__DigestValueType


#define soap_POST_send__ns5__DigestValue soap_POST_send_ns5__DigestValueType


#define soap_get__ns5__DigestValue soap_get_ns5__DigestValueType


#define soap_read__ns5__DigestValue soap_read_ns5__DigestValueType


#define soap_GET__ns5__DigestValue soap_GET_ns5__DigestValueType


#define soap_POST_recv__ns5__DigestValue soap_POST_recv_ns5__DigestValueType

#endif
/* _ns5__X509Certificate is a typedef synonym for ns5__X509CertificateType */

#ifndef SOAP_TYPE__ns5__X509Certificate_DEFINED
#define SOAP_TYPE__ns5__X509Certificate_DEFINED

#define soap_default__ns5__X509Certificate(soap, a) (a)->ns5__X509CertificateType::soap_default(soap)


#define soap_serialize__ns5__X509Certificate(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__X509Certificate2s soap_ns5__X509CertificateType2s


#define soap_out__ns5__X509Certificate soap_out_ns5__X509CertificateType


#define soap_s2_ns5__X509Certificate soap_s2ns5__X509CertificateType


#define soap_in__ns5__X509Certificate soap_in_ns5__X509CertificateType


#define SCAP_instantiate__ns5__X509Certificate SCAP_instantiate_ns5__X509CertificateType


#define soap_new__ns5__X509Certificate soap_new_ns5__X509CertificateType


#define soap_new_req__ns5__X509Certificate soap_new_req_ns5__X509CertificateType


#define soap_new_set__ns5__X509Certificate soap_new_set_ns5__X509CertificateType


#define soap_put__ns5__X509Certificate soap_put_ns5__X509CertificateType


#define soap_write__ns5__X509Certificate soap_write_ns5__X509CertificateType


#define soap_PUT__ns5__X509Certificate soap_PUT_ns5__X509CertificateType


#define soap_POST_send__ns5__X509Certificate soap_POST_send_ns5__X509CertificateType


#define soap_get__ns5__X509Certificate soap_get_ns5__X509CertificateType


#define soap_read__ns5__X509Certificate soap_read_ns5__X509CertificateType


#define soap_GET__ns5__X509Certificate soap_GET_ns5__X509CertificateType


#define soap_POST_recv__ns5__X509Certificate soap_POST_recv_ns5__X509CertificateType

#endif
/* _ns5__Object is a typedef synonym for ns5__ObjectType */

#ifndef SOAP_TYPE__ns5__Object_DEFINED
#define SOAP_TYPE__ns5__Object_DEFINED

#define soap_default__ns5__Object(soap, a) (a)->ns5__ObjectType::soap_default(soap)


#define soap_serialize__ns5__Object(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__Object2s soap_ns5__ObjectType2s


#define soap_out__ns5__Object soap_out_ns5__ObjectType


#define soap_s2_ns5__Object soap_s2ns5__ObjectType


#define soap_in__ns5__Object soap_in_ns5__ObjectType


#define SCAP_instantiate__ns5__Object SCAP_instantiate_ns5__ObjectType


#define soap_new__ns5__Object soap_new_ns5__ObjectType


#define soap_new_req__ns5__Object soap_new_req_ns5__ObjectType


#define soap_new_set__ns5__Object soap_new_set_ns5__ObjectType


#define soap_put__ns5__Object soap_put_ns5__ObjectType


#define soap_write__ns5__Object soap_write_ns5__ObjectType


#define soap_PUT__ns5__Object soap_PUT_ns5__ObjectType


#define soap_POST_send__ns5__Object soap_POST_send_ns5__ObjectType


#define soap_get__ns5__Object soap_get_ns5__ObjectType


#define soap_read__ns5__Object soap_read_ns5__ObjectType


#define soap_GET__ns5__Object soap_GET_ns5__ObjectType


#define soap_POST_recv__ns5__Object soap_POST_recv_ns5__ObjectType

#endif
/* _ns5__X509Data is a typedef synonym for ns5__X509DataType */

#ifndef SOAP_TYPE__ns5__X509Data_DEFINED
#define SOAP_TYPE__ns5__X509Data_DEFINED

#define soap_default__ns5__X509Data(soap, a) (a)->ns5__X509DataType::soap_default(soap)


#define soap_serialize__ns5__X509Data(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__X509Data2s soap_ns5__X509DataType2s


#define soap_out__ns5__X509Data soap_out_ns5__X509DataType


#define soap_s2_ns5__X509Data soap_s2ns5__X509DataType


#define soap_in__ns5__X509Data soap_in_ns5__X509DataType


#define SCAP_instantiate__ns5__X509Data SCAP_instantiate_ns5__X509DataType


#define soap_new__ns5__X509Data soap_new_ns5__X509DataType


#define soap_new_req__ns5__X509Data soap_new_req_ns5__X509DataType


#define soap_new_set__ns5__X509Data soap_new_set_ns5__X509DataType


#define soap_put__ns5__X509Data soap_put_ns5__X509DataType


#define soap_write__ns5__X509Data soap_write_ns5__X509DataType


#define soap_PUT__ns5__X509Data soap_PUT_ns5__X509DataType


#define soap_POST_send__ns5__X509Data soap_POST_send_ns5__X509DataType


#define soap_get__ns5__X509Data soap_get_ns5__X509DataType


#define soap_read__ns5__X509Data soap_read_ns5__X509DataType


#define soap_GET__ns5__X509Data soap_GET_ns5__X509DataType


#define soap_POST_recv__ns5__X509Data soap_POST_recv_ns5__X509DataType

#endif
/* _ns5__KeyInfo is a typedef synonym for ns5__KeyInfoType */

#ifndef SOAP_TYPE__ns5__KeyInfo_DEFINED
#define SOAP_TYPE__ns5__KeyInfo_DEFINED

#define soap_default__ns5__KeyInfo(soap, a) (a)->ns5__KeyInfoType::soap_default(soap)


#define soap_serialize__ns5__KeyInfo(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__KeyInfo2s soap_ns5__KeyInfoType2s


#define soap_out__ns5__KeyInfo soap_out_ns5__KeyInfoType


#define soap_s2_ns5__KeyInfo soap_s2ns5__KeyInfoType


#define soap_in__ns5__KeyInfo soap_in_ns5__KeyInfoType


#define SCAP_instantiate__ns5__KeyInfo SCAP_instantiate_ns5__KeyInfoType


#define soap_new__ns5__KeyInfo soap_new_ns5__KeyInfoType


#define soap_new_req__ns5__KeyInfo soap_new_req_ns5__KeyInfoType


#define soap_new_set__ns5__KeyInfo soap_new_set_ns5__KeyInfoType


#define soap_put__ns5__KeyInfo soap_put_ns5__KeyInfoType


#define soap_write__ns5__KeyInfo soap_write_ns5__KeyInfoType


#define soap_PUT__ns5__KeyInfo soap_PUT_ns5__KeyInfoType


#define soap_POST_send__ns5__KeyInfo soap_POST_send_ns5__KeyInfoType


#define soap_get__ns5__KeyInfo soap_get_ns5__KeyInfoType


#define soap_read__ns5__KeyInfo soap_read_ns5__KeyInfoType


#define soap_GET__ns5__KeyInfo soap_GET_ns5__KeyInfoType


#define soap_POST_recv__ns5__KeyInfo soap_POST_recv_ns5__KeyInfoType

#endif
/* _ns5__DigestMethod is a typedef synonym for ns5__DigestMethodType */

#ifndef SOAP_TYPE__ns5__DigestMethod_DEFINED
#define SOAP_TYPE__ns5__DigestMethod_DEFINED

#define soap_default__ns5__DigestMethod(soap, a) (a)->ns5__DigestMethodType::soap_default(soap)


#define soap_serialize__ns5__DigestMethod(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__DigestMethod2s soap_ns5__DigestMethodType2s


#define soap_out__ns5__DigestMethod soap_out_ns5__DigestMethodType


#define soap_s2_ns5__DigestMethod soap_s2ns5__DigestMethodType


#define soap_in__ns5__DigestMethod soap_in_ns5__DigestMethodType


#define SCAP_instantiate__ns5__DigestMethod SCAP_instantiate_ns5__DigestMethodType


#define soap_new__ns5__DigestMethod soap_new_ns5__DigestMethodType


#define soap_new_req__ns5__DigestMethod soap_new_req_ns5__DigestMethodType


#define soap_new_set__ns5__DigestMethod soap_new_set_ns5__DigestMethodType


#define soap_put__ns5__DigestMethod soap_put_ns5__DigestMethodType


#define soap_write__ns5__DigestMethod soap_write_ns5__DigestMethodType


#define soap_PUT__ns5__DigestMethod soap_PUT_ns5__DigestMethodType


#define soap_POST_send__ns5__DigestMethod soap_POST_send_ns5__DigestMethodType


#define soap_get__ns5__DigestMethod soap_get_ns5__DigestMethodType


#define soap_read__ns5__DigestMethod soap_read_ns5__DigestMethodType


#define soap_GET__ns5__DigestMethod soap_GET_ns5__DigestMethodType


#define soap_POST_recv__ns5__DigestMethod soap_POST_recv_ns5__DigestMethodType

#endif
/* _ns5__Transform is a typedef synonym for ns5__TransformType */

#ifndef SOAP_TYPE__ns5__Transform_DEFINED
#define SOAP_TYPE__ns5__Transform_DEFINED

#define soap_default__ns5__Transform(soap, a) (a)->ns5__TransformType::soap_default(soap)


#define soap_serialize__ns5__Transform(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__Transform2s soap_ns5__TransformType2s


#define soap_out__ns5__Transform soap_out_ns5__TransformType


#define soap_s2_ns5__Transform soap_s2ns5__TransformType


#define soap_in__ns5__Transform soap_in_ns5__TransformType


#define SCAP_instantiate__ns5__Transform SCAP_instantiate_ns5__TransformType


#define soap_new__ns5__Transform soap_new_ns5__TransformType


#define soap_new_req__ns5__Transform soap_new_req_ns5__TransformType


#define soap_new_set__ns5__Transform soap_new_set_ns5__TransformType


#define soap_put__ns5__Transform soap_put_ns5__TransformType


#define soap_write__ns5__Transform soap_write_ns5__TransformType


#define soap_PUT__ns5__Transform soap_PUT_ns5__TransformType


#define soap_POST_send__ns5__Transform soap_POST_send_ns5__TransformType


#define soap_get__ns5__Transform soap_get_ns5__TransformType


#define soap_read__ns5__Transform soap_read_ns5__TransformType


#define soap_GET__ns5__Transform soap_GET_ns5__TransformType


#define soap_POST_recv__ns5__Transform soap_POST_recv_ns5__TransformType

#endif
/* _ns5__Transforms is a typedef synonym for ns5__TransformsType */

#ifndef SOAP_TYPE__ns5__Transforms_DEFINED
#define SOAP_TYPE__ns5__Transforms_DEFINED

#define soap_default__ns5__Transforms(soap, a) (a)->ns5__TransformsType::soap_default(soap)


#define soap_serialize__ns5__Transforms(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__Transforms2s soap_ns5__TransformsType2s


#define soap_out__ns5__Transforms soap_out_ns5__TransformsType


#define soap_s2_ns5__Transforms soap_s2ns5__TransformsType


#define soap_in__ns5__Transforms soap_in_ns5__TransformsType


#define SCAP_instantiate__ns5__Transforms SCAP_instantiate_ns5__TransformsType


#define soap_new__ns5__Transforms soap_new_ns5__TransformsType


#define soap_new_req__ns5__Transforms soap_new_req_ns5__TransformsType


#define soap_new_set__ns5__Transforms soap_new_set_ns5__TransformsType


#define soap_put__ns5__Transforms soap_put_ns5__TransformsType


#define soap_write__ns5__Transforms soap_write_ns5__TransformsType


#define soap_PUT__ns5__Transforms soap_PUT_ns5__TransformsType


#define soap_POST_send__ns5__Transforms soap_POST_send_ns5__TransformsType


#define soap_get__ns5__Transforms soap_get_ns5__TransformsType


#define soap_read__ns5__Transforms soap_read_ns5__TransformsType


#define soap_GET__ns5__Transforms soap_GET_ns5__TransformsType


#define soap_POST_recv__ns5__Transforms soap_POST_recv_ns5__TransformsType

#endif
/* _ns5__Reference is a typedef synonym for ns5__ReferenceType */

#ifndef SOAP_TYPE__ns5__Reference_DEFINED
#define SOAP_TYPE__ns5__Reference_DEFINED

#define soap_default__ns5__Reference(soap, a) (a)->ns5__ReferenceType::soap_default(soap)


#define soap_serialize__ns5__Reference(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__Reference2s soap_ns5__ReferenceType2s


#define soap_out__ns5__Reference soap_out_ns5__ReferenceType


#define soap_s2_ns5__Reference soap_s2ns5__ReferenceType


#define soap_in__ns5__Reference soap_in_ns5__ReferenceType


#define SCAP_instantiate__ns5__Reference SCAP_instantiate_ns5__ReferenceType


#define soap_new__ns5__Reference soap_new_ns5__ReferenceType


#define soap_new_req__ns5__Reference soap_new_req_ns5__ReferenceType


#define soap_new_set__ns5__Reference soap_new_set_ns5__ReferenceType


#define soap_put__ns5__Reference soap_put_ns5__ReferenceType


#define soap_write__ns5__Reference soap_write_ns5__ReferenceType


#define soap_PUT__ns5__Reference soap_PUT_ns5__ReferenceType


#define soap_POST_send__ns5__Reference soap_POST_send_ns5__ReferenceType


#define soap_get__ns5__Reference soap_get_ns5__ReferenceType


#define soap_read__ns5__Reference soap_read_ns5__ReferenceType


#define soap_GET__ns5__Reference soap_GET_ns5__ReferenceType


#define soap_POST_recv__ns5__Reference soap_POST_recv_ns5__ReferenceType

#endif
/* _ns5__SignatureMethod is a typedef synonym for ns5__SignatureMethodType */

#ifndef SOAP_TYPE__ns5__SignatureMethod_DEFINED
#define SOAP_TYPE__ns5__SignatureMethod_DEFINED

#define soap_default__ns5__SignatureMethod(soap, a) (a)->ns5__SignatureMethodType::soap_default(soap)


#define soap_serialize__ns5__SignatureMethod(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__SignatureMethod2s soap_ns5__SignatureMethodType2s


#define soap_out__ns5__SignatureMethod soap_out_ns5__SignatureMethodType


#define soap_s2_ns5__SignatureMethod soap_s2ns5__SignatureMethodType


#define soap_in__ns5__SignatureMethod soap_in_ns5__SignatureMethodType


#define SCAP_instantiate__ns5__SignatureMethod SCAP_instantiate_ns5__SignatureMethodType


#define soap_new__ns5__SignatureMethod soap_new_ns5__SignatureMethodType


#define soap_new_req__ns5__SignatureMethod soap_new_req_ns5__SignatureMethodType


#define soap_new_set__ns5__SignatureMethod soap_new_set_ns5__SignatureMethodType


#define soap_put__ns5__SignatureMethod soap_put_ns5__SignatureMethodType


#define soap_write__ns5__SignatureMethod soap_write_ns5__SignatureMethodType


#define soap_PUT__ns5__SignatureMethod soap_PUT_ns5__SignatureMethodType


#define soap_POST_send__ns5__SignatureMethod soap_POST_send_ns5__SignatureMethodType


#define soap_get__ns5__SignatureMethod soap_get_ns5__SignatureMethodType


#define soap_read__ns5__SignatureMethod soap_read_ns5__SignatureMethodType


#define soap_GET__ns5__SignatureMethod soap_GET_ns5__SignatureMethodType


#define soap_POST_recv__ns5__SignatureMethod soap_POST_recv_ns5__SignatureMethodType

#endif
/* _ns5__CanonicalizationMethod is a typedef synonym for ns5__CanonicalizationMethodType */

#ifndef SOAP_TYPE__ns5__CanonicalizationMethod_DEFINED
#define SOAP_TYPE__ns5__CanonicalizationMethod_DEFINED

#define soap_default__ns5__CanonicalizationMethod(soap, a) (a)->ns5__CanonicalizationMethodType::soap_default(soap)


#define soap_serialize__ns5__CanonicalizationMethod(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__CanonicalizationMethod2s soap_ns5__CanonicalizationMethodType2s


#define soap_out__ns5__CanonicalizationMethod soap_out_ns5__CanonicalizationMethodType


#define soap_s2_ns5__CanonicalizationMethod soap_s2ns5__CanonicalizationMethodType


#define soap_in__ns5__CanonicalizationMethod soap_in_ns5__CanonicalizationMethodType


#define SCAP_instantiate__ns5__CanonicalizationMethod SCAP_instantiate_ns5__CanonicalizationMethodType


#define soap_new__ns5__CanonicalizationMethod soap_new_ns5__CanonicalizationMethodType


#define soap_new_req__ns5__CanonicalizationMethod soap_new_req_ns5__CanonicalizationMethodType


#define soap_new_set__ns5__CanonicalizationMethod soap_new_set_ns5__CanonicalizationMethodType


#define soap_put__ns5__CanonicalizationMethod soap_put_ns5__CanonicalizationMethodType


#define soap_write__ns5__CanonicalizationMethod soap_write_ns5__CanonicalizationMethodType


#define soap_PUT__ns5__CanonicalizationMethod soap_PUT_ns5__CanonicalizationMethodType


#define soap_POST_send__ns5__CanonicalizationMethod soap_POST_send_ns5__CanonicalizationMethodType


#define soap_get__ns5__CanonicalizationMethod soap_get_ns5__CanonicalizationMethodType


#define soap_read__ns5__CanonicalizationMethod soap_read_ns5__CanonicalizationMethodType


#define soap_GET__ns5__CanonicalizationMethod soap_GET_ns5__CanonicalizationMethodType


#define soap_POST_recv__ns5__CanonicalizationMethod soap_POST_recv_ns5__CanonicalizationMethodType

#endif
/* _ns5__SignedInfo is a typedef synonym for ns5__SignedInfoType */

#ifndef SOAP_TYPE__ns5__SignedInfo_DEFINED
#define SOAP_TYPE__ns5__SignedInfo_DEFINED

#define soap_default__ns5__SignedInfo(soap, a) (a)->ns5__SignedInfoType::soap_default(soap)


#define soap_serialize__ns5__SignedInfo(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__SignedInfo2s soap_ns5__SignedInfoType2s


#define soap_out__ns5__SignedInfo soap_out_ns5__SignedInfoType


#define soap_s2_ns5__SignedInfo soap_s2ns5__SignedInfoType


#define soap_in__ns5__SignedInfo soap_in_ns5__SignedInfoType


#define SCAP_instantiate__ns5__SignedInfo SCAP_instantiate_ns5__SignedInfoType


#define soap_new__ns5__SignedInfo soap_new_ns5__SignedInfoType


#define soap_new_req__ns5__SignedInfo soap_new_req_ns5__SignedInfoType


#define soap_new_set__ns5__SignedInfo soap_new_set_ns5__SignedInfoType


#define soap_put__ns5__SignedInfo soap_put_ns5__SignedInfoType


#define soap_write__ns5__SignedInfo soap_write_ns5__SignedInfoType


#define soap_PUT__ns5__SignedInfo soap_PUT_ns5__SignedInfoType


#define soap_POST_send__ns5__SignedInfo soap_POST_send_ns5__SignedInfoType


#define soap_get__ns5__SignedInfo soap_get_ns5__SignedInfoType


#define soap_read__ns5__SignedInfo soap_read_ns5__SignedInfoType


#define soap_GET__ns5__SignedInfo soap_GET_ns5__SignedInfoType


#define soap_POST_recv__ns5__SignedInfo soap_POST_recv_ns5__SignedInfoType

#endif
/* _ns5__Signature is a typedef synonym for ns5__SignatureType */

#ifndef SOAP_TYPE__ns5__Signature_DEFINED
#define SOAP_TYPE__ns5__Signature_DEFINED

#define soap_default__ns5__Signature(soap, a) (a)->ns5__SignatureType::soap_default(soap)


#define soap_serialize__ns5__Signature(soap, a) (a)->soap_serialize(soap)


#define soap__ns5__Signature2s soap_ns5__SignatureType2s


#define soap_out__ns5__Signature soap_out_ns5__SignatureType


#define soap_s2_ns5__Signature soap_s2ns5__SignatureType


#define soap_in__ns5__Signature soap_in_ns5__SignatureType


#define SCAP_instantiate__ns5__Signature SCAP_instantiate_ns5__SignatureType


#define soap_new__ns5__Signature soap_new_ns5__SignatureType


#define soap_new_req__ns5__Signature soap_new_req_ns5__SignatureType


#define soap_new_set__ns5__Signature soap_new_set_ns5__SignatureType


#define soap_put__ns5__Signature soap_put_ns5__SignatureType


#define soap_write__ns5__Signature soap_write_ns5__SignatureType


#define soap_PUT__ns5__Signature soap_PUT_ns5__SignatureType


#define soap_POST_send__ns5__Signature soap_POST_send_ns5__SignatureType


#define soap_get__ns5__Signature soap_get_ns5__SignatureType


#define soap_read__ns5__Signature soap_read_ns5__SignatureType


#define soap_GET__ns5__Signature soap_GET_ns5__SignatureType


#define soap_POST_recv__ns5__Signature soap_POST_recv_ns5__SignatureType

#endif
/* _ns2__SingleAttributeResponse is a typedef synonym for ns2__SingleAttributeResponseType */

#ifndef SOAP_TYPE__ns2__SingleAttributeResponse_DEFINED
#define SOAP_TYPE__ns2__SingleAttributeResponse_DEFINED

#define soap_default__ns2__SingleAttributeResponse(soap, a) (a)->ns2__SingleAttributeResponseType::soap_default(soap)


#define soap_serialize__ns2__SingleAttributeResponse(soap, a) (a)->soap_serialize(soap)


#define soap__ns2__SingleAttributeResponse2s soap_ns2__SingleAttributeResponseType2s


#define soap_out__ns2__SingleAttributeResponse soap_out_ns2__SingleAttributeResponseType


#define soap_s2_ns2__SingleAttributeResponse soap_s2ns2__SingleAttributeResponseType


#define soap_in__ns2__SingleAttributeResponse soap_in_ns2__SingleAttributeResponseType


#define SCAP_instantiate__ns2__SingleAttributeResponse SCAP_instantiate_ns2__SingleAttributeResponseType


#define soap_new__ns2__SingleAttributeResponse soap_new_ns2__SingleAttributeResponseType


#define soap_new_req__ns2__SingleAttributeResponse soap_new_req_ns2__SingleAttributeResponseType


#define soap_new_set__ns2__SingleAttributeResponse soap_new_set_ns2__SingleAttributeResponseType


#define soap_put__ns2__SingleAttributeResponse soap_put_ns2__SingleAttributeResponseType


#define soap_write__ns2__SingleAttributeResponse soap_write_ns2__SingleAttributeResponseType


#define soap_PUT__ns2__SingleAttributeResponse soap_PUT_ns2__SingleAttributeResponseType


#define soap_POST_send__ns2__SingleAttributeResponse soap_POST_send_ns2__SingleAttributeResponseType


#define soap_get__ns2__SingleAttributeResponse soap_get_ns2__SingleAttributeResponseType


#define soap_read__ns2__SingleAttributeResponse soap_read_ns2__SingleAttributeResponseType


#define soap_GET__ns2__SingleAttributeResponse soap_GET_ns2__SingleAttributeResponseType


#define soap_POST_recv__ns2__SingleAttributeResponse soap_POST_recv_ns2__SingleAttributeResponseType

#endif
/* _ns2__PSAAttributeRequest is a typedef synonym for ns2__PSAAttributeRequestType */

#ifndef SOAP_TYPE__ns2__PSAAttributeRequest_DEFINED
#define SOAP_TYPE__ns2__PSAAttributeRequest_DEFINED

#define soap_default__ns2__PSAAttributeRequest(soap, a) (a)->ns2__PSAAttributeRequestType::soap_default(soap)


#define soap_serialize__ns2__PSAAttributeRequest(soap, a) (a)->soap_serialize(soap)


#define soap__ns2__PSAAttributeRequest2s soap_ns2__PSAAttributeRequestType2s


#define soap_out__ns2__PSAAttributeRequest soap_out_ns2__PSAAttributeRequestType


#define soap_s2_ns2__PSAAttributeRequest soap_s2ns2__PSAAttributeRequestType


#define soap_in__ns2__PSAAttributeRequest soap_in_ns2__PSAAttributeRequestType


#define SCAP_instantiate__ns2__PSAAttributeRequest SCAP_instantiate_ns2__PSAAttributeRequestType


#define soap_new__ns2__PSAAttributeRequest soap_new_ns2__PSAAttributeRequestType


#define soap_new_req__ns2__PSAAttributeRequest soap_new_req_ns2__PSAAttributeRequestType


#define soap_new_set__ns2__PSAAttributeRequest soap_new_set_ns2__PSAAttributeRequestType


#define soap_put__ns2__PSAAttributeRequest soap_put_ns2__PSAAttributeRequestType


#define soap_write__ns2__PSAAttributeRequest soap_write_ns2__PSAAttributeRequestType


#define soap_PUT__ns2__PSAAttributeRequest soap_PUT_ns2__PSAAttributeRequestType


#define soap_POST_send__ns2__PSAAttributeRequest soap_POST_send_ns2__PSAAttributeRequestType


#define soap_get__ns2__PSAAttributeRequest soap_get_ns2__PSAAttributeRequestType


#define soap_read__ns2__PSAAttributeRequest soap_read_ns2__PSAAttributeRequestType


#define soap_GET__ns2__PSAAttributeRequest soap_GET_ns2__PSAAttributeRequestType


#define soap_POST_recv__ns2__PSAAttributeRequest soap_POST_recv_ns2__PSAAttributeRequestType

#endif
/* _ns2__AttributeResponse is a typedef synonym for ns2__AttributeResponseType */

#ifndef SOAP_TYPE__ns2__AttributeResponse_DEFINED
#define SOAP_TYPE__ns2__AttributeResponse_DEFINED

#define soap_default__ns2__AttributeResponse(soap, a) (a)->ns2__AttributeResponseType::soap_default(soap)


#define soap_serialize__ns2__AttributeResponse(soap, a) (a)->soap_serialize(soap)


#define soap__ns2__AttributeResponse2s soap_ns2__AttributeResponseType2s


#define soap_out__ns2__AttributeResponse soap_out_ns2__AttributeResponseType


#define soap_s2_ns2__AttributeResponse soap_s2ns2__AttributeResponseType


#define soap_in__ns2__AttributeResponse soap_in_ns2__AttributeResponseType


#define SCAP_instantiate__ns2__AttributeResponse SCAP_instantiate_ns2__AttributeResponseType


#define soap_new__ns2__AttributeResponse soap_new_ns2__AttributeResponseType


#define soap_new_req__ns2__AttributeResponse soap_new_req_ns2__AttributeResponseType


#define soap_new_set__ns2__AttributeResponse soap_new_set_ns2__AttributeResponseType


#define soap_put__ns2__AttributeResponse soap_put_ns2__AttributeResponseType


#define soap_write__ns2__AttributeResponse soap_write_ns2__AttributeResponseType


#define soap_PUT__ns2__AttributeResponse soap_PUT_ns2__AttributeResponseType


#define soap_POST_send__ns2__AttributeResponse soap_POST_send_ns2__AttributeResponseType


#define soap_get__ns2__AttributeResponse soap_get_ns2__AttributeResponseType


#define soap_read__ns2__AttributeResponse soap_read_ns2__AttributeResponseType


#define soap_GET__ns2__AttributeResponse soap_GET_ns2__AttributeResponseType


#define soap_POST_recv__ns2__AttributeResponse soap_POST_recv_ns2__AttributeResponseType

#endif
/* _ns2__AttributeRequest is a typedef synonym for ns2__AttributeRequestType */

#ifndef SOAP_TYPE__ns2__AttributeRequest_DEFINED
#define SOAP_TYPE__ns2__AttributeRequest_DEFINED

#define soap_default__ns2__AttributeRequest(soap, a) (a)->ns2__AttributeRequestType::soap_default(soap)


#define soap_serialize__ns2__AttributeRequest(soap, a) (a)->soap_serialize(soap)


#define soap__ns2__AttributeRequest2s soap_ns2__AttributeRequestType2s


#define soap_out__ns2__AttributeRequest soap_out_ns2__AttributeRequestType


#define soap_s2_ns2__AttributeRequest soap_s2ns2__AttributeRequestType


#define soap_in__ns2__AttributeRequest soap_in_ns2__AttributeRequestType


#define SCAP_instantiate__ns2__AttributeRequest SCAP_instantiate_ns2__AttributeRequestType


#define soap_new__ns2__AttributeRequest soap_new_ns2__AttributeRequestType


#define soap_new_req__ns2__AttributeRequest soap_new_req_ns2__AttributeRequestType


#define soap_new_set__ns2__AttributeRequest soap_new_set_ns2__AttributeRequestType


#define soap_put__ns2__AttributeRequest soap_put_ns2__AttributeRequestType


#define soap_write__ns2__AttributeRequest soap_write_ns2__AttributeRequestType


#define soap_PUT__ns2__AttributeRequest soap_PUT_ns2__AttributeRequestType


#define soap_POST_send__ns2__AttributeRequest soap_POST_send_ns2__AttributeRequestType


#define soap_get__ns2__AttributeRequest soap_get_ns2__AttributeRequestType


#define soap_read__ns2__AttributeRequest soap_read_ns2__AttributeRequestType


#define soap_GET__ns2__AttributeRequest soap_GET_ns2__AttributeRequestType


#define soap_POST_recv__ns2__AttributeRequest soap_POST_recv_ns2__AttributeRequestType

#endif

#ifndef SOAP_TYPE_ns7__SVGType_DEFINED
#define SOAP_TYPE_ns7__SVGType_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_ns7__SVGType(struct soap*, xsd__base64Binary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns7__SVGType(struct soap*, const xsd__base64Binary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SVGType(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns7__SVGType2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_ns7__SVGType(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns7__SVGType(struct soap*, const char*, xsd__base64Binary *);

#define SCAP_instantiate_ns7__SVGType SCAP_instantiate_xsd__base64Binary


#define soap_new_ns7__SVGType soap_new_xsd__base64Binary


#define soap_new_req_ns7__SVGType soap_new_req_xsd__base64Binary


#define soap_new_set_ns7__SVGType soap_new_set_xsd__base64Binary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns7__SVGType(struct soap*, const xsd__base64Binary *, const char*, const char*);

inline int soap_write_ns7__SVGType(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns7__SVGType(soap, p), 0) || soap_put_ns7__SVGType(soap, p, "ns7:SVGType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SVGType(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns7__SVGType(soap, p), 0) || soap_put_ns7__SVGType(soap, p, "ns7:SVGType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SVGType(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns7__SVGType(soap, p), 0) || soap_put_ns7__SVGType(soap, p, "ns7:SVGType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_ns7__SVGType(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_ns7__SVGType(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	soap_default_ns7__SVGType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns7__SVGType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SVGType(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SVGType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SVGType(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_ns7__SVGType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ByNameType_DEFINED
#define SOAP_TYPE_ns6__ByNameType_DEFINED

inline void soap_default_ns6__ByNameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__ByNameType(struct soap*, const std::string *);

#define soap_ns6__ByNameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ByNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns6__ByNameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__ByNameType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns6__ByNameType SCAP_instantiate_std__string


#define soap_new_ns6__ByNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__ByNameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns6__ByNameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__ByNameType(soap, p, "ns6:ByNameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__ByNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns6__ByNameType(soap, p, "ns6:ByNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ByNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns6__ByNameType(soap, p, "ns6:ByNameType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__ByNameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns6__ByNameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__ByNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ByNameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ByNameType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ByNameType(struct soap *soap, std::string *p)
{
	if (soap_read_ns6__ByNameType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* ns6__NumberType is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_ns6__NumberType_DEFINED
#define SOAP_TYPE_ns6__NumberType_DEFINED

#define soap_default_ns6__NumberType soap_default_xsd__integer


#define soap_serialize_ns6__NumberType soap_serialize_xsd__integer


#define soap_ns6__NumberType2s(soap, a) ((a).c_str())

#define soap_out_ns6__NumberType soap_out_xsd__integer


#define soap_s2ns6__NumberType(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")

#define soap_in_ns6__NumberType soap_in_xsd__integer


#define SCAP_instantiate_ns6__NumberType SCAP_instantiate_xsd__integer


#define soap_new_ns6__NumberType soap_new_xsd__integer


#define soap_put_ns6__NumberType soap_put_xsd__integer


#define soap_write_ns6__NumberType soap_write_xsd__integer


#define soap_PUT_ns6__NumberType soap_PUT_xsd__integer


#define soap_POST_send_ns6__NumberType soap_POST_send_xsd__integer


#define soap_get_ns6__NumberType soap_get_xsd__integer


#define soap_read_ns6__NumberType soap_read_xsd__integer


#define soap_GET_ns6__NumberType soap_GET_xsd__integer


#define soap_POST_recv_ns6__NumberType soap_POST_recv_xsd__integer

#endif

#ifndef SOAP_TYPE_ns6__IssuerType_DEFINED
#define SOAP_TYPE_ns6__IssuerType_DEFINED

inline void soap_default_ns6__IssuerType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__IssuerType(struct soap*, const std::string *);

#define soap_ns6__IssuerType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__IssuerType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns6__IssuerType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns6__IssuerType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns6__IssuerType SCAP_instantiate_std__string


#define soap_new_ns6__IssuerType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__IssuerType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns6__IssuerType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns6__IssuerType(soap, p, "ns6:IssuerType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns6__IssuerType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns6__IssuerType(soap, p, "ns6:IssuerType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__IssuerType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns6__IssuerType(soap, p, "ns6:IssuerType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns6__IssuerType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns6__IssuerType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns6__IssuerType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__IssuerType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__IssuerType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__IssuerType(struct soap *soap, std::string *p)
{
	if (soap_read_ns6__IssuerType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__EncapsulatedTimeStampType_DEFINED
#define SOAP_TYPE_ns6__EncapsulatedTimeStampType_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_ns6__EncapsulatedTimeStampType(struct soap*, xsd__base64Binary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns6__EncapsulatedTimeStampType(struct soap*, const xsd__base64Binary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__EncapsulatedTimeStampType(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns6__EncapsulatedTimeStampType2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_ns6__EncapsulatedTimeStampType(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns6__EncapsulatedTimeStampType(struct soap*, const char*, xsd__base64Binary *);

#define SCAP_instantiate_ns6__EncapsulatedTimeStampType SCAP_instantiate_xsd__base64Binary


#define soap_new_ns6__EncapsulatedTimeStampType soap_new_xsd__base64Binary


#define soap_new_req_ns6__EncapsulatedTimeStampType soap_new_req_xsd__base64Binary


#define soap_new_set_ns6__EncapsulatedTimeStampType soap_new_set_xsd__base64Binary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns6__EncapsulatedTimeStampType(struct soap*, const xsd__base64Binary *, const char*, const char*);

inline int soap_write_ns6__EncapsulatedTimeStampType(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns6__EncapsulatedTimeStampType(soap, p), 0) || soap_put_ns6__EncapsulatedTimeStampType(soap, p, "ns6:EncapsulatedTimeStampType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__EncapsulatedTimeStampType(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns6__EncapsulatedTimeStampType(soap, p), 0) || soap_put_ns6__EncapsulatedTimeStampType(soap, p, "ns6:EncapsulatedTimeStampType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__EncapsulatedTimeStampType(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns6__EncapsulatedTimeStampType(soap, p), 0) || soap_put_ns6__EncapsulatedTimeStampType(soap, p, "ns6:EncapsulatedTimeStampType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_ns6__EncapsulatedTimeStampType(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_ns6__EncapsulatedTimeStampType(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	soap_default_ns6__EncapsulatedTimeStampType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns6__EncapsulatedTimeStampType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__EncapsulatedTimeStampType(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__EncapsulatedTimeStampType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__EncapsulatedTimeStampType(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_ns6__EncapsulatedTimeStampType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__ResponseCodeMessage_DEFINED
#define SOAP_TYPE_ns4__ResponseCodeMessage_DEFINED

inline void soap_default_ns4__ResponseCodeMessage(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ResponseCodeMessage(struct soap*, const std::string *);

#define soap_ns4__ResponseCodeMessage2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ResponseCodeMessage(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ResponseCodeMessage(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 1024, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ResponseCodeMessage(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__ResponseCodeMessage SCAP_instantiate_std__string


#define soap_new_ns4__ResponseCodeMessage soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ResponseCodeMessage(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__ResponseCodeMessage(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__ResponseCodeMessage(soap, p, "ns4:ResponseCodeMessage", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__ResponseCodeMessage(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__ResponseCodeMessage(soap, p, "ns4:ResponseCodeMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ResponseCodeMessage(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__ResponseCodeMessage(soap, p, "ns4:ResponseCodeMessage", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ResponseCodeMessage(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__ResponseCodeMessage(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__ResponseCodeMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ResponseCodeMessage(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__ResponseCodeMessage(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__ResponseCodeMessage(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__ResponseCodeMessage(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__ResponseCodeType_DEFINED
#define SOAP_TYPE_ns4__ResponseCodeType_DEFINED

inline void soap_default_ns4__ResponseCodeType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ResponseCodeType(struct soap*, const std::string *);

#define soap_ns4__ResponseCodeType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ResponseCodeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ResponseCodeType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 5, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ResponseCodeType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__ResponseCodeType SCAP_instantiate_std__string


#define soap_new_ns4__ResponseCodeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ResponseCodeType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__ResponseCodeType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__ResponseCodeType(soap, p, "ns4:ResponseCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__ResponseCodeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__ResponseCodeType(soap, p, "ns4:ResponseCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ResponseCodeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__ResponseCodeType(soap, p, "ns4:ResponseCodeType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ResponseCodeType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__ResponseCodeType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__ResponseCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ResponseCodeType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__ResponseCodeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__ResponseCodeType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__ResponseCodeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__DescriptionType_DEFINED
#define SOAP_TYPE_ns4__DescriptionType_DEFINED

inline void soap_default_ns4__DescriptionType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__DescriptionType(struct soap*, const std::string *);

#define soap_ns4__DescriptionType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__DescriptionType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__DescriptionType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__DescriptionType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__DescriptionType SCAP_instantiate_std__string


#define soap_new_ns4__DescriptionType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__DescriptionType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__DescriptionType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__DescriptionType(soap, p, "ns4:DescriptionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__DescriptionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__DescriptionType(soap, p, "ns4:DescriptionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__DescriptionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__DescriptionType(soap, p, "ns4:DescriptionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__DescriptionType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__DescriptionType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__DescriptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__DescriptionType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__DescriptionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__DescriptionType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__DescriptionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__SubAttributeValueType_DEFINED
#define SOAP_TYPE_ns4__SubAttributeValueType_DEFINED

inline void soap_default_ns4__SubAttributeValueType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SubAttributeValueType(struct soap*, const std::string *);

#define soap_ns4__SubAttributeValueType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SubAttributeValueType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__SubAttributeValueType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__SubAttributeValueType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__SubAttributeValueType SCAP_instantiate_std__string


#define soap_new_ns4__SubAttributeValueType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SubAttributeValueType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__SubAttributeValueType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__SubAttributeValueType(soap, p, "ns4:SubAttributeValueType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__SubAttributeValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__SubAttributeValueType(soap, p, "ns4:SubAttributeValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SubAttributeValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__SubAttributeValueType(soap, p, "ns4:SubAttributeValueType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__SubAttributeValueType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__SubAttributeValueType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__SubAttributeValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SubAttributeValueType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__SubAttributeValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__SubAttributeValueType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__SubAttributeValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__LegalActType_DEFINED
#define SOAP_TYPE_ns4__LegalActType_DEFINED

inline void soap_default_ns4__LegalActType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__LegalActType(struct soap*, const std::string *);

#define soap_ns4__LegalActType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__LegalActType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__LegalActType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 2048, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__LegalActType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__LegalActType SCAP_instantiate_std__string


#define soap_new_ns4__LegalActType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__LegalActType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__LegalActType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__LegalActType(soap, p, "ns4:LegalActType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__LegalActType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__LegalActType(soap, p, "ns4:LegalActType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__LegalActType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__LegalActType(soap, p, "ns4:LegalActType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__LegalActType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__LegalActType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__LegalActType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__LegalActType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__LegalActType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__LegalActType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__LegalActType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__AttributeIDType_DEFINED
#define SOAP_TYPE_ns4__AttributeIDType_DEFINED

inline void soap_default_ns4__AttributeIDType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__AttributeIDType(struct soap*, const std::string *);

#define soap_ns4__AttributeIDType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__AttributeIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__AttributeIDType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__AttributeIDType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__AttributeIDType SCAP_instantiate_std__string


#define soap_new_ns4__AttributeIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__AttributeIDType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__AttributeIDType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__AttributeIDType(soap, p, "ns4:AttributeIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__AttributeIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__AttributeIDType(soap, p, "ns4:AttributeIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__AttributeIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__AttributeIDType(soap, p, "ns4:AttributeIDType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__AttributeIDType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__AttributeIDType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__AttributeIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__AttributeIDType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__AttributeIDType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__AttributeIDType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__AttributeIDType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__ExtraIDValueType_DEFINED
#define SOAP_TYPE_ns4__ExtraIDValueType_DEFINED

inline void soap_default_ns4__ExtraIDValueType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ExtraIDValueType(struct soap*, const std::string *);

#define soap_ns4__ExtraIDValueType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ExtraIDValueType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ExtraIDValueType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ExtraIDValueType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__ExtraIDValueType SCAP_instantiate_std__string


#define soap_new_ns4__ExtraIDValueType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ExtraIDValueType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__ExtraIDValueType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__ExtraIDValueType(soap, p, "ns4:ExtraIDValueType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__ExtraIDValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__ExtraIDValueType(soap, p, "ns4:ExtraIDValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ExtraIDValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__ExtraIDValueType(soap, p, "ns4:ExtraIDValueType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ExtraIDValueType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__ExtraIDValueType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__ExtraIDValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ExtraIDValueType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__ExtraIDValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__ExtraIDValueType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__ExtraIDValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__CompanyNameType_DEFINED
#define SOAP_TYPE_ns4__CompanyNameType_DEFINED

inline void soap_default_ns4__CompanyNameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__CompanyNameType(struct soap*, const std::string *);

#define soap_ns4__CompanyNameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CompanyNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__CompanyNameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__CompanyNameType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__CompanyNameType SCAP_instantiate_std__string


#define soap_new_ns4__CompanyNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__CompanyNameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__CompanyNameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__CompanyNameType(soap, p, "ns4:CompanyNameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__CompanyNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__CompanyNameType(soap, p, "ns4:CompanyNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__CompanyNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__CompanyNameType(soap, p, "ns4:CompanyNameType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__CompanyNameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__CompanyNameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__CompanyNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__CompanyNameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__CompanyNameType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__CompanyNameType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__CompanyNameType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__NIPCType_DEFINED
#define SOAP_TYPE_ns4__NIPCType_DEFINED

inline void soap_default_ns4__NIPCType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NIPCType(struct soap*, const std::string *);

#define soap_ns4__NIPCType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NIPCType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__NIPCType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__NIPCType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__NIPCType SCAP_instantiate_std__string


#define soap_new_ns4__NIPCType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NIPCType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__NIPCType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__NIPCType(soap, p, "ns4:NIPCType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__NIPCType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__NIPCType(soap, p, "ns4:NIPCType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__NIPCType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__NIPCType(soap, p, "ns4:NIPCType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__NIPCType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__NIPCType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__NIPCType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__NIPCType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__NIPCType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__NIPCType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__NIPCType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__NICType_DEFINED
#define SOAP_TYPE_ns4__NICType_DEFINED

inline void soap_default_ns4__NICType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NICType(struct soap*, const std::string *);

#define soap_ns4__NICType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NICType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__NICType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__NICType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__NICType SCAP_instantiate_std__string


#define soap_new_ns4__NICType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NICType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__NICType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__NICType(soap, p, "ns4:NICType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__NICType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__NICType(soap, p, "ns4:NICType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__NICType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__NICType(soap, p, "ns4:NICType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__NICType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__NICType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__NICType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__NICType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__NICType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__NICType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__NICType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* ns4__DateType is a typedef synonym for xsd__date */

#ifndef SOAP_TYPE_ns4__DateType_DEFINED
#define SOAP_TYPE_ns4__DateType_DEFINED

#define soap_default_ns4__DateType soap_default_xsd__date


#define soap_serialize_ns4__DateType soap_serialize_xsd__date


#define soap_ns4__DateType2s(soap, a) ((a).c_str())

#define soap_out_ns4__DateType soap_out_xsd__date


#define soap_s2ns4__DateType(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")

#define soap_in_ns4__DateType soap_in_xsd__date


#define SCAP_instantiate_ns4__DateType SCAP_instantiate_xsd__date


#define soap_new_ns4__DateType soap_new_xsd__date


#define soap_put_ns4__DateType soap_put_xsd__date


#define soap_write_ns4__DateType soap_write_xsd__date


#define soap_PUT_ns4__DateType soap_PUT_xsd__date


#define soap_POST_send_ns4__DateType soap_POST_send_xsd__date


#define soap_get_ns4__DateType soap_get_xsd__date


#define soap_read_ns4__DateType soap_read_xsd__date


#define soap_GET_ns4__DateType soap_GET_xsd__date


#define soap_POST_recv_ns4__DateType soap_POST_recv_xsd__date

#endif
/* ns4__ValidityType is a typedef synonym for xsd__date */

#ifndef SOAP_TYPE_ns4__ValidityType_DEFINED
#define SOAP_TYPE_ns4__ValidityType_DEFINED

#define soap_default_ns4__ValidityType soap_default_xsd__date


#define soap_serialize_ns4__ValidityType soap_serialize_xsd__date


#define soap_ns4__ValidityType2s(soap, a) ((a).c_str())

#define soap_out_ns4__ValidityType soap_out_xsd__date


#define soap_s2ns4__ValidityType(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")

#define soap_in_ns4__ValidityType soap_in_xsd__date


#define SCAP_instantiate_ns4__ValidityType SCAP_instantiate_xsd__date


#define soap_new_ns4__ValidityType soap_new_xsd__date


#define soap_put_ns4__ValidityType soap_put_xsd__date


#define soap_write_ns4__ValidityType soap_write_xsd__date


#define soap_PUT_ns4__ValidityType soap_PUT_xsd__date


#define soap_POST_send_ns4__ValidityType soap_POST_send_xsd__date


#define soap_get_ns4__ValidityType soap_get_xsd__date


#define soap_read_ns4__ValidityType soap_read_xsd__date


#define soap_GET_ns4__ValidityType soap_GET_xsd__date


#define soap_POST_recv_ns4__ValidityType soap_POST_recv_xsd__date

#endif

#ifndef SOAP_TYPE_ns4__NameType_DEFINED
#define SOAP_TYPE_ns4__NameType_DEFINED

inline void soap_default_ns4__NameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NameType(struct soap*, const std::string *);

#define soap_ns4__NameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__NameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 255, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__NameType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__NameType SCAP_instantiate_std__string


#define soap_new_ns4__NameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__NameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__NameType(soap, p, "ns4:NameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__NameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__NameType(soap, p, "ns4:NameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__NameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__NameType(soap, p, "ns4:NameType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__NameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__NameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__NameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__NameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__NameType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__NameType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__NameType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__ProcessIDType_DEFINED
#define SOAP_TYPE_ns4__ProcessIDType_DEFINED

inline void soap_default_ns4__ProcessIDType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ProcessIDType(struct soap*, const std::string *);

#define soap_ns4__ProcessIDType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ProcessIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ProcessIDType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 40, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ProcessIDType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns4__ProcessIDType SCAP_instantiate_std__string


#define soap_new_ns4__ProcessIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ProcessIDType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns4__ProcessIDType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__ProcessIDType(soap, p, "ns4:ProcessIDType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__ProcessIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__ProcessIDType(soap, p, "ns4:ProcessIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ProcessIDType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__ProcessIDType(soap, p, "ns4:ProcessIDType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ProcessIDType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns4__ProcessIDType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__ProcessIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ProcessIDType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__ProcessIDType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__ProcessIDType(struct soap *soap, std::string *p)
{
	if (soap_read_ns4__ProcessIDType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* ns5__X509SerialNumberType is a typedef synonym for xsd__integer */

#ifndef SOAP_TYPE_ns5__X509SerialNumberType_DEFINED
#define SOAP_TYPE_ns5__X509SerialNumberType_DEFINED

#define soap_default_ns5__X509SerialNumberType soap_default_xsd__integer


#define soap_serialize_ns5__X509SerialNumberType soap_serialize_xsd__integer


#define soap_ns5__X509SerialNumberType2s(soap, a) ((a).c_str())

#define soap_out_ns5__X509SerialNumberType soap_out_xsd__integer


#define soap_s2ns5__X509SerialNumberType(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")

#define soap_in_ns5__X509SerialNumberType soap_in_xsd__integer


#define SCAP_instantiate_ns5__X509SerialNumberType SCAP_instantiate_xsd__integer


#define soap_new_ns5__X509SerialNumberType soap_new_xsd__integer


#define soap_put_ns5__X509SerialNumberType soap_put_xsd__integer


#define soap_write_ns5__X509SerialNumberType soap_write_xsd__integer


#define soap_PUT_ns5__X509SerialNumberType soap_PUT_xsd__integer


#define soap_POST_send_ns5__X509SerialNumberType soap_POST_send_xsd__integer


#define soap_get_ns5__X509SerialNumberType soap_get_xsd__integer


#define soap_read_ns5__X509SerialNumberType soap_read_xsd__integer


#define soap_GET_ns5__X509SerialNumberType soap_GET_xsd__integer


#define soap_POST_recv_ns5__X509SerialNumberType soap_POST_recv_xsd__integer

#endif

#ifndef SOAP_TYPE_ns5__X509IssuerNameType_DEFINED
#define SOAP_TYPE_ns5__X509IssuerNameType_DEFINED

inline void soap_default_ns5__X509IssuerNameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns5__X509IssuerNameType(struct soap*, const std::string *);

#define soap_ns5__X509IssuerNameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__X509IssuerNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns5__X509IssuerNameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns5__X509IssuerNameType(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_ns5__X509IssuerNameType SCAP_instantiate_std__string


#define soap_new_ns5__X509IssuerNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__X509IssuerNameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns5__X509IssuerNameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns5__X509IssuerNameType(soap, p, "ns5:X509IssuerNameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns5__X509IssuerNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns5__X509IssuerNameType(soap, p, "ns5:X509IssuerNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__X509IssuerNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns5__X509IssuerNameType(soap, p, "ns5:X509IssuerNameType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns5__X509IssuerNameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns5__X509IssuerNameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns5__X509IssuerNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__X509IssuerNameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__X509IssuerNameType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__X509IssuerNameType(struct soap *soap, std::string *p)
{
	if (soap_read_ns5__X509IssuerNameType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SignatureResponse_DEFINED
#define SOAP_TYPE__ns1__SignatureResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SignatureResponse(struct soap*, const char*, int, const _ns1__SignatureResponse *, const char*);
SOAP_FMAC3 _ns1__SignatureResponse * SOAP_FMAC4 soap_in__ns1__SignatureResponse(struct soap*, const char*, _ns1__SignatureResponse *, const char*);
SOAP_FMAC1 _ns1__SignatureResponse * SOAP_FMAC2 SCAP_instantiate__ns1__SignatureResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SignatureResponse * soap_new__ns1__SignatureResponse(struct soap *soap, int n = -1)
{
	return SCAP_instantiate__ns1__SignatureResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SignatureResponse * soap_new_req__ns1__SignatureResponse(
	struct soap *soap,
	ns1__Status *Status)
{
	_ns1__SignatureResponse *_p = soap_new__ns1__SignatureResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SignatureResponse::Status = Status;
	}
	return _p;
}

inline _ns1__SignatureResponse * soap_new_set__ns1__SignatureResponse(
	struct soap *soap,
	ns1__Status *Status,
	std::string *ProcessId,
	xsd__base64Binary *DocumentSignature)
{
	_ns1__SignatureResponse *_p = soap_new__ns1__SignatureResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SignatureResponse::Status = Status;
		_p->_ns1__SignatureResponse::ProcessId = ProcessId;
		_p->_ns1__SignatureResponse::DocumentSignature = DocumentSignature;
	}
	return _p;
}

inline int soap_write__ns1__SignatureResponse(struct soap *soap, _ns1__SignatureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignatureResponse", p->soap_type() == SOAP_TYPE__ns1__SignatureResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SignatureResponse(struct soap *soap, const char *URL, _ns1__SignatureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignatureResponse", p->soap_type() == SOAP_TYPE__ns1__SignatureResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SignatureResponse(struct soap *soap, const char *URL, _ns1__SignatureResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignatureResponse", p->soap_type() == SOAP_TYPE__ns1__SignatureResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SignatureResponse * SOAP_FMAC4 soap_get__ns1__SignatureResponse(struct soap*, _ns1__SignatureResponse *, const char*, const char*);

inline int soap_read__ns1__SignatureResponse(struct soap *soap, _ns1__SignatureResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SignatureResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SignatureResponse(struct soap *soap, const char *URL, _ns1__SignatureResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SignatureResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SignatureResponse(struct soap *soap, _ns1__SignatureResponse *p)
{
	if (soap_read__ns1__SignatureResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SignatureRequest_DEFINED
#define SOAP_TYPE__ns1__SignatureRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SignatureRequest(struct soap*, const char*, int, const _ns1__SignatureRequest *, const char*);
SOAP_FMAC3 _ns1__SignatureRequest * SOAP_FMAC4 soap_in__ns1__SignatureRequest(struct soap*, const char*, _ns1__SignatureRequest *, const char*);
SOAP_FMAC1 _ns1__SignatureRequest * SOAP_FMAC2 SCAP_instantiate__ns1__SignatureRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SignatureRequest * soap_new__ns1__SignatureRequest(struct soap *soap, int n = -1)
{
	return SCAP_instantiate__ns1__SignatureRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__SignatureRequest * soap_new_req__ns1__SignatureRequest(
	struct soap *soap,
	const std::string& AppId,
	const std::string& ProcessId,
	const xsd__base64Binary& Hash,
	ns1__TransactionType *Transaction)
{
	_ns1__SignatureRequest *_p = soap_new__ns1__SignatureRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SignatureRequest::AppId = AppId;
		_p->_ns1__SignatureRequest::ProcessId = ProcessId;
		_p->_ns1__SignatureRequest::Hash = Hash;
		_p->_ns1__SignatureRequest::Transaction = Transaction;
	}
	return _p;
}

inline _ns1__SignatureRequest * soap_new_set__ns1__SignatureRequest(
	struct soap *soap,
	const std::string& AppId,
	const std::string& ProcessId,
	std::string *TOTP,
	const xsd__base64Binary& Hash,
	ns1__TransactionType *Transaction)
{
	_ns1__SignatureRequest *_p = soap_new__ns1__SignatureRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SignatureRequest::AppId = AppId;
		_p->_ns1__SignatureRequest::ProcessId = ProcessId;
		_p->_ns1__SignatureRequest::TOTP = TOTP;
		_p->_ns1__SignatureRequest::Hash = Hash;
		_p->_ns1__SignatureRequest::Transaction = Transaction;
	}
	return _p;
}

inline int soap_write__ns1__SignatureRequest(struct soap *soap, _ns1__SignatureRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignatureRequest", p->soap_type() == SOAP_TYPE__ns1__SignatureRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SignatureRequest(struct soap *soap, const char *URL, _ns1__SignatureRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignatureRequest", p->soap_type() == SOAP_TYPE__ns1__SignatureRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SignatureRequest(struct soap *soap, const char *URL, _ns1__SignatureRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignatureRequest", p->soap_type() == SOAP_TYPE__ns1__SignatureRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SignatureRequest * SOAP_FMAC4 soap_get__ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest *, const char*, const char*);

inline int soap_read__ns1__SignatureRequest(struct soap *soap, _ns1__SignatureRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SignatureRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SignatureRequest(struct soap *soap, const char *URL, _ns1__SignatureRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SignatureRequest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SignatureRequest(struct soap *soap, _ns1__SignatureRequest *p)
{
	if (soap_read__ns1__SignatureRequest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AuthorizationResponse_DEFINED
#define SOAP_TYPE__ns1__AuthorizationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AuthorizationResponse(struct soap*, const char*, int, const _ns1__AuthorizationResponse *, const char*);
SOAP_FMAC3 _ns1__AuthorizationResponse * SOAP_FMAC4 soap_in__ns1__AuthorizationResponse(struct soap*, const char*, _ns1__AuthorizationResponse *, const char*);
SOAP_FMAC1 _ns1__AuthorizationResponse * SOAP_FMAC2 SCAP_instantiate__ns1__AuthorizationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AuthorizationResponse * soap_new__ns1__AuthorizationResponse(struct soap *soap, int n = -1)
{
	return SCAP_instantiate__ns1__AuthorizationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AuthorizationResponse * soap_new_req__ns1__AuthorizationResponse(
	struct soap *soap,
	ns1__Status *Status)
{
	_ns1__AuthorizationResponse *_p = soap_new__ns1__AuthorizationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AuthorizationResponse::Status = Status;
	}
	return _p;
}

inline _ns1__AuthorizationResponse * soap_new_set__ns1__AuthorizationResponse(
	struct soap *soap,
	ns1__Status *Status,
	std::string *ProcessId,
	ns1__TransactionTypeList *TransactionList)
{
	_ns1__AuthorizationResponse *_p = soap_new__ns1__AuthorizationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AuthorizationResponse::Status = Status;
		_p->_ns1__AuthorizationResponse::ProcessId = ProcessId;
		_p->_ns1__AuthorizationResponse::TransactionList = TransactionList;
	}
	return _p;
}

inline int soap_write__ns1__AuthorizationResponse(struct soap *soap, _ns1__AuthorizationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AuthorizationResponse", p->soap_type() == SOAP_TYPE__ns1__AuthorizationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AuthorizationResponse(struct soap *soap, const char *URL, _ns1__AuthorizationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AuthorizationResponse", p->soap_type() == SOAP_TYPE__ns1__AuthorizationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AuthorizationResponse(struct soap *soap, const char *URL, _ns1__AuthorizationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AuthorizationResponse", p->soap_type() == SOAP_TYPE__ns1__AuthorizationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AuthorizationResponse * SOAP_FMAC4 soap_get__ns1__AuthorizationResponse(struct soap*, _ns1__AuthorizationResponse *, const char*, const char*);

inline int soap_read__ns1__AuthorizationResponse(struct soap *soap, _ns1__AuthorizationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AuthorizationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AuthorizationResponse(struct soap *soap, const char *URL, _ns1__AuthorizationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AuthorizationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AuthorizationResponse(struct soap *soap, _ns1__AuthorizationResponse *p)
{
	if (soap_read__ns1__AuthorizationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AuthorizationRequest_DEFINED
#define SOAP_TYPE__ns1__AuthorizationRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AuthorizationRequest(struct soap*, const char*, int, const _ns1__AuthorizationRequest *, const char*);
SOAP_FMAC3 _ns1__AuthorizationRequest * SOAP_FMAC4 soap_in__ns1__AuthorizationRequest(struct soap*, const char*, _ns1__AuthorizationRequest *, const char*);
SOAP_FMAC1 _ns1__AuthorizationRequest * SOAP_FMAC2 SCAP_instantiate__ns1__AuthorizationRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AuthorizationRequest * soap_new__ns1__AuthorizationRequest(struct soap *soap, int n = -1)
{
	return SCAP_instantiate__ns1__AuthorizationRequest(soap, n, NULL, NULL, NULL);
}

inline _ns1__AuthorizationRequest * soap_new_req__ns1__AuthorizationRequest(
	struct soap *soap,
	const std::string& AppId,
	const std::string& TOTP,
	const xsd__base64Binary& DocumentSignature,
	const xsd__base64Binary& DocumentHash,
	const std::string& SignatureCertificate,
	ns1__PersonalData *PersonalData,
	ns1__AttributeListType *AttributeList)
{
	_ns1__AuthorizationRequest *_p = soap_new__ns1__AuthorizationRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AuthorizationRequest::AppId = AppId;
		_p->_ns1__AuthorizationRequest::TOTP = TOTP;
		_p->_ns1__AuthorizationRequest::DocumentSignature = DocumentSignature;
		_p->_ns1__AuthorizationRequest::DocumentHash = DocumentHash;
		_p->_ns1__AuthorizationRequest::SignatureCertificate = SignatureCertificate;
		_p->_ns1__AuthorizationRequest::PersonalData = PersonalData;
		_p->_ns1__AuthorizationRequest::AttributeList = AttributeList;
	}
	return _p;
}

inline _ns1__AuthorizationRequest * soap_new_set__ns1__AuthorizationRequest(
	struct soap *soap,
	const std::string& AppId,
	const std::string& TOTP,
	const xsd__base64Binary& DocumentSignature,
	const xsd__base64Binary& DocumentHash,
	const std::string& SignatureCertificate,
	ns1__PersonalData *PersonalData,
	ns1__AttributeListType *AttributeList)
{
	_ns1__AuthorizationRequest *_p = soap_new__ns1__AuthorizationRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AuthorizationRequest::AppId = AppId;
		_p->_ns1__AuthorizationRequest::TOTP = TOTP;
		_p->_ns1__AuthorizationRequest::DocumentSignature = DocumentSignature;
		_p->_ns1__AuthorizationRequest::DocumentHash = DocumentHash;
		_p->_ns1__AuthorizationRequest::SignatureCertificate = SignatureCertificate;
		_p->_ns1__AuthorizationRequest::PersonalData = PersonalData;
		_p->_ns1__AuthorizationRequest::AttributeList = AttributeList;
	}
	return _p;
}

inline int soap_write__ns1__AuthorizationRequest(struct soap *soap, _ns1__AuthorizationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AuthorizationRequest", p->soap_type() == SOAP_TYPE__ns1__AuthorizationRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AuthorizationRequest(struct soap *soap, const char *URL, _ns1__AuthorizationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AuthorizationRequest", p->soap_type() == SOAP_TYPE__ns1__AuthorizationRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AuthorizationRequest(struct soap *soap, const char *URL, _ns1__AuthorizationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AuthorizationRequest", p->soap_type() == SOAP_TYPE__ns1__AuthorizationRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AuthorizationRequest * SOAP_FMAC4 soap_get__ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest *, const char*, const char*);

inline int soap_read__ns1__AuthorizationRequest(struct soap *soap, _ns1__AuthorizationRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AuthorizationRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AuthorizationRequest(struct soap *soap, const char *URL, _ns1__AuthorizationRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AuthorizationRequest(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AuthorizationRequest(struct soap *soap, _ns1__AuthorizationRequest *p)
{
	if (soap_read__ns1__AuthorizationRequest(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionType_DEFINED
#define SOAP_TYPE_ns1__TransactionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionType(struct soap*, const char*, int, const ns1__TransactionType *, const char*);
SOAP_FMAC3 ns1__TransactionType * SOAP_FMAC4 soap_in_ns1__TransactionType(struct soap*, const char*, ns1__TransactionType *, const char*);
SOAP_FMAC1 ns1__TransactionType * SOAP_FMAC2 SCAP_instantiate_ns1__TransactionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionType * soap_new_ns1__TransactionType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__TransactionType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionType * soap_new_req_ns1__TransactionType(
	struct soap *soap,
	const std::string& TransactionId,
	ns1__AttributeSupplierType *AttributeSupplier,
	ns1__MainAttributeType *MainAttribute,
	const std::string& AttributeSupplierCertificateChain)
{
	ns1__TransactionType *_p = soap_new_ns1__TransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionType::TransactionId = TransactionId;
		_p->ns1__TransactionType::AttributeSupplier = AttributeSupplier;
		_p->ns1__TransactionType::MainAttribute = MainAttribute;
		_p->ns1__TransactionType::AttributeSupplierCertificateChain = AttributeSupplierCertificateChain;
	}
	return _p;
}

inline ns1__TransactionType * soap_new_set_ns1__TransactionType(
	struct soap *soap,
	const std::string& TransactionId,
	ns1__AttributeSupplierType *AttributeSupplier,
	ns1__MainAttributeType *MainAttribute,
	const std::string& AttributeSupplierCertificateChain)
{
	ns1__TransactionType *_p = soap_new_ns1__TransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionType::TransactionId = TransactionId;
		_p->ns1__TransactionType::AttributeSupplier = AttributeSupplier;
		_p->ns1__TransactionType::MainAttribute = MainAttribute;
		_p->ns1__TransactionType::AttributeSupplierCertificateChain = AttributeSupplierCertificateChain;
	}
	return _p;
}

inline int soap_write_ns1__TransactionType(struct soap *soap, ns1__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionType", p->soap_type() == SOAP_TYPE_ns1__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionType(struct soap *soap, const char *URL, ns1__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionType", p->soap_type() == SOAP_TYPE_ns1__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionType(struct soap *soap, const char *URL, ns1__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionType", p->soap_type() == SOAP_TYPE_ns1__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionType * SOAP_FMAC4 soap_get_ns1__TransactionType(struct soap*, ns1__TransactionType *, const char*, const char*);

inline int soap_read_ns1__TransactionType(struct soap *soap, ns1__TransactionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionType(struct soap *soap, const char *URL, ns1__TransactionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionType(struct soap *soap, ns1__TransactionType *p)
{
	if (soap_read_ns1__TransactionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionTypeList_DEFINED
#define SOAP_TYPE_ns1__TransactionTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionTypeList(struct soap*, const char*, int, const ns1__TransactionTypeList *, const char*);
SOAP_FMAC3 ns1__TransactionTypeList * SOAP_FMAC4 soap_in_ns1__TransactionTypeList(struct soap*, const char*, ns1__TransactionTypeList *, const char*);
SOAP_FMAC1 ns1__TransactionTypeList * SOAP_FMAC2 SCAP_instantiate_ns1__TransactionTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionTypeList * soap_new_ns1__TransactionTypeList(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__TransactionTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionTypeList * soap_new_req_ns1__TransactionTypeList(
	struct soap *soap,
	const std::vector<ns1__TransactionType *> & Transaction)
{
	ns1__TransactionTypeList *_p = soap_new_ns1__TransactionTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionTypeList::Transaction = Transaction;
	}
	return _p;
}

inline ns1__TransactionTypeList * soap_new_set_ns1__TransactionTypeList(
	struct soap *soap,
	const std::vector<ns1__TransactionType *> & Transaction)
{
	ns1__TransactionTypeList *_p = soap_new_ns1__TransactionTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionTypeList::Transaction = Transaction;
	}
	return _p;
}

inline int soap_write_ns1__TransactionTypeList(struct soap *soap, ns1__TransactionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionTypeList(struct soap *soap, const char *URL, ns1__TransactionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionTypeList(struct soap *soap, const char *URL, ns1__TransactionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionTypeList * SOAP_FMAC4 soap_get_ns1__TransactionTypeList(struct soap*, ns1__TransactionTypeList *, const char*, const char*);

inline int soap_read_ns1__TransactionTypeList(struct soap *soap, ns1__TransactionTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionTypeList(struct soap *soap, const char *URL, ns1__TransactionTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionTypeList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionTypeList(struct soap *soap, ns1__TransactionTypeList *p)
{
	if (soap_read_ns1__TransactionTypeList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Status_DEFINED
#define SOAP_TYPE_ns1__Status_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Status(struct soap*, const char*, int, const ns1__Status *, const char*);
SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_in_ns1__Status(struct soap*, const char*, ns1__Status *, const char*);
SOAP_FMAC1 ns1__Status * SOAP_FMAC2 SCAP_instantiate_ns1__Status(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Status * soap_new_ns1__Status(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__Status(soap, n, NULL, NULL, NULL);
}

inline ns1__Status * soap_new_req_ns1__Status(
	struct soap *soap,
	const std::string& Code,
	const std::string& Message)
{
	ns1__Status *_p = soap_new_ns1__Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Status::Code = Code;
		_p->ns1__Status::Message = Message;
	}
	return _p;
}

inline ns1__Status * soap_new_set_ns1__Status(
	struct soap *soap,
	const std::string& Code,
	const std::string& Message,
	std::string *Field,
	std::string *FieldValue)
{
	ns1__Status *_p = soap_new_ns1__Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Status::Code = Code;
		_p->ns1__Status::Message = Message;
		_p->ns1__Status::Field = Field;
		_p->ns1__Status::FieldValue = FieldValue;
	}
	return _p;
}

inline int soap_write_ns1__Status(struct soap *soap, ns1__Status const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Status", p->soap_type() == SOAP_TYPE_ns1__Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Status(struct soap *soap, const char *URL, ns1__Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Status", p->soap_type() == SOAP_TYPE_ns1__Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Status(struct soap *soap, const char *URL, ns1__Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Status", p->soap_type() == SOAP_TYPE_ns1__Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_get_ns1__Status(struct soap*, ns1__Status *, const char*, const char*);

inline int soap_read_ns1__Status(struct soap *soap, ns1__Status *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Status(struct soap *soap, const char *URL, ns1__Status *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Status(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Status(struct soap *soap, ns1__Status *p)
{
	if (soap_read_ns1__Status(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubAttributeType_DEFINED
#define SOAP_TYPE_ns1__SubAttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubAttributeType(struct soap*, const char*, int, const ns1__SubAttributeType *, const char*);
SOAP_FMAC3 ns1__SubAttributeType * SOAP_FMAC4 soap_in_ns1__SubAttributeType(struct soap*, const char*, ns1__SubAttributeType *, const char*);
SOAP_FMAC1 ns1__SubAttributeType * SOAP_FMAC2 SCAP_instantiate_ns1__SubAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubAttributeType * soap_new_ns1__SubAttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__SubAttributeType(soap, n, NULL, NULL, NULL);
}

inline ns1__SubAttributeType * soap_new_req_ns1__SubAttributeType(
	struct soap *soap,
	const std::string& AttributeID)
{
	ns1__SubAttributeType *_p = soap_new_ns1__SubAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubAttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline ns1__SubAttributeType * soap_new_set_ns1__SubAttributeType(
	struct soap *soap,
	const std::string& AttributeID,
	std::string *Description,
	ns1__LegalActListType *LegalActList,
	std::string *Value)
{
	ns1__SubAttributeType *_p = soap_new_ns1__SubAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubAttributeType::AttributeID = AttributeID;
		_p->ns1__SubAttributeType::Description = Description;
		_p->ns1__SubAttributeType::LegalActList = LegalActList;
		_p->ns1__SubAttributeType::Value = Value;
	}
	return _p;
}

inline int soap_write_ns1__SubAttributeType(struct soap *soap, ns1__SubAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubAttributeType", p->soap_type() == SOAP_TYPE_ns1__SubAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubAttributeType(struct soap *soap, const char *URL, ns1__SubAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubAttributeType", p->soap_type() == SOAP_TYPE_ns1__SubAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubAttributeType(struct soap *soap, const char *URL, ns1__SubAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubAttributeType", p->soap_type() == SOAP_TYPE_ns1__SubAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubAttributeType * SOAP_FMAC4 soap_get_ns1__SubAttributeType(struct soap*, ns1__SubAttributeType *, const char*, const char*);

inline int soap_read_ns1__SubAttributeType(struct soap *soap, ns1__SubAttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SubAttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubAttributeType(struct soap *soap, const char *URL, ns1__SubAttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SubAttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubAttributeType(struct soap *soap, ns1__SubAttributeType *p)
{
	if (soap_read_ns1__SubAttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubAttributeListType_DEFINED
#define SOAP_TYPE_ns1__SubAttributeListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubAttributeListType(struct soap*, const char*, int, const ns1__SubAttributeListType *, const char*);
SOAP_FMAC3 ns1__SubAttributeListType * SOAP_FMAC4 soap_in_ns1__SubAttributeListType(struct soap*, const char*, ns1__SubAttributeListType *, const char*);
SOAP_FMAC1 ns1__SubAttributeListType * SOAP_FMAC2 SCAP_instantiate_ns1__SubAttributeListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubAttributeListType * soap_new_ns1__SubAttributeListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__SubAttributeListType(soap, n, NULL, NULL, NULL);
}

inline ns1__SubAttributeListType * soap_new_req_ns1__SubAttributeListType(
	struct soap *soap,
	const std::vector<ns1__SubAttributeType *> & SubAttribute)
{
	ns1__SubAttributeListType *_p = soap_new_ns1__SubAttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubAttributeListType::SubAttribute = SubAttribute;
	}
	return _p;
}

inline ns1__SubAttributeListType * soap_new_set_ns1__SubAttributeListType(
	struct soap *soap,
	const std::vector<ns1__SubAttributeType *> & SubAttribute)
{
	ns1__SubAttributeListType *_p = soap_new_ns1__SubAttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubAttributeListType::SubAttribute = SubAttribute;
	}
	return _p;
}

inline int soap_write_ns1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubAttributeListType", p->soap_type() == SOAP_TYPE_ns1__SubAttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubAttributeListType(struct soap *soap, const char *URL, ns1__SubAttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubAttributeListType", p->soap_type() == SOAP_TYPE_ns1__SubAttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubAttributeListType(struct soap *soap, const char *URL, ns1__SubAttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubAttributeListType", p->soap_type() == SOAP_TYPE_ns1__SubAttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubAttributeListType * SOAP_FMAC4 soap_get_ns1__SubAttributeListType(struct soap*, ns1__SubAttributeListType *, const char*, const char*);

inline int soap_read_ns1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SubAttributeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubAttributeListType(struct soap *soap, const char *URL, ns1__SubAttributeListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SubAttributeListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType *p)
{
	if (soap_read_ns1__SubAttributeListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LegalActListType_DEFINED
#define SOAP_TYPE_ns1__LegalActListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LegalActListType(struct soap*, const char*, int, const ns1__LegalActListType *, const char*);
SOAP_FMAC3 ns1__LegalActListType * SOAP_FMAC4 soap_in_ns1__LegalActListType(struct soap*, const char*, ns1__LegalActListType *, const char*);
SOAP_FMAC1 ns1__LegalActListType * SOAP_FMAC2 SCAP_instantiate_ns1__LegalActListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LegalActListType * soap_new_ns1__LegalActListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__LegalActListType(soap, n, NULL, NULL, NULL);
}

inline ns1__LegalActListType * soap_new_req_ns1__LegalActListType(
	struct soap *soap,
	const std::vector<std::string> & LegalAct)
{
	ns1__LegalActListType *_p = soap_new_ns1__LegalActListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LegalActListType::LegalAct = LegalAct;
	}
	return _p;
}

inline ns1__LegalActListType * soap_new_set_ns1__LegalActListType(
	struct soap *soap,
	const std::vector<std::string> & LegalAct)
{
	ns1__LegalActListType *_p = soap_new_ns1__LegalActListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LegalActListType::LegalAct = LegalAct;
	}
	return _p;
}

inline int soap_write_ns1__LegalActListType(struct soap *soap, ns1__LegalActListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LegalActListType", p->soap_type() == SOAP_TYPE_ns1__LegalActListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LegalActListType(struct soap *soap, const char *URL, ns1__LegalActListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LegalActListType", p->soap_type() == SOAP_TYPE_ns1__LegalActListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LegalActListType(struct soap *soap, const char *URL, ns1__LegalActListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LegalActListType", p->soap_type() == SOAP_TYPE_ns1__LegalActListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LegalActListType * SOAP_FMAC4 soap_get_ns1__LegalActListType(struct soap*, ns1__LegalActListType *, const char*, const char*);

inline int soap_read_ns1__LegalActListType(struct soap *soap, ns1__LegalActListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LegalActListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LegalActListType(struct soap *soap, const char *URL, ns1__LegalActListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LegalActListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LegalActListType(struct soap *soap, ns1__LegalActListType *p)
{
	if (soap_read_ns1__LegalActListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MainAttributeType_DEFINED
#define SOAP_TYPE_ns1__MainAttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MainAttributeType(struct soap*, const char*, int, const ns1__MainAttributeType *, const char*);
SOAP_FMAC3 ns1__MainAttributeType * SOAP_FMAC4 soap_in_ns1__MainAttributeType(struct soap*, const char*, ns1__MainAttributeType *, const char*);
SOAP_FMAC1 ns1__MainAttributeType * SOAP_FMAC2 SCAP_instantiate_ns1__MainAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MainAttributeType * soap_new_ns1__MainAttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__MainAttributeType(soap, n, NULL, NULL, NULL);
}

inline ns1__MainAttributeType * soap_new_req_ns1__MainAttributeType(
	struct soap *soap,
	const std::string& AttributeID)
{
	ns1__MainAttributeType *_p = soap_new_ns1__MainAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MainAttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline ns1__MainAttributeType * soap_new_set_ns1__MainAttributeType(
	struct soap *soap,
	const std::string& AttributeID,
	std::string *Description,
	ns1__LegalActListType *LegalActList,
	ns1__SubAttributeListType *SubAttributeList)
{
	ns1__MainAttributeType *_p = soap_new_ns1__MainAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MainAttributeType::AttributeID = AttributeID;
		_p->ns1__MainAttributeType::Description = Description;
		_p->ns1__MainAttributeType::LegalActList = LegalActList;
		_p->ns1__MainAttributeType::SubAttributeList = SubAttributeList;
	}
	return _p;
}

inline int soap_write_ns1__MainAttributeType(struct soap *soap, ns1__MainAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MainAttributeType", p->soap_type() == SOAP_TYPE_ns1__MainAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MainAttributeType(struct soap *soap, const char *URL, ns1__MainAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MainAttributeType", p->soap_type() == SOAP_TYPE_ns1__MainAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MainAttributeType(struct soap *soap, const char *URL, ns1__MainAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MainAttributeType", p->soap_type() == SOAP_TYPE_ns1__MainAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MainAttributeType * SOAP_FMAC4 soap_get_ns1__MainAttributeType(struct soap*, ns1__MainAttributeType *, const char*, const char*);

inline int soap_read_ns1__MainAttributeType(struct soap *soap, ns1__MainAttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MainAttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MainAttributeType(struct soap *soap, const char *URL, ns1__MainAttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MainAttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MainAttributeType(struct soap *soap, ns1__MainAttributeType *p)
{
	if (soap_read_ns1__MainAttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AttributeSupplierType_DEFINED
#define SOAP_TYPE_ns1__AttributeSupplierType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AttributeSupplierType(struct soap*, const char*, int, const ns1__AttributeSupplierType *, const char*);
SOAP_FMAC3 ns1__AttributeSupplierType * SOAP_FMAC4 soap_in_ns1__AttributeSupplierType(struct soap*, const char*, ns1__AttributeSupplierType *, const char*);
SOAP_FMAC1 ns1__AttributeSupplierType * SOAP_FMAC2 SCAP_instantiate_ns1__AttributeSupplierType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AttributeSupplierType * soap_new_ns1__AttributeSupplierType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__AttributeSupplierType(soap, n, NULL, NULL, NULL);
}

inline ns1__AttributeSupplierType * soap_new_req_ns1__AttributeSupplierType(
	struct soap *soap,
	const std::string& Id,
	const std::string& Name)
{
	ns1__AttributeSupplierType *_p = soap_new_ns1__AttributeSupplierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AttributeSupplierType::Id = Id;
		_p->ns1__AttributeSupplierType::Name = Name;
	}
	return _p;
}

inline ns1__AttributeSupplierType * soap_new_set_ns1__AttributeSupplierType(
	struct soap *soap,
	const std::string& Id,
	const std::string& Name,
	std::string *Type)
{
	ns1__AttributeSupplierType *_p = soap_new_ns1__AttributeSupplierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AttributeSupplierType::Id = Id;
		_p->ns1__AttributeSupplierType::Name = Name;
		_p->ns1__AttributeSupplierType::Type = Type;
	}
	return _p;
}

inline int soap_write_ns1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeSupplierType", p->soap_type() == SOAP_TYPE_ns1__AttributeSupplierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AttributeSupplierType(struct soap *soap, const char *URL, ns1__AttributeSupplierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeSupplierType", p->soap_type() == SOAP_TYPE_ns1__AttributeSupplierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AttributeSupplierType(struct soap *soap, const char *URL, ns1__AttributeSupplierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeSupplierType", p->soap_type() == SOAP_TYPE_ns1__AttributeSupplierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AttributeSupplierType * SOAP_FMAC4 soap_get_ns1__AttributeSupplierType(struct soap*, ns1__AttributeSupplierType *, const char*, const char*);

inline int soap_read_ns1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AttributeSupplierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AttributeSupplierType(struct soap *soap, const char *URL, ns1__AttributeSupplierType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AttributeSupplierType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType *p)
{
	if (soap_read_ns1__AttributeSupplierType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AttributeType_DEFINED
#define SOAP_TYPE_ns1__AttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AttributeType(struct soap*, const char*, int, const ns1__AttributeType *, const char*);
SOAP_FMAC3 ns1__AttributeType * SOAP_FMAC4 soap_in_ns1__AttributeType(struct soap*, const char*, ns1__AttributeType *, const char*);
SOAP_FMAC1 ns1__AttributeType * SOAP_FMAC2 SCAP_instantiate_ns1__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AttributeType * soap_new_ns1__AttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__AttributeType(soap, n, NULL, NULL, NULL);
}

inline ns1__AttributeType * soap_new_req_ns1__AttributeType(
	struct soap *soap,
	ns1__AttributeSupplierType *AttributeSupplier)
{
	ns1__AttributeType *_p = soap_new_ns1__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AttributeType::AttributeSupplier = AttributeSupplier;
	}
	return _p;
}

inline ns1__AttributeType * soap_new_set_ns1__AttributeType(
	struct soap *soap,
	ns1__AttributeSupplierType *AttributeSupplier,
	ns1__MainAttributeType *MainAttribute)
{
	ns1__AttributeType *_p = soap_new_ns1__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AttributeType::AttributeSupplier = AttributeSupplier;
		_p->ns1__AttributeType::MainAttribute = MainAttribute;
	}
	return _p;
}

inline int soap_write_ns1__AttributeType(struct soap *soap, ns1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeType", p->soap_type() == SOAP_TYPE_ns1__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AttributeType(struct soap *soap, const char *URL, ns1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeType", p->soap_type() == SOAP_TYPE_ns1__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AttributeType(struct soap *soap, const char *URL, ns1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeType", p->soap_type() == SOAP_TYPE_ns1__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AttributeType * SOAP_FMAC4 soap_get_ns1__AttributeType(struct soap*, ns1__AttributeType *, const char*, const char*);

inline int soap_read_ns1__AttributeType(struct soap *soap, ns1__AttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AttributeType(struct soap *soap, const char *URL, ns1__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AttributeType(struct soap *soap, ns1__AttributeType *p)
{
	if (soap_read_ns1__AttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AttributeListType_DEFINED
#define SOAP_TYPE_ns1__AttributeListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AttributeListType(struct soap*, const char*, int, const ns1__AttributeListType *, const char*);
SOAP_FMAC3 ns1__AttributeListType * SOAP_FMAC4 soap_in_ns1__AttributeListType(struct soap*, const char*, ns1__AttributeListType *, const char*);
SOAP_FMAC1 ns1__AttributeListType * SOAP_FMAC2 SCAP_instantiate_ns1__AttributeListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AttributeListType * soap_new_ns1__AttributeListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__AttributeListType(soap, n, NULL, NULL, NULL);
}

inline ns1__AttributeListType * soap_new_req_ns1__AttributeListType(
	struct soap *soap,
	const std::vector<ns1__AttributeType *> & Attribute)
{
	ns1__AttributeListType *_p = soap_new_ns1__AttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AttributeListType::Attribute = Attribute;
	}
	return _p;
}

inline ns1__AttributeListType * soap_new_set_ns1__AttributeListType(
	struct soap *soap,
	const std::vector<ns1__AttributeType *> & Attribute)
{
	ns1__AttributeListType *_p = soap_new_ns1__AttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AttributeListType::Attribute = Attribute;
	}
	return _p;
}

inline int soap_write_ns1__AttributeListType(struct soap *soap, ns1__AttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeListType", p->soap_type() == SOAP_TYPE_ns1__AttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AttributeListType(struct soap *soap, const char *URL, ns1__AttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeListType", p->soap_type() == SOAP_TYPE_ns1__AttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AttributeListType(struct soap *soap, const char *URL, ns1__AttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AttributeListType", p->soap_type() == SOAP_TYPE_ns1__AttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AttributeListType * SOAP_FMAC4 soap_get_ns1__AttributeListType(struct soap*, ns1__AttributeListType *, const char*, const char*);

inline int soap_read_ns1__AttributeListType(struct soap *soap, ns1__AttributeListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AttributeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AttributeListType(struct soap *soap, const char *URL, ns1__AttributeListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AttributeListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AttributeListType(struct soap *soap, ns1__AttributeListType *p)
{
	if (soap_read_ns1__AttributeListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PersonalData_DEFINED
#define SOAP_TYPE_ns1__PersonalData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PersonalData(struct soap*, const char*, int, const ns1__PersonalData *, const char*);
SOAP_FMAC3 ns1__PersonalData * SOAP_FMAC4 soap_in_ns1__PersonalData(struct soap*, const char*, ns1__PersonalData *, const char*);
SOAP_FMAC1 ns1__PersonalData * SOAP_FMAC2 SCAP_instantiate_ns1__PersonalData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PersonalData * soap_new_ns1__PersonalData(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns1__PersonalData(soap, n, NULL, NULL, NULL);
}

inline ns1__PersonalData * soap_new_req_ns1__PersonalData(
	struct soap *soap,
	const std::string& Name,
	const std::string& NIC)
{
	ns1__PersonalData *_p = soap_new_ns1__PersonalData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PersonalData::Name = Name;
		_p->ns1__PersonalData::NIC = NIC;
	}
	return _p;
}

inline ns1__PersonalData * soap_new_set_ns1__PersonalData(
	struct soap *soap,
	const std::string& Name,
	const std::string& NIC)
{
	ns1__PersonalData *_p = soap_new_ns1__PersonalData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PersonalData::Name = Name;
		_p->ns1__PersonalData::NIC = NIC;
	}
	return _p;
}

inline int soap_write_ns1__PersonalData(struct soap *soap, ns1__PersonalData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonalData", p->soap_type() == SOAP_TYPE_ns1__PersonalData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PersonalData(struct soap *soap, const char *URL, ns1__PersonalData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonalData", p->soap_type() == SOAP_TYPE_ns1__PersonalData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PersonalData(struct soap *soap, const char *URL, ns1__PersonalData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonalData", p->soap_type() == SOAP_TYPE_ns1__PersonalData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PersonalData * SOAP_FMAC4 soap_get_ns1__PersonalData(struct soap*, ns1__PersonalData *, const char*, const char*);

inline int soap_read_ns1__PersonalData(struct soap *soap, ns1__PersonalData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PersonalData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PersonalData(struct soap *soap, const char *URL, ns1__PersonalData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PersonalData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PersonalData(struct soap *soap, ns1__PersonalData *p)
{
	if (soap_read_ns1__PersonalData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns9__AttributeSupplierResponseType_DEFINED
#define SOAP_TYPE_ns9__AttributeSupplierResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns9__AttributeSupplierResponseType(struct soap*, const char*, int, const ns9__AttributeSupplierResponseType *, const char*);
SOAP_FMAC3 ns9__AttributeSupplierResponseType * SOAP_FMAC4 soap_in_ns9__AttributeSupplierResponseType(struct soap*, const char*, ns9__AttributeSupplierResponseType *, const char*);
SOAP_FMAC1 ns9__AttributeSupplierResponseType * SOAP_FMAC2 SCAP_instantiate_ns9__AttributeSupplierResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns9__AttributeSupplierResponseType * soap_new_ns9__AttributeSupplierResponseType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns9__AttributeSupplierResponseType(soap, n, NULL, NULL, NULL);
}

inline ns9__AttributeSupplierResponseType * soap_new_req_ns9__AttributeSupplierResponseType(
	struct soap *soap)
{
	ns9__AttributeSupplierResponseType *_p = soap_new_ns9__AttributeSupplierResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns9__AttributeSupplierResponseType * soap_new_set_ns9__AttributeSupplierResponseType(
	struct soap *soap,
	const std::vector<ns3__AttributeSupplierType *> & AttributeSupplier,
	std::string *ErrorMessage)
{
	ns9__AttributeSupplierResponseType *_p = soap_new_ns9__AttributeSupplierResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns9__AttributeSupplierResponseType::AttributeSupplier = AttributeSupplier;
		_p->ns9__AttributeSupplierResponseType::ErrorMessage = ErrorMessage;
	}
	return _p;
}

inline int soap_write_ns9__AttributeSupplierResponseType(struct soap *soap, ns9__AttributeSupplierResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns9:AttributeSupplierResponseType", p->soap_type() == SOAP_TYPE_ns9__AttributeSupplierResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns9__AttributeSupplierResponseType(struct soap *soap, const char *URL, ns9__AttributeSupplierResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns9:AttributeSupplierResponseType", p->soap_type() == SOAP_TYPE_ns9__AttributeSupplierResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns9__AttributeSupplierResponseType(struct soap *soap, const char *URL, ns9__AttributeSupplierResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns9:AttributeSupplierResponseType", p->soap_type() == SOAP_TYPE_ns9__AttributeSupplierResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns9__AttributeSupplierResponseType * SOAP_FMAC4 soap_get_ns9__AttributeSupplierResponseType(struct soap*, ns9__AttributeSupplierResponseType *, const char*, const char*);

inline int soap_read_ns9__AttributeSupplierResponseType(struct soap *soap, ns9__AttributeSupplierResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns9__AttributeSupplierResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns9__AttributeSupplierResponseType(struct soap *soap, const char *URL, ns9__AttributeSupplierResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns9__AttributeSupplierResponseType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns9__AttributeSupplierResponseType(struct soap *soap, ns9__AttributeSupplierResponseType *p)
{
	if (soap_read_ns9__AttributeSupplierResponseType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns7__SVGListType_DEFINED
#define SOAP_TYPE_ns7__SVGListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__SVGListType(struct soap*, const char*, int, const ns7__SVGListType *, const char*);
SOAP_FMAC3 ns7__SVGListType * SOAP_FMAC4 soap_in_ns7__SVGListType(struct soap*, const char*, ns7__SVGListType *, const char*);
SOAP_FMAC1 ns7__SVGListType * SOAP_FMAC2 SCAP_instantiate_ns7__SVGListType(struct soap*, int, const char*, const char*, size_t*);

inline ns7__SVGListType * soap_new_ns7__SVGListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns7__SVGListType(soap, n, NULL, NULL, NULL);
}

inline ns7__SVGListType * soap_new_req_ns7__SVGListType(
	struct soap *soap,
	const std::vector<xsd__base64Binary> & ns7__SVG)
{
	ns7__SVGListType *_p = soap_new_ns7__SVGListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SVGListType::ns7__SVG = ns7__SVG;
	}
	return _p;
}

inline ns7__SVGListType * soap_new_set_ns7__SVGListType(
	struct soap *soap,
	const std::vector<xsd__base64Binary> & ns7__SVG)
{
	ns7__SVGListType *_p = soap_new_ns7__SVGListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__SVGListType::ns7__SVG = ns7__SVG;
	}
	return _p;
}

inline int soap_write_ns7__SVGListType(struct soap *soap, ns7__SVGListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SVGListType", p->soap_type() == SOAP_TYPE_ns7__SVGListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__SVGListType(struct soap *soap, const char *URL, ns7__SVGListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SVGListType", p->soap_type() == SOAP_TYPE_ns7__SVGListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns7__SVGListType(struct soap *soap, const char *URL, ns7__SVGListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:SVGListType", p->soap_type() == SOAP_TYPE_ns7__SVGListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns7__SVGListType * SOAP_FMAC4 soap_get_ns7__SVGListType(struct soap*, ns7__SVGListType *, const char*, const char*);

inline int soap_read_ns7__SVGListType(struct soap *soap, ns7__SVGListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns7__SVGListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__SVGListType(struct soap *soap, const char *URL, ns7__SVGListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns7__SVGListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns7__SVGListType(struct soap *soap, ns7__SVGListType *p)
{
	if (soap_read_ns7__SVGListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ArchiveTimeStampType_DEFINED
#define SOAP_TYPE_ns6__ArchiveTimeStampType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ArchiveTimeStampType(struct soap*, const char*, int, const ns6__ArchiveTimeStampType *, const char*);
SOAP_FMAC3 ns6__ArchiveTimeStampType * SOAP_FMAC4 soap_in_ns6__ArchiveTimeStampType(struct soap*, const char*, ns6__ArchiveTimeStampType *, const char*);
SOAP_FMAC1 ns6__ArchiveTimeStampType * SOAP_FMAC2 SCAP_instantiate_ns6__ArchiveTimeStampType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ArchiveTimeStampType * soap_new_ns6__ArchiveTimeStampType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__ArchiveTimeStampType(soap, n, NULL, NULL, NULL);
}

inline ns6__ArchiveTimeStampType * soap_new_req_ns6__ArchiveTimeStampType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	const xsd__base64Binary& ns6__EncapsulatedTimeStamp)
{
	ns6__ArchiveTimeStampType *_p = soap_new_ns6__ArchiveTimeStampType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ArchiveTimeStampType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns6__ArchiveTimeStampType::ns6__EncapsulatedTimeStamp = ns6__EncapsulatedTimeStamp;
	}
	return _p;
}

inline ns6__ArchiveTimeStampType * soap_new_set_ns6__ArchiveTimeStampType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	const xsd__base64Binary& ns6__EncapsulatedTimeStamp)
{
	ns6__ArchiveTimeStampType *_p = soap_new_ns6__ArchiveTimeStampType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ArchiveTimeStampType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns6__ArchiveTimeStampType::ns6__EncapsulatedTimeStamp = ns6__EncapsulatedTimeStamp;
	}
	return _p;
}

inline int soap_write_ns6__ArchiveTimeStampType(struct soap *soap, ns6__ArchiveTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ArchiveTimeStampType", p->soap_type() == SOAP_TYPE_ns6__ArchiveTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__ArchiveTimeStampType(struct soap *soap, const char *URL, ns6__ArchiveTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ArchiveTimeStampType", p->soap_type() == SOAP_TYPE_ns6__ArchiveTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ArchiveTimeStampType(struct soap *soap, const char *URL, ns6__ArchiveTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ArchiveTimeStampType", p->soap_type() == SOAP_TYPE_ns6__ArchiveTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__ArchiveTimeStampType * SOAP_FMAC4 soap_get_ns6__ArchiveTimeStampType(struct soap*, ns6__ArchiveTimeStampType *, const char*, const char*);

inline int soap_read_ns6__ArchiveTimeStampType(struct soap *soap, ns6__ArchiveTimeStampType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__ArchiveTimeStampType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ArchiveTimeStampType(struct soap *soap, const char *URL, ns6__ArchiveTimeStampType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ArchiveTimeStampType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ArchiveTimeStampType(struct soap *soap, ns6__ArchiveTimeStampType *p)
{
	if (soap_read_ns6__ArchiveTimeStampType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__EncapsulatedOCSPValueType_DEFINED
#define SOAP_TYPE_ns6__EncapsulatedOCSPValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__EncapsulatedOCSPValueType(struct soap*, const char*, int, const ns6__EncapsulatedOCSPValueType *, const char*);
SOAP_FMAC3 ns6__EncapsulatedOCSPValueType * SOAP_FMAC4 soap_in_ns6__EncapsulatedOCSPValueType(struct soap*, const char*, ns6__EncapsulatedOCSPValueType *, const char*);
SOAP_FMAC1 ns6__EncapsulatedOCSPValueType * SOAP_FMAC2 SCAP_instantiate_ns6__EncapsulatedOCSPValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__EncapsulatedOCSPValueType * soap_new_ns6__EncapsulatedOCSPValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__EncapsulatedOCSPValueType(soap, n, NULL, NULL, NULL);
}

inline ns6__EncapsulatedOCSPValueType * soap_new_req_ns6__EncapsulatedOCSPValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns6__EncapsulatedOCSPValueType *_p = soap_new_ns6__EncapsulatedOCSPValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EncapsulatedOCSPValueType::__item = __item;
		_p->ns6__EncapsulatedOCSPValueType::Id = Id;
	}
	return _p;
}

inline ns6__EncapsulatedOCSPValueType * soap_new_set_ns6__EncapsulatedOCSPValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns6__EncapsulatedOCSPValueType *_p = soap_new_ns6__EncapsulatedOCSPValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EncapsulatedOCSPValueType::__item = __item;
		_p->ns6__EncapsulatedOCSPValueType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__EncapsulatedOCSPValueType(struct soap *soap, ns6__EncapsulatedOCSPValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedOCSPValueType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedOCSPValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__EncapsulatedOCSPValueType(struct soap *soap, const char *URL, ns6__EncapsulatedOCSPValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedOCSPValueType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedOCSPValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__EncapsulatedOCSPValueType(struct soap *soap, const char *URL, ns6__EncapsulatedOCSPValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedOCSPValueType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedOCSPValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__EncapsulatedOCSPValueType * SOAP_FMAC4 soap_get_ns6__EncapsulatedOCSPValueType(struct soap*, ns6__EncapsulatedOCSPValueType *, const char*, const char*);

inline int soap_read_ns6__EncapsulatedOCSPValueType(struct soap *soap, ns6__EncapsulatedOCSPValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__EncapsulatedOCSPValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__EncapsulatedOCSPValueType(struct soap *soap, const char *URL, ns6__EncapsulatedOCSPValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__EncapsulatedOCSPValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__EncapsulatedOCSPValueType(struct soap *soap, ns6__EncapsulatedOCSPValueType *p)
{
	if (soap_read_ns6__EncapsulatedOCSPValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__OCSPValuesType_DEFINED
#define SOAP_TYPE_ns6__OCSPValuesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__OCSPValuesType(struct soap*, const char*, int, const ns6__OCSPValuesType *, const char*);
SOAP_FMAC3 ns6__OCSPValuesType * SOAP_FMAC4 soap_in_ns6__OCSPValuesType(struct soap*, const char*, ns6__OCSPValuesType *, const char*);
SOAP_FMAC1 ns6__OCSPValuesType * SOAP_FMAC2 SCAP_instantiate_ns6__OCSPValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__OCSPValuesType * soap_new_ns6__OCSPValuesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__OCSPValuesType(soap, n, NULL, NULL, NULL);
}

inline ns6__OCSPValuesType * soap_new_req_ns6__OCSPValuesType(
	struct soap *soap,
	const std::vector<ns6__EncapsulatedOCSPValueType *> & ns6__EncapsulatedOCSPValue,
	const std::string& Id)
{
	ns6__OCSPValuesType *_p = soap_new_ns6__OCSPValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPValuesType::ns6__EncapsulatedOCSPValue = ns6__EncapsulatedOCSPValue;
		_p->ns6__OCSPValuesType::Id = Id;
	}
	return _p;
}

inline ns6__OCSPValuesType * soap_new_set_ns6__OCSPValuesType(
	struct soap *soap,
	const std::vector<ns6__EncapsulatedOCSPValueType *> & ns6__EncapsulatedOCSPValue,
	const std::string& Id)
{
	ns6__OCSPValuesType *_p = soap_new_ns6__OCSPValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPValuesType::ns6__EncapsulatedOCSPValue = ns6__EncapsulatedOCSPValue;
		_p->ns6__OCSPValuesType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__OCSPValuesType(struct soap *soap, ns6__OCSPValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPValuesType", p->soap_type() == SOAP_TYPE_ns6__OCSPValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__OCSPValuesType(struct soap *soap, const char *URL, ns6__OCSPValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPValuesType", p->soap_type() == SOAP_TYPE_ns6__OCSPValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__OCSPValuesType(struct soap *soap, const char *URL, ns6__OCSPValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPValuesType", p->soap_type() == SOAP_TYPE_ns6__OCSPValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__OCSPValuesType * SOAP_FMAC4 soap_get_ns6__OCSPValuesType(struct soap*, ns6__OCSPValuesType *, const char*, const char*);

inline int soap_read_ns6__OCSPValuesType(struct soap *soap, ns6__OCSPValuesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__OCSPValuesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__OCSPValuesType(struct soap *soap, const char *URL, ns6__OCSPValuesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__OCSPValuesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__OCSPValuesType(struct soap *soap, ns6__OCSPValuesType *p)
{
	if (soap_read_ns6__OCSPValuesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__EncapsulatedCRLValueType_DEFINED
#define SOAP_TYPE_ns6__EncapsulatedCRLValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__EncapsulatedCRLValueType(struct soap*, const char*, int, const ns6__EncapsulatedCRLValueType *, const char*);
SOAP_FMAC3 ns6__EncapsulatedCRLValueType * SOAP_FMAC4 soap_in_ns6__EncapsulatedCRLValueType(struct soap*, const char*, ns6__EncapsulatedCRLValueType *, const char*);
SOAP_FMAC1 ns6__EncapsulatedCRLValueType * SOAP_FMAC2 SCAP_instantiate_ns6__EncapsulatedCRLValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__EncapsulatedCRLValueType * soap_new_ns6__EncapsulatedCRLValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__EncapsulatedCRLValueType(soap, n, NULL, NULL, NULL);
}

inline ns6__EncapsulatedCRLValueType * soap_new_req_ns6__EncapsulatedCRLValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns6__EncapsulatedCRLValueType *_p = soap_new_ns6__EncapsulatedCRLValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EncapsulatedCRLValueType::__item = __item;
		_p->ns6__EncapsulatedCRLValueType::Id = Id;
	}
	return _p;
}

inline ns6__EncapsulatedCRLValueType * soap_new_set_ns6__EncapsulatedCRLValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns6__EncapsulatedCRLValueType *_p = soap_new_ns6__EncapsulatedCRLValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EncapsulatedCRLValueType::__item = __item;
		_p->ns6__EncapsulatedCRLValueType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__EncapsulatedCRLValueType(struct soap *soap, ns6__EncapsulatedCRLValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedCRLValueType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedCRLValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__EncapsulatedCRLValueType(struct soap *soap, const char *URL, ns6__EncapsulatedCRLValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedCRLValueType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedCRLValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__EncapsulatedCRLValueType(struct soap *soap, const char *URL, ns6__EncapsulatedCRLValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedCRLValueType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedCRLValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__EncapsulatedCRLValueType * SOAP_FMAC4 soap_get_ns6__EncapsulatedCRLValueType(struct soap*, ns6__EncapsulatedCRLValueType *, const char*, const char*);

inline int soap_read_ns6__EncapsulatedCRLValueType(struct soap *soap, ns6__EncapsulatedCRLValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__EncapsulatedCRLValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__EncapsulatedCRLValueType(struct soap *soap, const char *URL, ns6__EncapsulatedCRLValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__EncapsulatedCRLValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__EncapsulatedCRLValueType(struct soap *soap, ns6__EncapsulatedCRLValueType *p)
{
	if (soap_read_ns6__EncapsulatedCRLValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CRLValuesType_DEFINED
#define SOAP_TYPE_ns6__CRLValuesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CRLValuesType(struct soap*, const char*, int, const ns6__CRLValuesType *, const char*);
SOAP_FMAC3 ns6__CRLValuesType * SOAP_FMAC4 soap_in_ns6__CRLValuesType(struct soap*, const char*, ns6__CRLValuesType *, const char*);
SOAP_FMAC1 ns6__CRLValuesType * SOAP_FMAC2 SCAP_instantiate_ns6__CRLValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CRLValuesType * soap_new_ns6__CRLValuesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CRLValuesType(soap, n, NULL, NULL, NULL);
}

inline ns6__CRLValuesType * soap_new_req_ns6__CRLValuesType(
	struct soap *soap,
	const std::vector<ns6__EncapsulatedCRLValueType *> & ns6__EncapsulatedCRLValue,
	const std::string& Id)
{
	ns6__CRLValuesType *_p = soap_new_ns6__CRLValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLValuesType::ns6__EncapsulatedCRLValue = ns6__EncapsulatedCRLValue;
		_p->ns6__CRLValuesType::Id = Id;
	}
	return _p;
}

inline ns6__CRLValuesType * soap_new_set_ns6__CRLValuesType(
	struct soap *soap,
	const std::vector<ns6__EncapsulatedCRLValueType *> & ns6__EncapsulatedCRLValue,
	const std::string& Id)
{
	ns6__CRLValuesType *_p = soap_new_ns6__CRLValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLValuesType::ns6__EncapsulatedCRLValue = ns6__EncapsulatedCRLValue;
		_p->ns6__CRLValuesType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__CRLValuesType(struct soap *soap, ns6__CRLValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLValuesType", p->soap_type() == SOAP_TYPE_ns6__CRLValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CRLValuesType(struct soap *soap, const char *URL, ns6__CRLValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLValuesType", p->soap_type() == SOAP_TYPE_ns6__CRLValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CRLValuesType(struct soap *soap, const char *URL, ns6__CRLValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLValuesType", p->soap_type() == SOAP_TYPE_ns6__CRLValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CRLValuesType * SOAP_FMAC4 soap_get_ns6__CRLValuesType(struct soap*, ns6__CRLValuesType *, const char*, const char*);

inline int soap_read_ns6__CRLValuesType(struct soap *soap, ns6__CRLValuesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CRLValuesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CRLValuesType(struct soap *soap, const char *URL, ns6__CRLValuesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CRLValuesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CRLValuesType(struct soap *soap, ns6__CRLValuesType *p)
{
	if (soap_read_ns6__CRLValuesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__RevocationValuesType_DEFINED
#define SOAP_TYPE_ns6__RevocationValuesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__RevocationValuesType(struct soap*, const char*, int, const ns6__RevocationValuesType *, const char*);
SOAP_FMAC3 ns6__RevocationValuesType * SOAP_FMAC4 soap_in_ns6__RevocationValuesType(struct soap*, const char*, ns6__RevocationValuesType *, const char*);
SOAP_FMAC1 ns6__RevocationValuesType * SOAP_FMAC2 SCAP_instantiate_ns6__RevocationValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__RevocationValuesType * soap_new_ns6__RevocationValuesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__RevocationValuesType(soap, n, NULL, NULL, NULL);
}

inline ns6__RevocationValuesType * soap_new_req_ns6__RevocationValuesType(
	struct soap *soap,
	ns6__CRLValuesType *ns6__CRLValues,
	ns6__OCSPValuesType *ns6__OCSPValues,
	const std::string& Id)
{
	ns6__RevocationValuesType *_p = soap_new_ns6__RevocationValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__RevocationValuesType::ns6__CRLValues = ns6__CRLValues;
		_p->ns6__RevocationValuesType::ns6__OCSPValues = ns6__OCSPValues;
		_p->ns6__RevocationValuesType::Id = Id;
	}
	return _p;
}

inline ns6__RevocationValuesType * soap_new_set_ns6__RevocationValuesType(
	struct soap *soap,
	ns6__CRLValuesType *ns6__CRLValues,
	ns6__OCSPValuesType *ns6__OCSPValues,
	const std::string& Id)
{
	ns6__RevocationValuesType *_p = soap_new_ns6__RevocationValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__RevocationValuesType::ns6__CRLValues = ns6__CRLValues;
		_p->ns6__RevocationValuesType::ns6__OCSPValues = ns6__OCSPValues;
		_p->ns6__RevocationValuesType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__RevocationValuesType(struct soap *soap, ns6__RevocationValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RevocationValuesType", p->soap_type() == SOAP_TYPE_ns6__RevocationValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__RevocationValuesType(struct soap *soap, const char *URL, ns6__RevocationValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RevocationValuesType", p->soap_type() == SOAP_TYPE_ns6__RevocationValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__RevocationValuesType(struct soap *soap, const char *URL, ns6__RevocationValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:RevocationValuesType", p->soap_type() == SOAP_TYPE_ns6__RevocationValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__RevocationValuesType * SOAP_FMAC4 soap_get_ns6__RevocationValuesType(struct soap*, ns6__RevocationValuesType *, const char*, const char*);

inline int soap_read_ns6__RevocationValuesType(struct soap *soap, ns6__RevocationValuesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__RevocationValuesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__RevocationValuesType(struct soap *soap, const char *URL, ns6__RevocationValuesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__RevocationValuesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__RevocationValuesType(struct soap *soap, ns6__RevocationValuesType *p)
{
	if (soap_read_ns6__RevocationValuesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__EncapsulatedX509CertificateType_DEFINED
#define SOAP_TYPE_ns6__EncapsulatedX509CertificateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__EncapsulatedX509CertificateType(struct soap*, const char*, int, const ns6__EncapsulatedX509CertificateType *, const char*);
SOAP_FMAC3 ns6__EncapsulatedX509CertificateType * SOAP_FMAC4 soap_in_ns6__EncapsulatedX509CertificateType(struct soap*, const char*, ns6__EncapsulatedX509CertificateType *, const char*);
SOAP_FMAC1 ns6__EncapsulatedX509CertificateType * SOAP_FMAC2 SCAP_instantiate_ns6__EncapsulatedX509CertificateType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__EncapsulatedX509CertificateType * soap_new_ns6__EncapsulatedX509CertificateType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__EncapsulatedX509CertificateType(soap, n, NULL, NULL, NULL);
}

inline ns6__EncapsulatedX509CertificateType * soap_new_req_ns6__EncapsulatedX509CertificateType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns6__EncapsulatedX509CertificateType *_p = soap_new_ns6__EncapsulatedX509CertificateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EncapsulatedX509CertificateType::__item = __item;
		_p->ns6__EncapsulatedX509CertificateType::Id = Id;
	}
	return _p;
}

inline ns6__EncapsulatedX509CertificateType * soap_new_set_ns6__EncapsulatedX509CertificateType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns6__EncapsulatedX509CertificateType *_p = soap_new_ns6__EncapsulatedX509CertificateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__EncapsulatedX509CertificateType::__item = __item;
		_p->ns6__EncapsulatedX509CertificateType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__EncapsulatedX509CertificateType(struct soap *soap, ns6__EncapsulatedX509CertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedX509CertificateType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedX509CertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__EncapsulatedX509CertificateType(struct soap *soap, const char *URL, ns6__EncapsulatedX509CertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedX509CertificateType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedX509CertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__EncapsulatedX509CertificateType(struct soap *soap, const char *URL, ns6__EncapsulatedX509CertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:EncapsulatedX509CertificateType", p->soap_type() == SOAP_TYPE_ns6__EncapsulatedX509CertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__EncapsulatedX509CertificateType * SOAP_FMAC4 soap_get_ns6__EncapsulatedX509CertificateType(struct soap*, ns6__EncapsulatedX509CertificateType *, const char*, const char*);

inline int soap_read_ns6__EncapsulatedX509CertificateType(struct soap *soap, ns6__EncapsulatedX509CertificateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__EncapsulatedX509CertificateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__EncapsulatedX509CertificateType(struct soap *soap, const char *URL, ns6__EncapsulatedX509CertificateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__EncapsulatedX509CertificateType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__EncapsulatedX509CertificateType(struct soap *soap, ns6__EncapsulatedX509CertificateType *p)
{
	if (soap_read_ns6__EncapsulatedX509CertificateType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CertificateValuesType_DEFINED
#define SOAP_TYPE_ns6__CertificateValuesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CertificateValuesType(struct soap*, const char*, int, const ns6__CertificateValuesType *, const char*);
SOAP_FMAC3 ns6__CertificateValuesType * SOAP_FMAC4 soap_in_ns6__CertificateValuesType(struct soap*, const char*, ns6__CertificateValuesType *, const char*);
SOAP_FMAC1 ns6__CertificateValuesType * SOAP_FMAC2 SCAP_instantiate_ns6__CertificateValuesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CertificateValuesType * soap_new_ns6__CertificateValuesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CertificateValuesType(soap, n, NULL, NULL, NULL);
}

inline ns6__CertificateValuesType * soap_new_req_ns6__CertificateValuesType(
	struct soap *soap,
	const std::vector<ns6__EncapsulatedX509CertificateType *> & ns6__EncapsulatedX509Certificate,
	const std::string& Id)
{
	ns6__CertificateValuesType *_p = soap_new_ns6__CertificateValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertificateValuesType::ns6__EncapsulatedX509Certificate = ns6__EncapsulatedX509Certificate;
		_p->ns6__CertificateValuesType::Id = Id;
	}
	return _p;
}

inline ns6__CertificateValuesType * soap_new_set_ns6__CertificateValuesType(
	struct soap *soap,
	const std::vector<ns6__EncapsulatedX509CertificateType *> & ns6__EncapsulatedX509Certificate,
	const std::string& Id)
{
	ns6__CertificateValuesType *_p = soap_new_ns6__CertificateValuesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertificateValuesType::ns6__EncapsulatedX509Certificate = ns6__EncapsulatedX509Certificate;
		_p->ns6__CertificateValuesType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__CertificateValuesType(struct soap *soap, ns6__CertificateValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertificateValuesType", p->soap_type() == SOAP_TYPE_ns6__CertificateValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CertificateValuesType(struct soap *soap, const char *URL, ns6__CertificateValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertificateValuesType", p->soap_type() == SOAP_TYPE_ns6__CertificateValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CertificateValuesType(struct soap *soap, const char *URL, ns6__CertificateValuesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertificateValuesType", p->soap_type() == SOAP_TYPE_ns6__CertificateValuesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CertificateValuesType * SOAP_FMAC4 soap_get_ns6__CertificateValuesType(struct soap*, ns6__CertificateValuesType *, const char*, const char*);

inline int soap_read_ns6__CertificateValuesType(struct soap *soap, ns6__CertificateValuesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CertificateValuesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CertificateValuesType(struct soap *soap, const char *URL, ns6__CertificateValuesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CertificateValuesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CertificateValuesType(struct soap *soap, ns6__CertificateValuesType *p)
{
	if (soap_read_ns6__CertificateValuesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SigAndRefsTimeStampType_DEFINED
#define SOAP_TYPE_ns6__SigAndRefsTimeStampType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SigAndRefsTimeStampType(struct soap*, const char*, int, const ns6__SigAndRefsTimeStampType *, const char*);
SOAP_FMAC3 ns6__SigAndRefsTimeStampType * SOAP_FMAC4 soap_in_ns6__SigAndRefsTimeStampType(struct soap*, const char*, ns6__SigAndRefsTimeStampType *, const char*);
SOAP_FMAC1 ns6__SigAndRefsTimeStampType * SOAP_FMAC2 SCAP_instantiate_ns6__SigAndRefsTimeStampType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SigAndRefsTimeStampType * soap_new_ns6__SigAndRefsTimeStampType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__SigAndRefsTimeStampType(soap, n, NULL, NULL, NULL);
}

inline ns6__SigAndRefsTimeStampType * soap_new_req_ns6__SigAndRefsTimeStampType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	const xsd__base64Binary& ns6__EncapsulatedTimeStamp)
{
	ns6__SigAndRefsTimeStampType *_p = soap_new_ns6__SigAndRefsTimeStampType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SigAndRefsTimeStampType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns6__SigAndRefsTimeStampType::ns6__EncapsulatedTimeStamp = ns6__EncapsulatedTimeStamp;
	}
	return _p;
}

inline ns6__SigAndRefsTimeStampType * soap_new_set_ns6__SigAndRefsTimeStampType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	const xsd__base64Binary& ns6__EncapsulatedTimeStamp)
{
	ns6__SigAndRefsTimeStampType *_p = soap_new_ns6__SigAndRefsTimeStampType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SigAndRefsTimeStampType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns6__SigAndRefsTimeStampType::ns6__EncapsulatedTimeStamp = ns6__EncapsulatedTimeStamp;
	}
	return _p;
}

inline int soap_write_ns6__SigAndRefsTimeStampType(struct soap *soap, ns6__SigAndRefsTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SigAndRefsTimeStampType", p->soap_type() == SOAP_TYPE_ns6__SigAndRefsTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__SigAndRefsTimeStampType(struct soap *soap, const char *URL, ns6__SigAndRefsTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SigAndRefsTimeStampType", p->soap_type() == SOAP_TYPE_ns6__SigAndRefsTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SigAndRefsTimeStampType(struct soap *soap, const char *URL, ns6__SigAndRefsTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SigAndRefsTimeStampType", p->soap_type() == SOAP_TYPE_ns6__SigAndRefsTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__SigAndRefsTimeStampType * SOAP_FMAC4 soap_get_ns6__SigAndRefsTimeStampType(struct soap*, ns6__SigAndRefsTimeStampType *, const char*, const char*);

inline int soap_read_ns6__SigAndRefsTimeStampType(struct soap *soap, ns6__SigAndRefsTimeStampType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__SigAndRefsTimeStampType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SigAndRefsTimeStampType(struct soap *soap, const char *URL, ns6__SigAndRefsTimeStampType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SigAndRefsTimeStampType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SigAndRefsTimeStampType(struct soap *soap, ns6__SigAndRefsTimeStampType *p)
{
	if (soap_read_ns6__SigAndRefsTimeStampType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ResponderIDType_DEFINED
#define SOAP_TYPE_ns6__ResponderIDType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ResponderIDType(struct soap*, const char*, int, const ns6__ResponderIDType *, const char*);
SOAP_FMAC3 ns6__ResponderIDType * SOAP_FMAC4 soap_in_ns6__ResponderIDType(struct soap*, const char*, ns6__ResponderIDType *, const char*);
SOAP_FMAC1 ns6__ResponderIDType * SOAP_FMAC2 SCAP_instantiate_ns6__ResponderIDType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ResponderIDType * soap_new_ns6__ResponderIDType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__ResponderIDType(soap, n, NULL, NULL, NULL);
}

inline ns6__ResponderIDType * soap_new_req_ns6__ResponderIDType(
	struct soap *soap,
	char *ns6__ByName)
{
	ns6__ResponderIDType *_p = soap_new_ns6__ResponderIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ResponderIDType::ns6__ByName = ns6__ByName;
	}
	return _p;
}

inline ns6__ResponderIDType * soap_new_set_ns6__ResponderIDType(
	struct soap *soap,
	char *ns6__ByName)
{
	ns6__ResponderIDType *_p = soap_new_ns6__ResponderIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ResponderIDType::ns6__ByName = ns6__ByName;
	}
	return _p;
}

inline int soap_write_ns6__ResponderIDType(struct soap *soap, ns6__ResponderIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ResponderIDType", p->soap_type() == SOAP_TYPE_ns6__ResponderIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__ResponderIDType(struct soap *soap, const char *URL, ns6__ResponderIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ResponderIDType", p->soap_type() == SOAP_TYPE_ns6__ResponderIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ResponderIDType(struct soap *soap, const char *URL, ns6__ResponderIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ResponderIDType", p->soap_type() == SOAP_TYPE_ns6__ResponderIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__ResponderIDType * SOAP_FMAC4 soap_get_ns6__ResponderIDType(struct soap*, ns6__ResponderIDType *, const char*, const char*);

inline int soap_read_ns6__ResponderIDType(struct soap *soap, ns6__ResponderIDType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__ResponderIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ResponderIDType(struct soap *soap, const char *URL, ns6__ResponderIDType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ResponderIDType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ResponderIDType(struct soap *soap, ns6__ResponderIDType *p)
{
	if (soap_read_ns6__ResponderIDType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__OCSPIdentifierType_DEFINED
#define SOAP_TYPE_ns6__OCSPIdentifierType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__OCSPIdentifierType(struct soap*, const char*, int, const ns6__OCSPIdentifierType *, const char*);
SOAP_FMAC3 ns6__OCSPIdentifierType * SOAP_FMAC4 soap_in_ns6__OCSPIdentifierType(struct soap*, const char*, ns6__OCSPIdentifierType *, const char*);
SOAP_FMAC1 ns6__OCSPIdentifierType * SOAP_FMAC2 SCAP_instantiate_ns6__OCSPIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__OCSPIdentifierType * soap_new_ns6__OCSPIdentifierType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__OCSPIdentifierType(soap, n, NULL, NULL, NULL);
}

inline ns6__OCSPIdentifierType * soap_new_req_ns6__OCSPIdentifierType(
	struct soap *soap,
	ns6__ResponderIDType *ns6__ResponderID,
	char *ns6__ProducedAt)
{
	ns6__OCSPIdentifierType *_p = soap_new_ns6__OCSPIdentifierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPIdentifierType::ns6__ResponderID = ns6__ResponderID;
		_p->ns6__OCSPIdentifierType::ns6__ProducedAt = ns6__ProducedAt;
	}
	return _p;
}

inline ns6__OCSPIdentifierType * soap_new_set_ns6__OCSPIdentifierType(
	struct soap *soap,
	ns6__ResponderIDType *ns6__ResponderID,
	char *ns6__ProducedAt)
{
	ns6__OCSPIdentifierType *_p = soap_new_ns6__OCSPIdentifierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPIdentifierType::ns6__ResponderID = ns6__ResponderID;
		_p->ns6__OCSPIdentifierType::ns6__ProducedAt = ns6__ProducedAt;
	}
	return _p;
}

inline int soap_write_ns6__OCSPIdentifierType(struct soap *soap, ns6__OCSPIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPIdentifierType", p->soap_type() == SOAP_TYPE_ns6__OCSPIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__OCSPIdentifierType(struct soap *soap, const char *URL, ns6__OCSPIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPIdentifierType", p->soap_type() == SOAP_TYPE_ns6__OCSPIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__OCSPIdentifierType(struct soap *soap, const char *URL, ns6__OCSPIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPIdentifierType", p->soap_type() == SOAP_TYPE_ns6__OCSPIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__OCSPIdentifierType * SOAP_FMAC4 soap_get_ns6__OCSPIdentifierType(struct soap*, ns6__OCSPIdentifierType *, const char*, const char*);

inline int soap_read_ns6__OCSPIdentifierType(struct soap *soap, ns6__OCSPIdentifierType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__OCSPIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__OCSPIdentifierType(struct soap *soap, const char *URL, ns6__OCSPIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__OCSPIdentifierType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__OCSPIdentifierType(struct soap *soap, ns6__OCSPIdentifierType *p)
{
	if (soap_read_ns6__OCSPIdentifierType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__OCSPRefType_DEFINED
#define SOAP_TYPE_ns6__OCSPRefType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__OCSPRefType(struct soap*, const char*, int, const ns6__OCSPRefType *, const char*);
SOAP_FMAC3 ns6__OCSPRefType * SOAP_FMAC4 soap_in_ns6__OCSPRefType(struct soap*, const char*, ns6__OCSPRefType *, const char*);
SOAP_FMAC1 ns6__OCSPRefType * SOAP_FMAC2 SCAP_instantiate_ns6__OCSPRefType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__OCSPRefType * soap_new_ns6__OCSPRefType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__OCSPRefType(soap, n, NULL, NULL, NULL);
}

inline ns6__OCSPRefType * soap_new_req_ns6__OCSPRefType(
	struct soap *soap,
	ns6__OCSPIdentifierType *ns6__OCSPIdentifier,
	ns6__DigestAlgAndValueType *ns6__DigestAlgAndValue)
{
	ns6__OCSPRefType *_p = soap_new_ns6__OCSPRefType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPRefType::ns6__OCSPIdentifier = ns6__OCSPIdentifier;
		_p->ns6__OCSPRefType::ns6__DigestAlgAndValue = ns6__DigestAlgAndValue;
	}
	return _p;
}

inline ns6__OCSPRefType * soap_new_set_ns6__OCSPRefType(
	struct soap *soap,
	ns6__OCSPIdentifierType *ns6__OCSPIdentifier,
	ns6__DigestAlgAndValueType *ns6__DigestAlgAndValue)
{
	ns6__OCSPRefType *_p = soap_new_ns6__OCSPRefType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPRefType::ns6__OCSPIdentifier = ns6__OCSPIdentifier;
		_p->ns6__OCSPRefType::ns6__DigestAlgAndValue = ns6__DigestAlgAndValue;
	}
	return _p;
}

inline int soap_write_ns6__OCSPRefType(struct soap *soap, ns6__OCSPRefType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPRefType", p->soap_type() == SOAP_TYPE_ns6__OCSPRefType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__OCSPRefType(struct soap *soap, const char *URL, ns6__OCSPRefType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPRefType", p->soap_type() == SOAP_TYPE_ns6__OCSPRefType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__OCSPRefType(struct soap *soap, const char *URL, ns6__OCSPRefType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPRefType", p->soap_type() == SOAP_TYPE_ns6__OCSPRefType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__OCSPRefType * SOAP_FMAC4 soap_get_ns6__OCSPRefType(struct soap*, ns6__OCSPRefType *, const char*, const char*);

inline int soap_read_ns6__OCSPRefType(struct soap *soap, ns6__OCSPRefType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__OCSPRefType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__OCSPRefType(struct soap *soap, const char *URL, ns6__OCSPRefType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__OCSPRefType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__OCSPRefType(struct soap *soap, ns6__OCSPRefType *p)
{
	if (soap_read_ns6__OCSPRefType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__OCSPRefsType_DEFINED
#define SOAP_TYPE_ns6__OCSPRefsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__OCSPRefsType(struct soap*, const char*, int, const ns6__OCSPRefsType *, const char*);
SOAP_FMAC3 ns6__OCSPRefsType * SOAP_FMAC4 soap_in_ns6__OCSPRefsType(struct soap*, const char*, ns6__OCSPRefsType *, const char*);
SOAP_FMAC1 ns6__OCSPRefsType * SOAP_FMAC2 SCAP_instantiate_ns6__OCSPRefsType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__OCSPRefsType * soap_new_ns6__OCSPRefsType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__OCSPRefsType(soap, n, NULL, NULL, NULL);
}

inline ns6__OCSPRefsType * soap_new_req_ns6__OCSPRefsType(
	struct soap *soap,
	const std::vector<ns6__OCSPRefType *> & ns6__OCSPRef)
{
	ns6__OCSPRefsType *_p = soap_new_ns6__OCSPRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPRefsType::ns6__OCSPRef = ns6__OCSPRef;
	}
	return _p;
}

inline ns6__OCSPRefsType * soap_new_set_ns6__OCSPRefsType(
	struct soap *soap,
	const std::vector<ns6__OCSPRefType *> & ns6__OCSPRef)
{
	ns6__OCSPRefsType *_p = soap_new_ns6__OCSPRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__OCSPRefsType::ns6__OCSPRef = ns6__OCSPRef;
	}
	return _p;
}

inline int soap_write_ns6__OCSPRefsType(struct soap *soap, ns6__OCSPRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPRefsType", p->soap_type() == SOAP_TYPE_ns6__OCSPRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__OCSPRefsType(struct soap *soap, const char *URL, ns6__OCSPRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPRefsType", p->soap_type() == SOAP_TYPE_ns6__OCSPRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__OCSPRefsType(struct soap *soap, const char *URL, ns6__OCSPRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:OCSPRefsType", p->soap_type() == SOAP_TYPE_ns6__OCSPRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__OCSPRefsType * SOAP_FMAC4 soap_get_ns6__OCSPRefsType(struct soap*, ns6__OCSPRefsType *, const char*, const char*);

inline int soap_read_ns6__OCSPRefsType(struct soap *soap, ns6__OCSPRefsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__OCSPRefsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__OCSPRefsType(struct soap *soap, const char *URL, ns6__OCSPRefsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__OCSPRefsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__OCSPRefsType(struct soap *soap, ns6__OCSPRefsType *p)
{
	if (soap_read_ns6__OCSPRefsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CRLIdentifierType_DEFINED
#define SOAP_TYPE_ns6__CRLIdentifierType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CRLIdentifierType(struct soap*, const char*, int, const ns6__CRLIdentifierType *, const char*);
SOAP_FMAC3 ns6__CRLIdentifierType * SOAP_FMAC4 soap_in_ns6__CRLIdentifierType(struct soap*, const char*, ns6__CRLIdentifierType *, const char*);
SOAP_FMAC1 ns6__CRLIdentifierType * SOAP_FMAC2 SCAP_instantiate_ns6__CRLIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CRLIdentifierType * soap_new_ns6__CRLIdentifierType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CRLIdentifierType(soap, n, NULL, NULL, NULL);
}

inline ns6__CRLIdentifierType * soap_new_req_ns6__CRLIdentifierType(
	struct soap *soap,
	char *ns6__Issuer,
	char *ns6__IssueTime,
	char *ns6__Number)
{
	ns6__CRLIdentifierType *_p = soap_new_ns6__CRLIdentifierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLIdentifierType::ns6__Issuer = ns6__Issuer;
		_p->ns6__CRLIdentifierType::ns6__IssueTime = ns6__IssueTime;
		_p->ns6__CRLIdentifierType::ns6__Number = ns6__Number;
	}
	return _p;
}

inline ns6__CRLIdentifierType * soap_new_set_ns6__CRLIdentifierType(
	struct soap *soap,
	char *ns6__Issuer,
	char *ns6__IssueTime,
	char *ns6__Number)
{
	ns6__CRLIdentifierType *_p = soap_new_ns6__CRLIdentifierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLIdentifierType::ns6__Issuer = ns6__Issuer;
		_p->ns6__CRLIdentifierType::ns6__IssueTime = ns6__IssueTime;
		_p->ns6__CRLIdentifierType::ns6__Number = ns6__Number;
	}
	return _p;
}

inline int soap_write_ns6__CRLIdentifierType(struct soap *soap, ns6__CRLIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLIdentifierType", p->soap_type() == SOAP_TYPE_ns6__CRLIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CRLIdentifierType(struct soap *soap, const char *URL, ns6__CRLIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLIdentifierType", p->soap_type() == SOAP_TYPE_ns6__CRLIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CRLIdentifierType(struct soap *soap, const char *URL, ns6__CRLIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLIdentifierType", p->soap_type() == SOAP_TYPE_ns6__CRLIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CRLIdentifierType * SOAP_FMAC4 soap_get_ns6__CRLIdentifierType(struct soap*, ns6__CRLIdentifierType *, const char*, const char*);

inline int soap_read_ns6__CRLIdentifierType(struct soap *soap, ns6__CRLIdentifierType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CRLIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CRLIdentifierType(struct soap *soap, const char *URL, ns6__CRLIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CRLIdentifierType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CRLIdentifierType(struct soap *soap, ns6__CRLIdentifierType *p)
{
	if (soap_read_ns6__CRLIdentifierType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__DigestAlgAndValueType_DEFINED
#define SOAP_TYPE_ns6__DigestAlgAndValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__DigestAlgAndValueType(struct soap*, const char*, int, const ns6__DigestAlgAndValueType *, const char*);
SOAP_FMAC3 ns6__DigestAlgAndValueType * SOAP_FMAC4 soap_in_ns6__DigestAlgAndValueType(struct soap*, const char*, ns6__DigestAlgAndValueType *, const char*);
SOAP_FMAC1 ns6__DigestAlgAndValueType * SOAP_FMAC2 SCAP_instantiate_ns6__DigestAlgAndValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__DigestAlgAndValueType * soap_new_ns6__DigestAlgAndValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__DigestAlgAndValueType(soap, n, NULL, NULL, NULL);
}

inline ns6__DigestAlgAndValueType * soap_new_req_ns6__DigestAlgAndValueType(
	struct soap *soap,
	ns5__DigestMethodType *ns5__DigestMethod,
	ns5__DigestValueType *ns5__DigestValue)
{
	ns6__DigestAlgAndValueType *_p = soap_new_ns6__DigestAlgAndValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__DigestAlgAndValueType::ns5__DigestMethod = ns5__DigestMethod;
		_p->ns6__DigestAlgAndValueType::ns5__DigestValue = ns5__DigestValue;
	}
	return _p;
}

inline ns6__DigestAlgAndValueType * soap_new_set_ns6__DigestAlgAndValueType(
	struct soap *soap,
	ns5__DigestMethodType *ns5__DigestMethod,
	ns5__DigestValueType *ns5__DigestValue)
{
	ns6__DigestAlgAndValueType *_p = soap_new_ns6__DigestAlgAndValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__DigestAlgAndValueType::ns5__DigestMethod = ns5__DigestMethod;
		_p->ns6__DigestAlgAndValueType::ns5__DigestValue = ns5__DigestValue;
	}
	return _p;
}

inline int soap_write_ns6__DigestAlgAndValueType(struct soap *soap, ns6__DigestAlgAndValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:DigestAlgAndValueType", p->soap_type() == SOAP_TYPE_ns6__DigestAlgAndValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__DigestAlgAndValueType(struct soap *soap, const char *URL, ns6__DigestAlgAndValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:DigestAlgAndValueType", p->soap_type() == SOAP_TYPE_ns6__DigestAlgAndValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__DigestAlgAndValueType(struct soap *soap, const char *URL, ns6__DigestAlgAndValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:DigestAlgAndValueType", p->soap_type() == SOAP_TYPE_ns6__DigestAlgAndValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__DigestAlgAndValueType * SOAP_FMAC4 soap_get_ns6__DigestAlgAndValueType(struct soap*, ns6__DigestAlgAndValueType *, const char*, const char*);

inline int soap_read_ns6__DigestAlgAndValueType(struct soap *soap, ns6__DigestAlgAndValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__DigestAlgAndValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__DigestAlgAndValueType(struct soap *soap, const char *URL, ns6__DigestAlgAndValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__DigestAlgAndValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__DigestAlgAndValueType(struct soap *soap, ns6__DigestAlgAndValueType *p)
{
	if (soap_read_ns6__DigestAlgAndValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CRLRefType_DEFINED
#define SOAP_TYPE_ns6__CRLRefType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CRLRefType(struct soap*, const char*, int, const ns6__CRLRefType *, const char*);
SOAP_FMAC3 ns6__CRLRefType * SOAP_FMAC4 soap_in_ns6__CRLRefType(struct soap*, const char*, ns6__CRLRefType *, const char*);
SOAP_FMAC1 ns6__CRLRefType * SOAP_FMAC2 SCAP_instantiate_ns6__CRLRefType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CRLRefType * soap_new_ns6__CRLRefType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CRLRefType(soap, n, NULL, NULL, NULL);
}

inline ns6__CRLRefType * soap_new_req_ns6__CRLRefType(
	struct soap *soap,
	ns6__DigestAlgAndValueType *ns6__DigestAlgAndValue,
	ns6__CRLIdentifierType *ns6__CRLIdentifier)
{
	ns6__CRLRefType *_p = soap_new_ns6__CRLRefType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLRefType::ns6__DigestAlgAndValue = ns6__DigestAlgAndValue;
		_p->ns6__CRLRefType::ns6__CRLIdentifier = ns6__CRLIdentifier;
	}
	return _p;
}

inline ns6__CRLRefType * soap_new_set_ns6__CRLRefType(
	struct soap *soap,
	ns6__DigestAlgAndValueType *ns6__DigestAlgAndValue,
	ns6__CRLIdentifierType *ns6__CRLIdentifier)
{
	ns6__CRLRefType *_p = soap_new_ns6__CRLRefType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLRefType::ns6__DigestAlgAndValue = ns6__DigestAlgAndValue;
		_p->ns6__CRLRefType::ns6__CRLIdentifier = ns6__CRLIdentifier;
	}
	return _p;
}

inline int soap_write_ns6__CRLRefType(struct soap *soap, ns6__CRLRefType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLRefType", p->soap_type() == SOAP_TYPE_ns6__CRLRefType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CRLRefType(struct soap *soap, const char *URL, ns6__CRLRefType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLRefType", p->soap_type() == SOAP_TYPE_ns6__CRLRefType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CRLRefType(struct soap *soap, const char *URL, ns6__CRLRefType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLRefType", p->soap_type() == SOAP_TYPE_ns6__CRLRefType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CRLRefType * SOAP_FMAC4 soap_get_ns6__CRLRefType(struct soap*, ns6__CRLRefType *, const char*, const char*);

inline int soap_read_ns6__CRLRefType(struct soap *soap, ns6__CRLRefType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CRLRefType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CRLRefType(struct soap *soap, const char *URL, ns6__CRLRefType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CRLRefType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CRLRefType(struct soap *soap, ns6__CRLRefType *p)
{
	if (soap_read_ns6__CRLRefType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CRLRefsType_DEFINED
#define SOAP_TYPE_ns6__CRLRefsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CRLRefsType(struct soap*, const char*, int, const ns6__CRLRefsType *, const char*);
SOAP_FMAC3 ns6__CRLRefsType * SOAP_FMAC4 soap_in_ns6__CRLRefsType(struct soap*, const char*, ns6__CRLRefsType *, const char*);
SOAP_FMAC1 ns6__CRLRefsType * SOAP_FMAC2 SCAP_instantiate_ns6__CRLRefsType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CRLRefsType * soap_new_ns6__CRLRefsType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CRLRefsType(soap, n, NULL, NULL, NULL);
}

inline ns6__CRLRefsType * soap_new_req_ns6__CRLRefsType(
	struct soap *soap,
	const std::vector<ns6__CRLRefType *> & ns6__CRLRef)
{
	ns6__CRLRefsType *_p = soap_new_ns6__CRLRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLRefsType::ns6__CRLRef = ns6__CRLRef;
	}
	return _p;
}

inline ns6__CRLRefsType * soap_new_set_ns6__CRLRefsType(
	struct soap *soap,
	const std::vector<ns6__CRLRefType *> & ns6__CRLRef)
{
	ns6__CRLRefsType *_p = soap_new_ns6__CRLRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CRLRefsType::ns6__CRLRef = ns6__CRLRef;
	}
	return _p;
}

inline int soap_write_ns6__CRLRefsType(struct soap *soap, ns6__CRLRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLRefsType", p->soap_type() == SOAP_TYPE_ns6__CRLRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CRLRefsType(struct soap *soap, const char *URL, ns6__CRLRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLRefsType", p->soap_type() == SOAP_TYPE_ns6__CRLRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CRLRefsType(struct soap *soap, const char *URL, ns6__CRLRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CRLRefsType", p->soap_type() == SOAP_TYPE_ns6__CRLRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CRLRefsType * SOAP_FMAC4 soap_get_ns6__CRLRefsType(struct soap*, ns6__CRLRefsType *, const char*, const char*);

inline int soap_read_ns6__CRLRefsType(struct soap *soap, ns6__CRLRefsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CRLRefsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CRLRefsType(struct soap *soap, const char *URL, ns6__CRLRefsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CRLRefsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CRLRefsType(struct soap *soap, ns6__CRLRefsType *p)
{
	if (soap_read_ns6__CRLRefsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CompleteRevocationRefsType_DEFINED
#define SOAP_TYPE_ns6__CompleteRevocationRefsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CompleteRevocationRefsType(struct soap*, const char*, int, const ns6__CompleteRevocationRefsType *, const char*);
SOAP_FMAC3 ns6__CompleteRevocationRefsType * SOAP_FMAC4 soap_in_ns6__CompleteRevocationRefsType(struct soap*, const char*, ns6__CompleteRevocationRefsType *, const char*);
SOAP_FMAC1 ns6__CompleteRevocationRefsType * SOAP_FMAC2 SCAP_instantiate_ns6__CompleteRevocationRefsType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CompleteRevocationRefsType * soap_new_ns6__CompleteRevocationRefsType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CompleteRevocationRefsType(soap, n, NULL, NULL, NULL);
}

inline ns6__CompleteRevocationRefsType * soap_new_req_ns6__CompleteRevocationRefsType(
	struct soap *soap,
	ns6__CRLRefsType *ns6__CRLRefs,
	ns6__OCSPRefsType *ns6__OCSPRefs)
{
	ns6__CompleteRevocationRefsType *_p = soap_new_ns6__CompleteRevocationRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CompleteRevocationRefsType::ns6__CRLRefs = ns6__CRLRefs;
		_p->ns6__CompleteRevocationRefsType::ns6__OCSPRefs = ns6__OCSPRefs;
	}
	return _p;
}

inline ns6__CompleteRevocationRefsType * soap_new_set_ns6__CompleteRevocationRefsType(
	struct soap *soap,
	ns6__CRLRefsType *ns6__CRLRefs,
	ns6__OCSPRefsType *ns6__OCSPRefs)
{
	ns6__CompleteRevocationRefsType *_p = soap_new_ns6__CompleteRevocationRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CompleteRevocationRefsType::ns6__CRLRefs = ns6__CRLRefs;
		_p->ns6__CompleteRevocationRefsType::ns6__OCSPRefs = ns6__OCSPRefs;
	}
	return _p;
}

inline int soap_write_ns6__CompleteRevocationRefsType(struct soap *soap, ns6__CompleteRevocationRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CompleteRevocationRefsType", p->soap_type() == SOAP_TYPE_ns6__CompleteRevocationRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CompleteRevocationRefsType(struct soap *soap, const char *URL, ns6__CompleteRevocationRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CompleteRevocationRefsType", p->soap_type() == SOAP_TYPE_ns6__CompleteRevocationRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CompleteRevocationRefsType(struct soap *soap, const char *URL, ns6__CompleteRevocationRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CompleteRevocationRefsType", p->soap_type() == SOAP_TYPE_ns6__CompleteRevocationRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CompleteRevocationRefsType * SOAP_FMAC4 soap_get_ns6__CompleteRevocationRefsType(struct soap*, ns6__CompleteRevocationRefsType *, const char*, const char*);

inline int soap_read_ns6__CompleteRevocationRefsType(struct soap *soap, ns6__CompleteRevocationRefsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CompleteRevocationRefsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CompleteRevocationRefsType(struct soap *soap, const char *URL, ns6__CompleteRevocationRefsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CompleteRevocationRefsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CompleteRevocationRefsType(struct soap *soap, ns6__CompleteRevocationRefsType *p)
{
	if (soap_read_ns6__CompleteRevocationRefsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CertRefsType_DEFINED
#define SOAP_TYPE_ns6__CertRefsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CertRefsType(struct soap*, const char*, int, const ns6__CertRefsType *, const char*);
SOAP_FMAC3 ns6__CertRefsType * SOAP_FMAC4 soap_in_ns6__CertRefsType(struct soap*, const char*, ns6__CertRefsType *, const char*);
SOAP_FMAC1 ns6__CertRefsType * SOAP_FMAC2 SCAP_instantiate_ns6__CertRefsType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CertRefsType * soap_new_ns6__CertRefsType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CertRefsType(soap, n, NULL, NULL, NULL);
}

inline ns6__CertRefsType * soap_new_req_ns6__CertRefsType(
	struct soap *soap,
	const std::vector<ns6__CertType *> & ns6__Cert)
{
	ns6__CertRefsType *_p = soap_new_ns6__CertRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertRefsType::ns6__Cert = ns6__Cert;
	}
	return _p;
}

inline ns6__CertRefsType * soap_new_set_ns6__CertRefsType(
	struct soap *soap,
	const std::vector<ns6__CertType *> & ns6__Cert)
{
	ns6__CertRefsType *_p = soap_new_ns6__CertRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertRefsType::ns6__Cert = ns6__Cert;
	}
	return _p;
}

inline int soap_write_ns6__CertRefsType(struct soap *soap, ns6__CertRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertRefsType", p->soap_type() == SOAP_TYPE_ns6__CertRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CertRefsType(struct soap *soap, const char *URL, ns6__CertRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertRefsType", p->soap_type() == SOAP_TYPE_ns6__CertRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CertRefsType(struct soap *soap, const char *URL, ns6__CertRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertRefsType", p->soap_type() == SOAP_TYPE_ns6__CertRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CertRefsType * SOAP_FMAC4 soap_get_ns6__CertRefsType(struct soap*, ns6__CertRefsType *, const char*, const char*);

inline int soap_read_ns6__CertRefsType(struct soap *soap, ns6__CertRefsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CertRefsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CertRefsType(struct soap *soap, const char *URL, ns6__CertRefsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CertRefsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CertRefsType(struct soap *soap, ns6__CertRefsType *p)
{
	if (soap_read_ns6__CertRefsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CompleteCertificateRefsType_DEFINED
#define SOAP_TYPE_ns6__CompleteCertificateRefsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CompleteCertificateRefsType(struct soap*, const char*, int, const ns6__CompleteCertificateRefsType *, const char*);
SOAP_FMAC3 ns6__CompleteCertificateRefsType * SOAP_FMAC4 soap_in_ns6__CompleteCertificateRefsType(struct soap*, const char*, ns6__CompleteCertificateRefsType *, const char*);
SOAP_FMAC1 ns6__CompleteCertificateRefsType * SOAP_FMAC2 SCAP_instantiate_ns6__CompleteCertificateRefsType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CompleteCertificateRefsType * soap_new_ns6__CompleteCertificateRefsType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CompleteCertificateRefsType(soap, n, NULL, NULL, NULL);
}

inline ns6__CompleteCertificateRefsType * soap_new_req_ns6__CompleteCertificateRefsType(
	struct soap *soap,
	ns6__CertRefsType *ns6__CertRefs)
{
	ns6__CompleteCertificateRefsType *_p = soap_new_ns6__CompleteCertificateRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CompleteCertificateRefsType::ns6__CertRefs = ns6__CertRefs;
	}
	return _p;
}

inline ns6__CompleteCertificateRefsType * soap_new_set_ns6__CompleteCertificateRefsType(
	struct soap *soap,
	ns6__CertRefsType *ns6__CertRefs)
{
	ns6__CompleteCertificateRefsType *_p = soap_new_ns6__CompleteCertificateRefsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CompleteCertificateRefsType::ns6__CertRefs = ns6__CertRefs;
	}
	return _p;
}

inline int soap_write_ns6__CompleteCertificateRefsType(struct soap *soap, ns6__CompleteCertificateRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CompleteCertificateRefsType", p->soap_type() == SOAP_TYPE_ns6__CompleteCertificateRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CompleteCertificateRefsType(struct soap *soap, const char *URL, ns6__CompleteCertificateRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CompleteCertificateRefsType", p->soap_type() == SOAP_TYPE_ns6__CompleteCertificateRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CompleteCertificateRefsType(struct soap *soap, const char *URL, ns6__CompleteCertificateRefsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CompleteCertificateRefsType", p->soap_type() == SOAP_TYPE_ns6__CompleteCertificateRefsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CompleteCertificateRefsType * SOAP_FMAC4 soap_get_ns6__CompleteCertificateRefsType(struct soap*, ns6__CompleteCertificateRefsType *, const char*, const char*);

inline int soap_read_ns6__CompleteCertificateRefsType(struct soap *soap, ns6__CompleteCertificateRefsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CompleteCertificateRefsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CompleteCertificateRefsType(struct soap *soap, const char *URL, ns6__CompleteCertificateRefsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CompleteCertificateRefsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CompleteCertificateRefsType(struct soap *soap, ns6__CompleteCertificateRefsType *p)
{
	if (soap_read_ns6__CompleteCertificateRefsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SignatureTimeStampType_DEFINED
#define SOAP_TYPE_ns6__SignatureTimeStampType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SignatureTimeStampType(struct soap*, const char*, int, const ns6__SignatureTimeStampType *, const char*);
SOAP_FMAC3 ns6__SignatureTimeStampType * SOAP_FMAC4 soap_in_ns6__SignatureTimeStampType(struct soap*, const char*, ns6__SignatureTimeStampType *, const char*);
SOAP_FMAC1 ns6__SignatureTimeStampType * SOAP_FMAC2 SCAP_instantiate_ns6__SignatureTimeStampType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SignatureTimeStampType * soap_new_ns6__SignatureTimeStampType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__SignatureTimeStampType(soap, n, NULL, NULL, NULL);
}

inline ns6__SignatureTimeStampType * soap_new_req_ns6__SignatureTimeStampType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	const xsd__base64Binary& ns6__EncapsulatedTimeStamp)
{
	ns6__SignatureTimeStampType *_p = soap_new_ns6__SignatureTimeStampType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignatureTimeStampType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns6__SignatureTimeStampType::ns6__EncapsulatedTimeStamp = ns6__EncapsulatedTimeStamp;
	}
	return _p;
}

inline ns6__SignatureTimeStampType * soap_new_set_ns6__SignatureTimeStampType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	const xsd__base64Binary& ns6__EncapsulatedTimeStamp)
{
	ns6__SignatureTimeStampType *_p = soap_new_ns6__SignatureTimeStampType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignatureTimeStampType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns6__SignatureTimeStampType::ns6__EncapsulatedTimeStamp = ns6__EncapsulatedTimeStamp;
	}
	return _p;
}

inline int soap_write_ns6__SignatureTimeStampType(struct soap *soap, ns6__SignatureTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignatureTimeStampType", p->soap_type() == SOAP_TYPE_ns6__SignatureTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__SignatureTimeStampType(struct soap *soap, const char *URL, ns6__SignatureTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignatureTimeStampType", p->soap_type() == SOAP_TYPE_ns6__SignatureTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SignatureTimeStampType(struct soap *soap, const char *URL, ns6__SignatureTimeStampType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignatureTimeStampType", p->soap_type() == SOAP_TYPE_ns6__SignatureTimeStampType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__SignatureTimeStampType * SOAP_FMAC4 soap_get_ns6__SignatureTimeStampType(struct soap*, ns6__SignatureTimeStampType *, const char*, const char*);

inline int soap_read_ns6__SignatureTimeStampType(struct soap *soap, ns6__SignatureTimeStampType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__SignatureTimeStampType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SignatureTimeStampType(struct soap *soap, const char *URL, ns6__SignatureTimeStampType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SignatureTimeStampType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SignatureTimeStampType(struct soap *soap, ns6__SignatureTimeStampType *p)
{
	if (soap_read_ns6__SignatureTimeStampType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CounterSignatureType_DEFINED
#define SOAP_TYPE_ns6__CounterSignatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CounterSignatureType(struct soap*, const char*, int, const ns6__CounterSignatureType *, const char*);
SOAP_FMAC3 ns6__CounterSignatureType * SOAP_FMAC4 soap_in_ns6__CounterSignatureType(struct soap*, const char*, ns6__CounterSignatureType *, const char*);
SOAP_FMAC1 ns6__CounterSignatureType * SOAP_FMAC2 SCAP_instantiate_ns6__CounterSignatureType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CounterSignatureType * soap_new_ns6__CounterSignatureType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CounterSignatureType(soap, n, NULL, NULL, NULL);
}

inline ns6__CounterSignatureType * soap_new_req_ns6__CounterSignatureType(
	struct soap *soap,
	ns5__SignatureType *ns5__Signature)
{
	ns6__CounterSignatureType *_p = soap_new_ns6__CounterSignatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CounterSignatureType::ns5__Signature = ns5__Signature;
	}
	return _p;
}

inline ns6__CounterSignatureType * soap_new_set_ns6__CounterSignatureType(
	struct soap *soap,
	ns5__SignatureType *ns5__Signature)
{
	ns6__CounterSignatureType *_p = soap_new_ns6__CounterSignatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CounterSignatureType::ns5__Signature = ns5__Signature;
	}
	return _p;
}

inline int soap_write_ns6__CounterSignatureType(struct soap *soap, ns6__CounterSignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CounterSignatureType", p->soap_type() == SOAP_TYPE_ns6__CounterSignatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CounterSignatureType(struct soap *soap, const char *URL, ns6__CounterSignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CounterSignatureType", p->soap_type() == SOAP_TYPE_ns6__CounterSignatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CounterSignatureType(struct soap *soap, const char *URL, ns6__CounterSignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CounterSignatureType", p->soap_type() == SOAP_TYPE_ns6__CounterSignatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CounterSignatureType * SOAP_FMAC4 soap_get_ns6__CounterSignatureType(struct soap*, ns6__CounterSignatureType *, const char*, const char*);

inline int soap_read_ns6__CounterSignatureType(struct soap *soap, ns6__CounterSignatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CounterSignatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CounterSignatureType(struct soap *soap, const char *URL, ns6__CounterSignatureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CounterSignatureType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CounterSignatureType(struct soap *soap, ns6__CounterSignatureType *p)
{
	if (soap_read_ns6__CounterSignatureType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__UnsignedSignaturePropertiesType_DEFINED
#define SOAP_TYPE_ns6__UnsignedSignaturePropertiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__UnsignedSignaturePropertiesType(struct soap*, const char*, int, const ns6__UnsignedSignaturePropertiesType *, const char*);
SOAP_FMAC3 ns6__UnsignedSignaturePropertiesType * SOAP_FMAC4 soap_in_ns6__UnsignedSignaturePropertiesType(struct soap*, const char*, ns6__UnsignedSignaturePropertiesType *, const char*);
SOAP_FMAC1 ns6__UnsignedSignaturePropertiesType * SOAP_FMAC2 SCAP_instantiate_ns6__UnsignedSignaturePropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__UnsignedSignaturePropertiesType * soap_new_ns6__UnsignedSignaturePropertiesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__UnsignedSignaturePropertiesType(soap, n, NULL, NULL, NULL);
}

inline ns6__UnsignedSignaturePropertiesType * soap_new_req_ns6__UnsignedSignaturePropertiesType(
	struct soap *soap,
	ns6__SignatureTimeStampType *ns6__SignatureTimeStamp,
	ns6__CompleteCertificateRefsType *ns6__CompleteCertificateRefs,
	ns6__CompleteRevocationRefsType *ns6__CompleteRevocationRefs,
	ns6__SigAndRefsTimeStampType *ns6__SigAndRefsTimeStamp,
	ns6__CertificateValuesType *ns6__CertificateValues,
	ns6__RevocationValuesType *ns6__RevocationValues,
	ns6__ArchiveTimeStampType *ns6__ArchiveTimeStamp)
{
	ns6__UnsignedSignaturePropertiesType *_p = soap_new_ns6__UnsignedSignaturePropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__UnsignedSignaturePropertiesType::ns6__SignatureTimeStamp = ns6__SignatureTimeStamp;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CompleteCertificateRefs = ns6__CompleteCertificateRefs;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CompleteRevocationRefs = ns6__CompleteRevocationRefs;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__SigAndRefsTimeStamp = ns6__SigAndRefsTimeStamp;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CertificateValues = ns6__CertificateValues;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__RevocationValues = ns6__RevocationValues;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__ArchiveTimeStamp = ns6__ArchiveTimeStamp;
	}
	return _p;
}

inline ns6__UnsignedSignaturePropertiesType * soap_new_set_ns6__UnsignedSignaturePropertiesType(
	struct soap *soap,
	ns6__CounterSignatureType *ns6__CounterSignature,
	ns6__SignatureTimeStampType *ns6__SignatureTimeStamp,
	ns6__CompleteCertificateRefsType *ns6__CompleteCertificateRefs,
	ns6__CompleteRevocationRefsType *ns6__CompleteRevocationRefs,
	ns6__SigAndRefsTimeStampType *ns6__SigAndRefsTimeStamp,
	ns6__CertificateValuesType *ns6__CertificateValues,
	ns6__RevocationValuesType *ns6__RevocationValues,
	ns6__ArchiveTimeStampType *ns6__ArchiveTimeStamp)
{
	ns6__UnsignedSignaturePropertiesType *_p = soap_new_ns6__UnsignedSignaturePropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CounterSignature = ns6__CounterSignature;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__SignatureTimeStamp = ns6__SignatureTimeStamp;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CompleteCertificateRefs = ns6__CompleteCertificateRefs;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CompleteRevocationRefs = ns6__CompleteRevocationRefs;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__SigAndRefsTimeStamp = ns6__SigAndRefsTimeStamp;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__CertificateValues = ns6__CertificateValues;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__RevocationValues = ns6__RevocationValues;
		_p->ns6__UnsignedSignaturePropertiesType::ns6__ArchiveTimeStamp = ns6__ArchiveTimeStamp;
	}
	return _p;
}

inline int soap_write_ns6__UnsignedSignaturePropertiesType(struct soap *soap, ns6__UnsignedSignaturePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:UnsignedSignaturePropertiesType", p->soap_type() == SOAP_TYPE_ns6__UnsignedSignaturePropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__UnsignedSignaturePropertiesType(struct soap *soap, const char *URL, ns6__UnsignedSignaturePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:UnsignedSignaturePropertiesType", p->soap_type() == SOAP_TYPE_ns6__UnsignedSignaturePropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__UnsignedSignaturePropertiesType(struct soap *soap, const char *URL, ns6__UnsignedSignaturePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:UnsignedSignaturePropertiesType", p->soap_type() == SOAP_TYPE_ns6__UnsignedSignaturePropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__UnsignedSignaturePropertiesType * SOAP_FMAC4 soap_get_ns6__UnsignedSignaturePropertiesType(struct soap*, ns6__UnsignedSignaturePropertiesType *, const char*, const char*);

inline int soap_read_ns6__UnsignedSignaturePropertiesType(struct soap *soap, ns6__UnsignedSignaturePropertiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__UnsignedSignaturePropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__UnsignedSignaturePropertiesType(struct soap *soap, const char *URL, ns6__UnsignedSignaturePropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__UnsignedSignaturePropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__UnsignedSignaturePropertiesType(struct soap *soap, ns6__UnsignedSignaturePropertiesType *p)
{
	if (soap_read_ns6__UnsignedSignaturePropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__UnsignedPropertiesType_DEFINED
#define SOAP_TYPE_ns6__UnsignedPropertiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__UnsignedPropertiesType(struct soap*, const char*, int, const ns6__UnsignedPropertiesType *, const char*);
SOAP_FMAC3 ns6__UnsignedPropertiesType * SOAP_FMAC4 soap_in_ns6__UnsignedPropertiesType(struct soap*, const char*, ns6__UnsignedPropertiesType *, const char*);
SOAP_FMAC1 ns6__UnsignedPropertiesType * SOAP_FMAC2 SCAP_instantiate_ns6__UnsignedPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__UnsignedPropertiesType * soap_new_ns6__UnsignedPropertiesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__UnsignedPropertiesType(soap, n, NULL, NULL, NULL);
}

inline ns6__UnsignedPropertiesType * soap_new_req_ns6__UnsignedPropertiesType(
	struct soap *soap,
	ns6__UnsignedSignaturePropertiesType *ns6__UnsignedSignatureProperties)
{
	ns6__UnsignedPropertiesType *_p = soap_new_ns6__UnsignedPropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__UnsignedPropertiesType::ns6__UnsignedSignatureProperties = ns6__UnsignedSignatureProperties;
	}
	return _p;
}

inline ns6__UnsignedPropertiesType * soap_new_set_ns6__UnsignedPropertiesType(
	struct soap *soap,
	ns6__UnsignedSignaturePropertiesType *ns6__UnsignedSignatureProperties)
{
	ns6__UnsignedPropertiesType *_p = soap_new_ns6__UnsignedPropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__UnsignedPropertiesType::ns6__UnsignedSignatureProperties = ns6__UnsignedSignatureProperties;
	}
	return _p;
}

inline int soap_write_ns6__UnsignedPropertiesType(struct soap *soap, ns6__UnsignedPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:UnsignedPropertiesType", p->soap_type() == SOAP_TYPE_ns6__UnsignedPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__UnsignedPropertiesType(struct soap *soap, const char *URL, ns6__UnsignedPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:UnsignedPropertiesType", p->soap_type() == SOAP_TYPE_ns6__UnsignedPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__UnsignedPropertiesType(struct soap *soap, const char *URL, ns6__UnsignedPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:UnsignedPropertiesType", p->soap_type() == SOAP_TYPE_ns6__UnsignedPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__UnsignedPropertiesType * SOAP_FMAC4 soap_get_ns6__UnsignedPropertiesType(struct soap*, ns6__UnsignedPropertiesType *, const char*, const char*);

inline int soap_read_ns6__UnsignedPropertiesType(struct soap *soap, ns6__UnsignedPropertiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__UnsignedPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__UnsignedPropertiesType(struct soap *soap, const char *URL, ns6__UnsignedPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__UnsignedPropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__UnsignedPropertiesType(struct soap *soap, ns6__UnsignedPropertiesType *p)
{
	if (soap_read_ns6__UnsignedPropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ClaimedRoleType_DEFINED
#define SOAP_TYPE_ns6__ClaimedRoleType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ClaimedRoleType(struct soap*, const char*, int, const ns6__ClaimedRoleType *, const char*);
SOAP_FMAC3 ns6__ClaimedRoleType * SOAP_FMAC4 soap_in_ns6__ClaimedRoleType(struct soap*, const char*, ns6__ClaimedRoleType *, const char*);
SOAP_FMAC1 ns6__ClaimedRoleType * SOAP_FMAC2 SCAP_instantiate_ns6__ClaimedRoleType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ClaimedRoleType * soap_new_ns6__ClaimedRoleType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__ClaimedRoleType(soap, n, NULL, NULL, NULL);
}

inline ns6__ClaimedRoleType * soap_new_req_ns6__ClaimedRoleType(
	struct soap *soap,
	ns5__SignatureType *ns3__SignatureAttribute)
{
	ns6__ClaimedRoleType *_p = soap_new_ns6__ClaimedRoleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ClaimedRoleType::ns3__SignatureAttribute = ns3__SignatureAttribute;
	}
	return _p;
}

inline ns6__ClaimedRoleType * soap_new_set_ns6__ClaimedRoleType(
	struct soap *soap,
	ns5__SignatureType *ns3__SignatureAttribute)
{
	ns6__ClaimedRoleType *_p = soap_new_ns6__ClaimedRoleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ClaimedRoleType::ns3__SignatureAttribute = ns3__SignatureAttribute;
	}
	return _p;
}

inline int soap_write_ns6__ClaimedRoleType(struct soap *soap, ns6__ClaimedRoleType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ClaimedRoleType", p->soap_type() == SOAP_TYPE_ns6__ClaimedRoleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__ClaimedRoleType(struct soap *soap, const char *URL, ns6__ClaimedRoleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ClaimedRoleType", p->soap_type() == SOAP_TYPE_ns6__ClaimedRoleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ClaimedRoleType(struct soap *soap, const char *URL, ns6__ClaimedRoleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ClaimedRoleType", p->soap_type() == SOAP_TYPE_ns6__ClaimedRoleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__ClaimedRoleType * SOAP_FMAC4 soap_get_ns6__ClaimedRoleType(struct soap*, ns6__ClaimedRoleType *, const char*, const char*);

inline int soap_read_ns6__ClaimedRoleType(struct soap *soap, ns6__ClaimedRoleType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__ClaimedRoleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ClaimedRoleType(struct soap *soap, const char *URL, ns6__ClaimedRoleType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ClaimedRoleType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ClaimedRoleType(struct soap *soap, ns6__ClaimedRoleType *p)
{
	if (soap_read_ns6__ClaimedRoleType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__ClaimedRolesListType_DEFINED
#define SOAP_TYPE_ns6__ClaimedRolesListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ClaimedRolesListType(struct soap*, const char*, int, const ns6__ClaimedRolesListType *, const char*);
SOAP_FMAC3 ns6__ClaimedRolesListType * SOAP_FMAC4 soap_in_ns6__ClaimedRolesListType(struct soap*, const char*, ns6__ClaimedRolesListType *, const char*);
SOAP_FMAC1 ns6__ClaimedRolesListType * SOAP_FMAC2 SCAP_instantiate_ns6__ClaimedRolesListType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__ClaimedRolesListType * soap_new_ns6__ClaimedRolesListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__ClaimedRolesListType(soap, n, NULL, NULL, NULL);
}

inline ns6__ClaimedRolesListType * soap_new_req_ns6__ClaimedRolesListType(
	struct soap *soap,
	const std::vector<ns6__ClaimedRoleType *> & ns6__ClaimedRole)
{
	ns6__ClaimedRolesListType *_p = soap_new_ns6__ClaimedRolesListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ClaimedRolesListType::ns6__ClaimedRole = ns6__ClaimedRole;
	}
	return _p;
}

inline ns6__ClaimedRolesListType * soap_new_set_ns6__ClaimedRolesListType(
	struct soap *soap,
	const std::vector<ns6__ClaimedRoleType *> & ns6__ClaimedRole)
{
	ns6__ClaimedRolesListType *_p = soap_new_ns6__ClaimedRolesListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__ClaimedRolesListType::ns6__ClaimedRole = ns6__ClaimedRole;
	}
	return _p;
}

inline int soap_write_ns6__ClaimedRolesListType(struct soap *soap, ns6__ClaimedRolesListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ClaimedRolesListType", p->soap_type() == SOAP_TYPE_ns6__ClaimedRolesListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__ClaimedRolesListType(struct soap *soap, const char *URL, ns6__ClaimedRolesListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ClaimedRolesListType", p->soap_type() == SOAP_TYPE_ns6__ClaimedRolesListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__ClaimedRolesListType(struct soap *soap, const char *URL, ns6__ClaimedRolesListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:ClaimedRolesListType", p->soap_type() == SOAP_TYPE_ns6__ClaimedRolesListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__ClaimedRolesListType * SOAP_FMAC4 soap_get_ns6__ClaimedRolesListType(struct soap*, ns6__ClaimedRolesListType *, const char*, const char*);

inline int soap_read_ns6__ClaimedRolesListType(struct soap *soap, ns6__ClaimedRolesListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__ClaimedRolesListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__ClaimedRolesListType(struct soap *soap, const char *URL, ns6__ClaimedRolesListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__ClaimedRolesListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__ClaimedRolesListType(struct soap *soap, ns6__ClaimedRolesListType *p)
{
	if (soap_read_ns6__ClaimedRolesListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SignerRoleType_DEFINED
#define SOAP_TYPE_ns6__SignerRoleType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SignerRoleType(struct soap*, const char*, int, const ns6__SignerRoleType *, const char*);
SOAP_FMAC3 ns6__SignerRoleType * SOAP_FMAC4 soap_in_ns6__SignerRoleType(struct soap*, const char*, ns6__SignerRoleType *, const char*);
SOAP_FMAC1 ns6__SignerRoleType * SOAP_FMAC2 SCAP_instantiate_ns6__SignerRoleType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SignerRoleType * soap_new_ns6__SignerRoleType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__SignerRoleType(soap, n, NULL, NULL, NULL);
}

inline ns6__SignerRoleType * soap_new_req_ns6__SignerRoleType(
	struct soap *soap,
	ns6__ClaimedRolesListType *ns6__ClaimedRoles)
{
	ns6__SignerRoleType *_p = soap_new_ns6__SignerRoleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignerRoleType::ns6__ClaimedRoles = ns6__ClaimedRoles;
	}
	return _p;
}

inline ns6__SignerRoleType * soap_new_set_ns6__SignerRoleType(
	struct soap *soap,
	ns6__ClaimedRolesListType *ns6__ClaimedRoles)
{
	ns6__SignerRoleType *_p = soap_new_ns6__SignerRoleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignerRoleType::ns6__ClaimedRoles = ns6__ClaimedRoles;
	}
	return _p;
}

inline int soap_write_ns6__SignerRoleType(struct soap *soap, ns6__SignerRoleType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignerRoleType", p->soap_type() == SOAP_TYPE_ns6__SignerRoleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__SignerRoleType(struct soap *soap, const char *URL, ns6__SignerRoleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignerRoleType", p->soap_type() == SOAP_TYPE_ns6__SignerRoleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SignerRoleType(struct soap *soap, const char *URL, ns6__SignerRoleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignerRoleType", p->soap_type() == SOAP_TYPE_ns6__SignerRoleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__SignerRoleType * SOAP_FMAC4 soap_get_ns6__SignerRoleType(struct soap*, ns6__SignerRoleType *, const char*, const char*);

inline int soap_read_ns6__SignerRoleType(struct soap *soap, ns6__SignerRoleType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__SignerRoleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SignerRoleType(struct soap *soap, const char *URL, ns6__SignerRoleType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SignerRoleType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SignerRoleType(struct soap *soap, ns6__SignerRoleType *p)
{
	if (soap_read_ns6__SignerRoleType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__IssuerSerialType_DEFINED
#define SOAP_TYPE_ns6__IssuerSerialType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__IssuerSerialType(struct soap*, const char*, int, const ns6__IssuerSerialType *, const char*);
SOAP_FMAC3 ns6__IssuerSerialType * SOAP_FMAC4 soap_in_ns6__IssuerSerialType(struct soap*, const char*, ns6__IssuerSerialType *, const char*);
SOAP_FMAC1 ns6__IssuerSerialType * SOAP_FMAC2 SCAP_instantiate_ns6__IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__IssuerSerialType * soap_new_ns6__IssuerSerialType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__IssuerSerialType(soap, n, NULL, NULL, NULL);
}

inline ns6__IssuerSerialType * soap_new_req_ns6__IssuerSerialType(
	struct soap *soap,
	const std::string& ns5__X509IssuerName,
	const std::string& ns5__X509SerialNumber)
{
	ns6__IssuerSerialType *_p = soap_new_ns6__IssuerSerialType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__IssuerSerialType::ns5__X509IssuerName = ns5__X509IssuerName;
		_p->ns6__IssuerSerialType::ns5__X509SerialNumber = ns5__X509SerialNumber;
	}
	return _p;
}

inline ns6__IssuerSerialType * soap_new_set_ns6__IssuerSerialType(
	struct soap *soap,
	const std::string& ns5__X509IssuerName,
	const std::string& ns5__X509SerialNumber)
{
	ns6__IssuerSerialType *_p = soap_new_ns6__IssuerSerialType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__IssuerSerialType::ns5__X509IssuerName = ns5__X509IssuerName;
		_p->ns6__IssuerSerialType::ns5__X509SerialNumber = ns5__X509SerialNumber;
	}
	return _p;
}

inline int soap_write_ns6__IssuerSerialType(struct soap *soap, ns6__IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:IssuerSerialType", p->soap_type() == SOAP_TYPE_ns6__IssuerSerialType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__IssuerSerialType(struct soap *soap, const char *URL, ns6__IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:IssuerSerialType", p->soap_type() == SOAP_TYPE_ns6__IssuerSerialType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__IssuerSerialType(struct soap *soap, const char *URL, ns6__IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:IssuerSerialType", p->soap_type() == SOAP_TYPE_ns6__IssuerSerialType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__IssuerSerialType * SOAP_FMAC4 soap_get_ns6__IssuerSerialType(struct soap*, ns6__IssuerSerialType *, const char*, const char*);

inline int soap_read_ns6__IssuerSerialType(struct soap *soap, ns6__IssuerSerialType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__IssuerSerialType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__IssuerSerialType(struct soap *soap, const char *URL, ns6__IssuerSerialType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__IssuerSerialType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__IssuerSerialType(struct soap *soap, ns6__IssuerSerialType *p)
{
	if (soap_read_ns6__IssuerSerialType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CertDigestType_DEFINED
#define SOAP_TYPE_ns6__CertDigestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CertDigestType(struct soap*, const char*, int, const ns6__CertDigestType *, const char*);
SOAP_FMAC3 ns6__CertDigestType * SOAP_FMAC4 soap_in_ns6__CertDigestType(struct soap*, const char*, ns6__CertDigestType *, const char*);
SOAP_FMAC1 ns6__CertDigestType * SOAP_FMAC2 SCAP_instantiate_ns6__CertDigestType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CertDigestType * soap_new_ns6__CertDigestType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CertDigestType(soap, n, NULL, NULL, NULL);
}

inline ns6__CertDigestType * soap_new_req_ns6__CertDigestType(
	struct soap *soap,
	ns5__DigestMethodType *ns5__DigestMethod,
	ns5__DigestValueType *ns5__DigestValue)
{
	ns6__CertDigestType *_p = soap_new_ns6__CertDigestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertDigestType::ns5__DigestMethod = ns5__DigestMethod;
		_p->ns6__CertDigestType::ns5__DigestValue = ns5__DigestValue;
	}
	return _p;
}

inline ns6__CertDigestType * soap_new_set_ns6__CertDigestType(
	struct soap *soap,
	ns5__DigestMethodType *ns5__DigestMethod,
	ns5__DigestValueType *ns5__DigestValue)
{
	ns6__CertDigestType *_p = soap_new_ns6__CertDigestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertDigestType::ns5__DigestMethod = ns5__DigestMethod;
		_p->ns6__CertDigestType::ns5__DigestValue = ns5__DigestValue;
	}
	return _p;
}

inline int soap_write_ns6__CertDigestType(struct soap *soap, ns6__CertDigestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertDigestType", p->soap_type() == SOAP_TYPE_ns6__CertDigestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CertDigestType(struct soap *soap, const char *URL, ns6__CertDigestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertDigestType", p->soap_type() == SOAP_TYPE_ns6__CertDigestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CertDigestType(struct soap *soap, const char *URL, ns6__CertDigestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertDigestType", p->soap_type() == SOAP_TYPE_ns6__CertDigestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CertDigestType * SOAP_FMAC4 soap_get_ns6__CertDigestType(struct soap*, ns6__CertDigestType *, const char*, const char*);

inline int soap_read_ns6__CertDigestType(struct soap *soap, ns6__CertDigestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CertDigestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CertDigestType(struct soap *soap, const char *URL, ns6__CertDigestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CertDigestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CertDigestType(struct soap *soap, ns6__CertDigestType *p)
{
	if (soap_read_ns6__CertDigestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__CertType_DEFINED
#define SOAP_TYPE_ns6__CertType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__CertType(struct soap*, const char*, int, const ns6__CertType *, const char*);
SOAP_FMAC3 ns6__CertType * SOAP_FMAC4 soap_in_ns6__CertType(struct soap*, const char*, ns6__CertType *, const char*);
SOAP_FMAC1 ns6__CertType * SOAP_FMAC2 SCAP_instantiate_ns6__CertType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__CertType * soap_new_ns6__CertType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__CertType(soap, n, NULL, NULL, NULL);
}

inline ns6__CertType * soap_new_req_ns6__CertType(
	struct soap *soap,
	ns6__CertDigestType *ns6__CertDigest,
	ns6__IssuerSerialType *ns6__IssuerSerial)
{
	ns6__CertType *_p = soap_new_ns6__CertType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertType::ns6__CertDigest = ns6__CertDigest;
		_p->ns6__CertType::ns6__IssuerSerial = ns6__IssuerSerial;
	}
	return _p;
}

inline ns6__CertType * soap_new_set_ns6__CertType(
	struct soap *soap,
	ns6__CertDigestType *ns6__CertDigest,
	ns6__IssuerSerialType *ns6__IssuerSerial)
{
	ns6__CertType *_p = soap_new_ns6__CertType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__CertType::ns6__CertDigest = ns6__CertDigest;
		_p->ns6__CertType::ns6__IssuerSerial = ns6__IssuerSerial;
	}
	return _p;
}

inline int soap_write_ns6__CertType(struct soap *soap, ns6__CertType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertType", p->soap_type() == SOAP_TYPE_ns6__CertType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__CertType(struct soap *soap, const char *URL, ns6__CertType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertType", p->soap_type() == SOAP_TYPE_ns6__CertType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__CertType(struct soap *soap, const char *URL, ns6__CertType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:CertType", p->soap_type() == SOAP_TYPE_ns6__CertType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__CertType * SOAP_FMAC4 soap_get_ns6__CertType(struct soap*, ns6__CertType *, const char*, const char*);

inline int soap_read_ns6__CertType(struct soap *soap, ns6__CertType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__CertType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__CertType(struct soap *soap, const char *URL, ns6__CertType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__CertType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__CertType(struct soap *soap, ns6__CertType *p)
{
	if (soap_read_ns6__CertType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SigningCertificateType_DEFINED
#define SOAP_TYPE_ns6__SigningCertificateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SigningCertificateType(struct soap*, const char*, int, const ns6__SigningCertificateType *, const char*);
SOAP_FMAC3 ns6__SigningCertificateType * SOAP_FMAC4 soap_in_ns6__SigningCertificateType(struct soap*, const char*, ns6__SigningCertificateType *, const char*);
SOAP_FMAC1 ns6__SigningCertificateType * SOAP_FMAC2 SCAP_instantiate_ns6__SigningCertificateType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SigningCertificateType * soap_new_ns6__SigningCertificateType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__SigningCertificateType(soap, n, NULL, NULL, NULL);
}

inline ns6__SigningCertificateType * soap_new_req_ns6__SigningCertificateType(
	struct soap *soap,
	ns6__CertType *ns6__Cert)
{
	ns6__SigningCertificateType *_p = soap_new_ns6__SigningCertificateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SigningCertificateType::ns6__Cert = ns6__Cert;
	}
	return _p;
}

inline ns6__SigningCertificateType * soap_new_set_ns6__SigningCertificateType(
	struct soap *soap,
	ns6__CertType *ns6__Cert)
{
	ns6__SigningCertificateType *_p = soap_new_ns6__SigningCertificateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SigningCertificateType::ns6__Cert = ns6__Cert;
	}
	return _p;
}

inline int soap_write_ns6__SigningCertificateType(struct soap *soap, ns6__SigningCertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SigningCertificateType", p->soap_type() == SOAP_TYPE_ns6__SigningCertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__SigningCertificateType(struct soap *soap, const char *URL, ns6__SigningCertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SigningCertificateType", p->soap_type() == SOAP_TYPE_ns6__SigningCertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SigningCertificateType(struct soap *soap, const char *URL, ns6__SigningCertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SigningCertificateType", p->soap_type() == SOAP_TYPE_ns6__SigningCertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__SigningCertificateType * SOAP_FMAC4 soap_get_ns6__SigningCertificateType(struct soap*, ns6__SigningCertificateType *, const char*, const char*);

inline int soap_read_ns6__SigningCertificateType(struct soap *soap, ns6__SigningCertificateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__SigningCertificateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SigningCertificateType(struct soap *soap, const char *URL, ns6__SigningCertificateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SigningCertificateType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SigningCertificateType(struct soap *soap, ns6__SigningCertificateType *p)
{
	if (soap_read_ns6__SigningCertificateType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SignedSignaturePropertiesType_DEFINED
#define SOAP_TYPE_ns6__SignedSignaturePropertiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SignedSignaturePropertiesType(struct soap*, const char*, int, const ns6__SignedSignaturePropertiesType *, const char*);
SOAP_FMAC3 ns6__SignedSignaturePropertiesType * SOAP_FMAC4 soap_in_ns6__SignedSignaturePropertiesType(struct soap*, const char*, ns6__SignedSignaturePropertiesType *, const char*);
SOAP_FMAC1 ns6__SignedSignaturePropertiesType * SOAP_FMAC2 SCAP_instantiate_ns6__SignedSignaturePropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SignedSignaturePropertiesType * soap_new_ns6__SignedSignaturePropertiesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__SignedSignaturePropertiesType(soap, n, NULL, NULL, NULL);
}

inline ns6__SignedSignaturePropertiesType * soap_new_req_ns6__SignedSignaturePropertiesType(
	struct soap *soap,
	time_t ns6__SigningTime,
	ns6__SigningCertificateType *ns6__SigningCertificate)
{
	ns6__SignedSignaturePropertiesType *_p = soap_new_ns6__SignedSignaturePropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignedSignaturePropertiesType::ns6__SigningTime = ns6__SigningTime;
		_p->ns6__SignedSignaturePropertiesType::ns6__SigningCertificate = ns6__SigningCertificate;
	}
	return _p;
}

inline ns6__SignedSignaturePropertiesType * soap_new_set_ns6__SignedSignaturePropertiesType(
	struct soap *soap,
	time_t ns6__SigningTime,
	ns6__SigningCertificateType *ns6__SigningCertificate,
	ns6__SignerRoleType *ns6__SignerRole)
{
	ns6__SignedSignaturePropertiesType *_p = soap_new_ns6__SignedSignaturePropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignedSignaturePropertiesType::ns6__SigningTime = ns6__SigningTime;
		_p->ns6__SignedSignaturePropertiesType::ns6__SigningCertificate = ns6__SigningCertificate;
		_p->ns6__SignedSignaturePropertiesType::ns6__SignerRole = ns6__SignerRole;
	}
	return _p;
}

inline int soap_write_ns6__SignedSignaturePropertiesType(struct soap *soap, ns6__SignedSignaturePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignedSignaturePropertiesType", p->soap_type() == SOAP_TYPE_ns6__SignedSignaturePropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__SignedSignaturePropertiesType(struct soap *soap, const char *URL, ns6__SignedSignaturePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignedSignaturePropertiesType", p->soap_type() == SOAP_TYPE_ns6__SignedSignaturePropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SignedSignaturePropertiesType(struct soap *soap, const char *URL, ns6__SignedSignaturePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignedSignaturePropertiesType", p->soap_type() == SOAP_TYPE_ns6__SignedSignaturePropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__SignedSignaturePropertiesType * SOAP_FMAC4 soap_get_ns6__SignedSignaturePropertiesType(struct soap*, ns6__SignedSignaturePropertiesType *, const char*, const char*);

inline int soap_read_ns6__SignedSignaturePropertiesType(struct soap *soap, ns6__SignedSignaturePropertiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__SignedSignaturePropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SignedSignaturePropertiesType(struct soap *soap, const char *URL, ns6__SignedSignaturePropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SignedSignaturePropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SignedSignaturePropertiesType(struct soap *soap, ns6__SignedSignaturePropertiesType *p)
{
	if (soap_read_ns6__SignedSignaturePropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__SignedPropertiesType_DEFINED
#define SOAP_TYPE_ns6__SignedPropertiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__SignedPropertiesType(struct soap*, const char*, int, const ns6__SignedPropertiesType *, const char*);
SOAP_FMAC3 ns6__SignedPropertiesType * SOAP_FMAC4 soap_in_ns6__SignedPropertiesType(struct soap*, const char*, ns6__SignedPropertiesType *, const char*);
SOAP_FMAC1 ns6__SignedPropertiesType * SOAP_FMAC2 SCAP_instantiate_ns6__SignedPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__SignedPropertiesType * soap_new_ns6__SignedPropertiesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__SignedPropertiesType(soap, n, NULL, NULL, NULL);
}

inline ns6__SignedPropertiesType * soap_new_req_ns6__SignedPropertiesType(
	struct soap *soap,
	ns6__SignedSignaturePropertiesType *ns6__SignedSignatureProperties,
	const std::string& Id)
{
	ns6__SignedPropertiesType *_p = soap_new_ns6__SignedPropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignedPropertiesType::ns6__SignedSignatureProperties = ns6__SignedSignatureProperties;
		_p->ns6__SignedPropertiesType::Id = Id;
	}
	return _p;
}

inline ns6__SignedPropertiesType * soap_new_set_ns6__SignedPropertiesType(
	struct soap *soap,
	ns6__SignedSignaturePropertiesType *ns6__SignedSignatureProperties,
	const std::string& Id)
{
	ns6__SignedPropertiesType *_p = soap_new_ns6__SignedPropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__SignedPropertiesType::ns6__SignedSignatureProperties = ns6__SignedSignatureProperties;
		_p->ns6__SignedPropertiesType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns6__SignedPropertiesType(struct soap *soap, ns6__SignedPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignedPropertiesType", p->soap_type() == SOAP_TYPE_ns6__SignedPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__SignedPropertiesType(struct soap *soap, const char *URL, ns6__SignedPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignedPropertiesType", p->soap_type() == SOAP_TYPE_ns6__SignedPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__SignedPropertiesType(struct soap *soap, const char *URL, ns6__SignedPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:SignedPropertiesType", p->soap_type() == SOAP_TYPE_ns6__SignedPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__SignedPropertiesType * SOAP_FMAC4 soap_get_ns6__SignedPropertiesType(struct soap*, ns6__SignedPropertiesType *, const char*, const char*);

inline int soap_read_ns6__SignedPropertiesType(struct soap *soap, ns6__SignedPropertiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__SignedPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__SignedPropertiesType(struct soap *soap, const char *URL, ns6__SignedPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__SignedPropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__SignedPropertiesType(struct soap *soap, ns6__SignedPropertiesType *p)
{
	if (soap_read_ns6__SignedPropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns6__QualifyingPropertiesType_DEFINED
#define SOAP_TYPE_ns6__QualifyingPropertiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__QualifyingPropertiesType(struct soap*, const char*, int, const ns6__QualifyingPropertiesType *, const char*);
SOAP_FMAC3 ns6__QualifyingPropertiesType * SOAP_FMAC4 soap_in_ns6__QualifyingPropertiesType(struct soap*, const char*, ns6__QualifyingPropertiesType *, const char*);
SOAP_FMAC1 ns6__QualifyingPropertiesType * SOAP_FMAC2 SCAP_instantiate_ns6__QualifyingPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline ns6__QualifyingPropertiesType * soap_new_ns6__QualifyingPropertiesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns6__QualifyingPropertiesType(soap, n, NULL, NULL, NULL);
}

inline ns6__QualifyingPropertiesType * soap_new_req_ns6__QualifyingPropertiesType(
	struct soap *soap,
	ns6__SignedPropertiesType *ns6__SignedProperties,
	const std::string& Target)
{
	ns6__QualifyingPropertiesType *_p = soap_new_ns6__QualifyingPropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__QualifyingPropertiesType::ns6__SignedProperties = ns6__SignedProperties;
		_p->ns6__QualifyingPropertiesType::Target = Target;
	}
	return _p;
}

inline ns6__QualifyingPropertiesType * soap_new_set_ns6__QualifyingPropertiesType(
	struct soap *soap,
	ns6__SignedPropertiesType *ns6__SignedProperties,
	ns6__UnsignedPropertiesType *ns6__UnsignedProperties,
	const std::string& Target)
{
	ns6__QualifyingPropertiesType *_p = soap_new_ns6__QualifyingPropertiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__QualifyingPropertiesType::ns6__SignedProperties = ns6__SignedProperties;
		_p->ns6__QualifyingPropertiesType::ns6__UnsignedProperties = ns6__UnsignedProperties;
		_p->ns6__QualifyingPropertiesType::Target = Target;
	}
	return _p;
}

inline int soap_write_ns6__QualifyingPropertiesType(struct soap *soap, ns6__QualifyingPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:QualifyingPropertiesType", p->soap_type() == SOAP_TYPE_ns6__QualifyingPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__QualifyingPropertiesType(struct soap *soap, const char *URL, ns6__QualifyingPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:QualifyingPropertiesType", p->soap_type() == SOAP_TYPE_ns6__QualifyingPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns6__QualifyingPropertiesType(struct soap *soap, const char *URL, ns6__QualifyingPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:QualifyingPropertiesType", p->soap_type() == SOAP_TYPE_ns6__QualifyingPropertiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns6__QualifyingPropertiesType * SOAP_FMAC4 soap_get_ns6__QualifyingPropertiesType(struct soap*, ns6__QualifyingPropertiesType *, const char*, const char*);

inline int soap_read_ns6__QualifyingPropertiesType(struct soap *soap, ns6__QualifyingPropertiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns6__QualifyingPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__QualifyingPropertiesType(struct soap *soap, const char *URL, ns6__QualifyingPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns6__QualifyingPropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns6__QualifyingPropertiesType(struct soap *soap, ns6__QualifyingPropertiesType *p)
{
	if (soap_read_ns6__QualifyingPropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ResponseCodeStatusType_DEFINED
#define SOAP_TYPE_ns3__ResponseCodeStatusType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ResponseCodeStatusType(struct soap*, const char*, int, const ns3__ResponseCodeStatusType *, const char*);
SOAP_FMAC3 ns3__ResponseCodeStatusType * SOAP_FMAC4 soap_in_ns3__ResponseCodeStatusType(struct soap*, const char*, ns3__ResponseCodeStatusType *, const char*);
SOAP_FMAC1 ns3__ResponseCodeStatusType * SOAP_FMAC2 SCAP_instantiate_ns3__ResponseCodeStatusType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ResponseCodeStatusType * soap_new_ns3__ResponseCodeStatusType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__ResponseCodeStatusType(soap, n, NULL, NULL, NULL);
}

inline ns3__ResponseCodeStatusType * soap_new_req_ns3__ResponseCodeStatusType(
	struct soap *soap,
	const std::string& Code)
{
	ns3__ResponseCodeStatusType *_p = soap_new_ns3__ResponseCodeStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ResponseCodeStatusType::Code = Code;
	}
	return _p;
}

inline ns3__ResponseCodeStatusType * soap_new_set_ns3__ResponseCodeStatusType(
	struct soap *soap,
	const std::string& Code,
	std::string *Message)
{
	ns3__ResponseCodeStatusType *_p = soap_new_ns3__ResponseCodeStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ResponseCodeStatusType::Code = Code;
		_p->ns3__ResponseCodeStatusType::Message = Message;
	}
	return _p;
}

inline int soap_write_ns3__ResponseCodeStatusType(struct soap *soap, ns3__ResponseCodeStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResponseCodeStatusType", p->soap_type() == SOAP_TYPE_ns3__ResponseCodeStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ResponseCodeStatusType(struct soap *soap, const char *URL, ns3__ResponseCodeStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResponseCodeStatusType", p->soap_type() == SOAP_TYPE_ns3__ResponseCodeStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ResponseCodeStatusType(struct soap *soap, const char *URL, ns3__ResponseCodeStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ResponseCodeStatusType", p->soap_type() == SOAP_TYPE_ns3__ResponseCodeStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ResponseCodeStatusType * SOAP_FMAC4 soap_get_ns3__ResponseCodeStatusType(struct soap*, ns3__ResponseCodeStatusType *, const char*, const char*);

inline int soap_read_ns3__ResponseCodeStatusType(struct soap *soap, ns3__ResponseCodeStatusType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ResponseCodeStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ResponseCodeStatusType(struct soap *soap, const char *URL, ns3__ResponseCodeStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ResponseCodeStatusType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ResponseCodeStatusType(struct soap *soap, ns3__ResponseCodeStatusType *p)
{
	if (soap_read_ns3__ResponseCodeStatusType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubAttributeType_DEFINED
#define SOAP_TYPE_ns3__SubAttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubAttributeType(struct soap*, const char*, int, const ns3__SubAttributeType *, const char*);
SOAP_FMAC3 ns3__SubAttributeType * SOAP_FMAC4 soap_in_ns3__SubAttributeType(struct soap*, const char*, ns3__SubAttributeType *, const char*);
SOAP_FMAC1 ns3__SubAttributeType * SOAP_FMAC2 SCAP_instantiate_ns3__SubAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubAttributeType * soap_new_ns3__SubAttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__SubAttributeType(soap, n, NULL, NULL, NULL);
}

inline ns3__SubAttributeType * soap_new_req_ns3__SubAttributeType(
	struct soap *soap,
	const std::string& AttributeID)
{
	ns3__SubAttributeType *_p = soap_new_ns3__SubAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline ns3__SubAttributeType * soap_new_set_ns3__SubAttributeType(
	struct soap *soap,
	const std::string& AttributeID,
	std::string *Description,
	std::string *Value,
	ns3__LegalActListType *LegalActList)
{
	ns3__SubAttributeType *_p = soap_new_ns3__SubAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeType::AttributeID = AttributeID;
		_p->ns3__SubAttributeType::Description = Description;
		_p->ns3__SubAttributeType::Value = Value;
		_p->ns3__SubAttributeType::LegalActList = LegalActList;
	}
	return _p;
}

inline int soap_write_ns3__SubAttributeType(struct soap *soap, ns3__SubAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubAttributeType", p->soap_type() == SOAP_TYPE_ns3__SubAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubAttributeType(struct soap *soap, const char *URL, ns3__SubAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubAttributeType", p->soap_type() == SOAP_TYPE_ns3__SubAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubAttributeType(struct soap *soap, const char *URL, ns3__SubAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubAttributeType", p->soap_type() == SOAP_TYPE_ns3__SubAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SubAttributeType * SOAP_FMAC4 soap_get_ns3__SubAttributeType(struct soap*, ns3__SubAttributeType *, const char*, const char*);

inline int soap_read_ns3__SubAttributeType(struct soap *soap, ns3__SubAttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SubAttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubAttributeType(struct soap *soap, const char *URL, ns3__SubAttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubAttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubAttributeType(struct soap *soap, ns3__SubAttributeType *p)
{
	if (soap_read_ns3__SubAttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__SubAttributeListType_DEFINED
#define SOAP_TYPE_ns3__SubAttributeListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubAttributeListType(struct soap*, const char*, int, const ns3__SubAttributeListType *, const char*);
SOAP_FMAC3 ns3__SubAttributeListType * SOAP_FMAC4 soap_in_ns3__SubAttributeListType(struct soap*, const char*, ns3__SubAttributeListType *, const char*);
SOAP_FMAC1 ns3__SubAttributeListType * SOAP_FMAC2 SCAP_instantiate_ns3__SubAttributeListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubAttributeListType * soap_new_ns3__SubAttributeListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__SubAttributeListType(soap, n, NULL, NULL, NULL);
}

inline ns3__SubAttributeListType * soap_new_req_ns3__SubAttributeListType(
	struct soap *soap,
	const std::vector<ns3__SubAttributeType *> & SubAttribute)
{
	ns3__SubAttributeListType *_p = soap_new_ns3__SubAttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeListType::SubAttribute = SubAttribute;
	}
	return _p;
}

inline ns3__SubAttributeListType * soap_new_set_ns3__SubAttributeListType(
	struct soap *soap,
	const std::vector<ns3__SubAttributeType *> & SubAttribute)
{
	ns3__SubAttributeListType *_p = soap_new_ns3__SubAttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeListType::SubAttribute = SubAttribute;
	}
	return _p;
}

inline int soap_write_ns3__SubAttributeListType(struct soap *soap, ns3__SubAttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubAttributeListType", p->soap_type() == SOAP_TYPE_ns3__SubAttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__SubAttributeListType(struct soap *soap, const char *URL, ns3__SubAttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubAttributeListType", p->soap_type() == SOAP_TYPE_ns3__SubAttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__SubAttributeListType(struct soap *soap, const char *URL, ns3__SubAttributeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:SubAttributeListType", p->soap_type() == SOAP_TYPE_ns3__SubAttributeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__SubAttributeListType * SOAP_FMAC4 soap_get_ns3__SubAttributeListType(struct soap*, ns3__SubAttributeListType *, const char*, const char*);

inline int soap_read_ns3__SubAttributeListType(struct soap *soap, ns3__SubAttributeListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__SubAttributeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__SubAttributeListType(struct soap *soap, const char *URL, ns3__SubAttributeListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__SubAttributeListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__SubAttributeListType(struct soap *soap, ns3__SubAttributeListType *p)
{
	if (soap_read_ns3__SubAttributeListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__LegalActListType_DEFINED
#define SOAP_TYPE_ns3__LegalActListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LegalActListType(struct soap*, const char*, int, const ns3__LegalActListType *, const char*);
SOAP_FMAC3 ns3__LegalActListType * SOAP_FMAC4 soap_in_ns3__LegalActListType(struct soap*, const char*, ns3__LegalActListType *, const char*);
SOAP_FMAC1 ns3__LegalActListType * SOAP_FMAC2 SCAP_instantiate_ns3__LegalActListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__LegalActListType * soap_new_ns3__LegalActListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__LegalActListType(soap, n, NULL, NULL, NULL);
}

inline ns3__LegalActListType * soap_new_req_ns3__LegalActListType(
	struct soap *soap,
	const std::vector<std::string> & LegalAct)
{
	ns3__LegalActListType *_p = soap_new_ns3__LegalActListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__LegalActListType::LegalAct = LegalAct;
	}
	return _p;
}

inline ns3__LegalActListType * soap_new_set_ns3__LegalActListType(
	struct soap *soap,
	const std::vector<std::string> & LegalAct)
{
	ns3__LegalActListType *_p = soap_new_ns3__LegalActListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__LegalActListType::LegalAct = LegalAct;
	}
	return _p;
}

inline int soap_write_ns3__LegalActListType(struct soap *soap, ns3__LegalActListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:LegalActListType", p->soap_type() == SOAP_TYPE_ns3__LegalActListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__LegalActListType(struct soap *soap, const char *URL, ns3__LegalActListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:LegalActListType", p->soap_type() == SOAP_TYPE_ns3__LegalActListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__LegalActListType(struct soap *soap, const char *URL, ns3__LegalActListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:LegalActListType", p->soap_type() == SOAP_TYPE_ns3__LegalActListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__LegalActListType * SOAP_FMAC4 soap_get_ns3__LegalActListType(struct soap*, ns3__LegalActListType *, const char*, const char*);

inline int soap_read_ns3__LegalActListType(struct soap *soap, ns3__LegalActListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__LegalActListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__LegalActListType(struct soap *soap, const char *URL, ns3__LegalActListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__LegalActListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__LegalActListType(struct soap *soap, ns3__LegalActListType *p)
{
	if (soap_read_ns3__LegalActListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__MainAttributeType_DEFINED
#define SOAP_TYPE_ns3__MainAttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MainAttributeType(struct soap*, const char*, int, const ns3__MainAttributeType *, const char*);
SOAP_FMAC3 ns3__MainAttributeType * SOAP_FMAC4 soap_in_ns3__MainAttributeType(struct soap*, const char*, ns3__MainAttributeType *, const char*);
SOAP_FMAC1 ns3__MainAttributeType * SOAP_FMAC2 SCAP_instantiate_ns3__MainAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MainAttributeType * soap_new_ns3__MainAttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__MainAttributeType(soap, n, NULL, NULL, NULL);
}

inline ns3__MainAttributeType * soap_new_req_ns3__MainAttributeType(
	struct soap *soap,
	const std::string& AttributeID)
{
	ns3__MainAttributeType *_p = soap_new_ns3__MainAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MainAttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline ns3__MainAttributeType * soap_new_set_ns3__MainAttributeType(
	struct soap *soap,
	const std::string& AttributeID,
	std::string *Description,
	ns3__LegalActListType *LegalActList,
	ns3__SubAttributeListType *SubAttributeList)
{
	ns3__MainAttributeType *_p = soap_new_ns3__MainAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MainAttributeType::AttributeID = AttributeID;
		_p->ns3__MainAttributeType::Description = Description;
		_p->ns3__MainAttributeType::LegalActList = LegalActList;
		_p->ns3__MainAttributeType::SubAttributeList = SubAttributeList;
	}
	return _p;
}

inline int soap_write_ns3__MainAttributeType(struct soap *soap, ns3__MainAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MainAttributeType", p->soap_type() == SOAP_TYPE_ns3__MainAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MainAttributeType(struct soap *soap, const char *URL, ns3__MainAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MainAttributeType", p->soap_type() == SOAP_TYPE_ns3__MainAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MainAttributeType(struct soap *soap, const char *URL, ns3__MainAttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MainAttributeType", p->soap_type() == SOAP_TYPE_ns3__MainAttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MainAttributeType * SOAP_FMAC4 soap_get_ns3__MainAttributeType(struct soap*, ns3__MainAttributeType *, const char*, const char*);

inline int soap_read_ns3__MainAttributeType(struct soap *soap, ns3__MainAttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__MainAttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MainAttributeType(struct soap *soap, const char *URL, ns3__MainAttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__MainAttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__MainAttributeType(struct soap *soap, ns3__MainAttributeType *p)
{
	if (soap_read_ns3__MainAttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExtraIDType_DEFINED
#define SOAP_TYPE_ns3__ExtraIDType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExtraIDType(struct soap*, const char*, int, const ns3__ExtraIDType *, const char*);
SOAP_FMAC3 ns3__ExtraIDType * SOAP_FMAC4 soap_in_ns3__ExtraIDType(struct soap*, const char*, ns3__ExtraIDType *, const char*);
SOAP_FMAC1 ns3__ExtraIDType * SOAP_FMAC2 SCAP_instantiate_ns3__ExtraIDType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExtraIDType * soap_new_ns3__ExtraIDType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__ExtraIDType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExtraIDType * soap_new_req_ns3__ExtraIDType(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	ns3__ExtraIDType *_p = soap_new_ns3__ExtraIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDType::Name = Name;
		_p->ns3__ExtraIDType::Value = Value;
	}
	return _p;
}

inline ns3__ExtraIDType * soap_new_set_ns3__ExtraIDType(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{
	ns3__ExtraIDType *_p = soap_new_ns3__ExtraIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDType::Name = Name;
		_p->ns3__ExtraIDType::Value = Value;
	}
	return _p;
}

inline int soap_write_ns3__ExtraIDType(struct soap *soap, ns3__ExtraIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExtraIDType", p->soap_type() == SOAP_TYPE_ns3__ExtraIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExtraIDType(struct soap *soap, const char *URL, ns3__ExtraIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExtraIDType", p->soap_type() == SOAP_TYPE_ns3__ExtraIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExtraIDType(struct soap *soap, const char *URL, ns3__ExtraIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExtraIDType", p->soap_type() == SOAP_TYPE_ns3__ExtraIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExtraIDType * SOAP_FMAC4 soap_get_ns3__ExtraIDType(struct soap*, ns3__ExtraIDType *, const char*, const char*);

inline int soap_read_ns3__ExtraIDType(struct soap *soap, ns3__ExtraIDType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExtraIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExtraIDType(struct soap *soap, const char *URL, ns3__ExtraIDType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExtraIDType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExtraIDType(struct soap *soap, ns3__ExtraIDType *p)
{
	if (soap_read_ns3__ExtraIDType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ExtraIDListType_DEFINED
#define SOAP_TYPE_ns3__ExtraIDListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExtraIDListType(struct soap*, const char*, int, const ns3__ExtraIDListType *, const char*);
SOAP_FMAC3 ns3__ExtraIDListType * SOAP_FMAC4 soap_in_ns3__ExtraIDListType(struct soap*, const char*, ns3__ExtraIDListType *, const char*);
SOAP_FMAC1 ns3__ExtraIDListType * SOAP_FMAC2 SCAP_instantiate_ns3__ExtraIDListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExtraIDListType * soap_new_ns3__ExtraIDListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__ExtraIDListType(soap, n, NULL, NULL, NULL);
}

inline ns3__ExtraIDListType * soap_new_req_ns3__ExtraIDListType(
	struct soap *soap,
	const std::vector<ns3__ExtraIDType *> & ExtraID)
{
	ns3__ExtraIDListType *_p = soap_new_ns3__ExtraIDListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDListType::ExtraID = ExtraID;
	}
	return _p;
}

inline ns3__ExtraIDListType * soap_new_set_ns3__ExtraIDListType(
	struct soap *soap,
	const std::vector<ns3__ExtraIDType *> & ExtraID)
{
	ns3__ExtraIDListType *_p = soap_new_ns3__ExtraIDListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDListType::ExtraID = ExtraID;
	}
	return _p;
}

inline int soap_write_ns3__ExtraIDListType(struct soap *soap, ns3__ExtraIDListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExtraIDListType", p->soap_type() == SOAP_TYPE_ns3__ExtraIDListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ExtraIDListType(struct soap *soap, const char *URL, ns3__ExtraIDListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExtraIDListType", p->soap_type() == SOAP_TYPE_ns3__ExtraIDListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ExtraIDListType(struct soap *soap, const char *URL, ns3__ExtraIDListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ExtraIDListType", p->soap_type() == SOAP_TYPE_ns3__ExtraIDListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ExtraIDListType * SOAP_FMAC4 soap_get_ns3__ExtraIDListType(struct soap*, ns3__ExtraIDListType *, const char*, const char*);

inline int soap_read_ns3__ExtraIDListType(struct soap *soap, ns3__ExtraIDListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ExtraIDListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ExtraIDListType(struct soap *soap, const char *URL, ns3__ExtraIDListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ExtraIDListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ExtraIDListType(struct soap *soap, ns3__ExtraIDListType *p)
{
	if (soap_read_ns3__ExtraIDListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__PersonalDataType_DEFINED
#define SOAP_TYPE_ns3__PersonalDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PersonalDataType(struct soap*, const char*, int, const ns3__PersonalDataType *, const char*);
SOAP_FMAC3 ns3__PersonalDataType * SOAP_FMAC4 soap_in_ns3__PersonalDataType(struct soap*, const char*, ns3__PersonalDataType *, const char*);
SOAP_FMAC1 ns3__PersonalDataType * SOAP_FMAC2 SCAP_instantiate_ns3__PersonalDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PersonalDataType * soap_new_ns3__PersonalDataType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__PersonalDataType(soap, n, NULL, NULL, NULL);
}

inline ns3__PersonalDataType * soap_new_req_ns3__PersonalDataType(
	struct soap *soap,
	const std::string& Name,
	const std::string& NIC)
{
	ns3__PersonalDataType *_p = soap_new_ns3__PersonalDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PersonalDataType::Name = Name;
		_p->ns3__PersonalDataType::NIC = NIC;
	}
	return _p;
}

inline ns3__PersonalDataType * soap_new_set_ns3__PersonalDataType(
	struct soap *soap,
	const std::string& Name,
	const std::string& NIC,
	ns3__ExtraIDListType *ExtraIDList)
{
	ns3__PersonalDataType *_p = soap_new_ns3__PersonalDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PersonalDataType::Name = Name;
		_p->ns3__PersonalDataType::NIC = NIC;
		_p->ns3__PersonalDataType::ExtraIDList = ExtraIDList;
	}
	return _p;
}

inline int soap_write_ns3__PersonalDataType(struct soap *soap, ns3__PersonalDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PersonalDataType", p->soap_type() == SOAP_TYPE_ns3__PersonalDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PersonalDataType(struct soap *soap, const char *URL, ns3__PersonalDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PersonalDataType", p->soap_type() == SOAP_TYPE_ns3__PersonalDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PersonalDataType(struct soap *soap, const char *URL, ns3__PersonalDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PersonalDataType", p->soap_type() == SOAP_TYPE_ns3__PersonalDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PersonalDataType * SOAP_FMAC4 soap_get_ns3__PersonalDataType(struct soap*, ns3__PersonalDataType *, const char*, const char*);

inline int soap_read_ns3__PersonalDataType(struct soap *soap, ns3__PersonalDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__PersonalDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PersonalDataType(struct soap *soap, const char *URL, ns3__PersonalDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__PersonalDataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__PersonalDataType(struct soap *soap, ns3__PersonalDataType *p)
{
	if (soap_read_ns3__PersonalDataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AttributeSupplierType_DEFINED
#define SOAP_TYPE_ns3__AttributeSupplierType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AttributeSupplierType(struct soap*, const char*, int, const ns3__AttributeSupplierType *, const char*);
SOAP_FMAC3 ns3__AttributeSupplierType * SOAP_FMAC4 soap_in_ns3__AttributeSupplierType(struct soap*, const char*, ns3__AttributeSupplierType *, const char*);
SOAP_FMAC1 ns3__AttributeSupplierType * SOAP_FMAC2 SCAP_instantiate_ns3__AttributeSupplierType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AttributeSupplierType * soap_new_ns3__AttributeSupplierType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__AttributeSupplierType(soap, n, NULL, NULL, NULL);
}

inline ns3__AttributeSupplierType * soap_new_req_ns3__AttributeSupplierType(
	struct soap *soap,
	const std::string& Id,
	const std::string& Name)
{
	ns3__AttributeSupplierType *_p = soap_new_ns3__AttributeSupplierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeSupplierType::Id = Id;
		_p->ns3__AttributeSupplierType::Name = Name;
	}
	return _p;
}

inline ns3__AttributeSupplierType * soap_new_set_ns3__AttributeSupplierType(
	struct soap *soap,
	const std::string& Id,
	const std::string& Name)
{
	ns3__AttributeSupplierType *_p = soap_new_ns3__AttributeSupplierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeSupplierType::Id = Id;
		_p->ns3__AttributeSupplierType::Name = Name;
	}
	return _p;
}

inline int soap_write_ns3__AttributeSupplierType(struct soap *soap, ns3__AttributeSupplierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeSupplierType", p->soap_type() == SOAP_TYPE_ns3__AttributeSupplierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AttributeSupplierType(struct soap *soap, const char *URL, ns3__AttributeSupplierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeSupplierType", p->soap_type() == SOAP_TYPE_ns3__AttributeSupplierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AttributeSupplierType(struct soap *soap, const char *URL, ns3__AttributeSupplierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeSupplierType", p->soap_type() == SOAP_TYPE_ns3__AttributeSupplierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AttributeSupplierType * SOAP_FMAC4 soap_get_ns3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType *, const char*, const char*);

inline int soap_read_ns3__AttributeSupplierType(struct soap *soap, ns3__AttributeSupplierType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AttributeSupplierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AttributeSupplierType(struct soap *soap, const char *URL, ns3__AttributeSupplierType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AttributeSupplierType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AttributeSupplierType(struct soap *soap, ns3__AttributeSupplierType *p)
{
	if (soap_read_ns3__AttributeSupplierType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__AttributeType_DEFINED
#define SOAP_TYPE_ns3__AttributeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AttributeType(struct soap*, const char*, int, const ns3__AttributeType *, const char*);
SOAP_FMAC3 ns3__AttributeType * SOAP_FMAC4 soap_in_ns3__AttributeType(struct soap*, const char*, ns3__AttributeType *, const char*);
SOAP_FMAC1 ns3__AttributeType * SOAP_FMAC2 SCAP_instantiate_ns3__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AttributeType * soap_new_ns3__AttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns3__AttributeType(soap, n, NULL, NULL, NULL);
}

inline ns3__AttributeType * soap_new_req_ns3__AttributeType(
	struct soap *soap,
	ns3__AttributeSupplierType *AttributeSupplier,
	const std::string& Date,
	const std::string& Validity,
	ns3__PersonalDataType *PersonalData,
	ns3__MainAttributeType *MainAttribute)
{
	ns3__AttributeType *_p = soap_new_ns3__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeType::AttributeSupplier = AttributeSupplier;
		_p->ns3__AttributeType::Date = Date;
		_p->ns3__AttributeType::Validity = Validity;
		_p->ns3__AttributeType::PersonalData = PersonalData;
		_p->ns3__AttributeType::MainAttribute = MainAttribute;
	}
	return _p;
}

inline ns3__AttributeType * soap_new_set_ns3__AttributeType(
	struct soap *soap,
	ns3__AttributeSupplierType *AttributeSupplier,
	const std::string& Date,
	const std::string& Validity,
	ns3__PersonalDataType *PersonalData,
	ns3__MainAttributeType *MainAttribute)
{
	ns3__AttributeType *_p = soap_new_ns3__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeType::AttributeSupplier = AttributeSupplier;
		_p->ns3__AttributeType::Date = Date;
		_p->ns3__AttributeType::Validity = Validity;
		_p->ns3__AttributeType::PersonalData = PersonalData;
		_p->ns3__AttributeType::MainAttribute = MainAttribute;
	}
	return _p;
}

inline int soap_write_ns3__AttributeType(struct soap *soap, ns3__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeType", p->soap_type() == SOAP_TYPE_ns3__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AttributeType(struct soap *soap, const char *URL, ns3__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeType", p->soap_type() == SOAP_TYPE_ns3__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AttributeType(struct soap *soap, const char *URL, ns3__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AttributeType", p->soap_type() == SOAP_TYPE_ns3__AttributeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AttributeType * SOAP_FMAC4 soap_get_ns3__AttributeType(struct soap*, ns3__AttributeType *, const char*, const char*);

inline int soap_read_ns3__AttributeType(struct soap *soap, ns3__AttributeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AttributeType(struct soap *soap, const char *URL, ns3__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__AttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__AttributeType(struct soap *soap, ns3__AttributeType *p)
{
	if (soap_read_ns3__AttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SignatureValueType_DEFINED
#define SOAP_TYPE_ns5__SignatureValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SignatureValueType(struct soap*, const char*, int, const ns5__SignatureValueType *, const char*);
SOAP_FMAC3 ns5__SignatureValueType * SOAP_FMAC4 soap_in_ns5__SignatureValueType(struct soap*, const char*, ns5__SignatureValueType *, const char*);
SOAP_FMAC1 ns5__SignatureValueType * SOAP_FMAC2 SCAP_instantiate_ns5__SignatureValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SignatureValueType * soap_new_ns5__SignatureValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__SignatureValueType(soap, n, NULL, NULL, NULL);
}

inline ns5__SignatureValueType * soap_new_req_ns5__SignatureValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns5__SignatureValueType *_p = soap_new_ns5__SignatureValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignatureValueType::__item = __item;
		_p->ns5__SignatureValueType::Id = Id;
	}
	return _p;
}

inline ns5__SignatureValueType * soap_new_set_ns5__SignatureValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns5__SignatureValueType *_p = soap_new_ns5__SignatureValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignatureValueType::__item = __item;
		_p->ns5__SignatureValueType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__SignatureValueType(struct soap *soap, ns5__SignatureValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureValueType", p->soap_type() == SOAP_TYPE_ns5__SignatureValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SignatureValueType(struct soap *soap, const char *URL, ns5__SignatureValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureValueType", p->soap_type() == SOAP_TYPE_ns5__SignatureValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SignatureValueType(struct soap *soap, const char *URL, ns5__SignatureValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureValueType", p->soap_type() == SOAP_TYPE_ns5__SignatureValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SignatureValueType * SOAP_FMAC4 soap_get_ns5__SignatureValueType(struct soap*, ns5__SignatureValueType *, const char*, const char*);

inline int soap_read_ns5__SignatureValueType(struct soap *soap, ns5__SignatureValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SignatureValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SignatureValueType(struct soap *soap, const char *URL, ns5__SignatureValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SignatureValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SignatureValueType(struct soap *soap, ns5__SignatureValueType *p)
{
	if (soap_read_ns5__SignatureValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__DigestValueType_DEFINED
#define SOAP_TYPE_ns5__DigestValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__DigestValueType(struct soap*, const char*, int, const ns5__DigestValueType *, const char*);
SOAP_FMAC3 ns5__DigestValueType * SOAP_FMAC4 soap_in_ns5__DigestValueType(struct soap*, const char*, ns5__DigestValueType *, const char*);
SOAP_FMAC1 ns5__DigestValueType * SOAP_FMAC2 SCAP_instantiate_ns5__DigestValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__DigestValueType * soap_new_ns5__DigestValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__DigestValueType(soap, n, NULL, NULL, NULL);
}

inline ns5__DigestValueType * soap_new_req_ns5__DigestValueType(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	ns5__DigestValueType *_p = soap_new_ns5__DigestValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__DigestValueType::__item = __item;
	}
	return _p;
}

inline ns5__DigestValueType * soap_new_set_ns5__DigestValueType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	std::string *Id)
{
	ns5__DigestValueType *_p = soap_new_ns5__DigestValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__DigestValueType::__item = __item;
		_p->ns5__DigestValueType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__DigestValueType(struct soap *soap, ns5__DigestValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:DigestValueType", p->soap_type() == SOAP_TYPE_ns5__DigestValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__DigestValueType(struct soap *soap, const char *URL, ns5__DigestValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:DigestValueType", p->soap_type() == SOAP_TYPE_ns5__DigestValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__DigestValueType(struct soap *soap, const char *URL, ns5__DigestValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:DigestValueType", p->soap_type() == SOAP_TYPE_ns5__DigestValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__DigestValueType * SOAP_FMAC4 soap_get_ns5__DigestValueType(struct soap*, ns5__DigestValueType *, const char*, const char*);

inline int soap_read_ns5__DigestValueType(struct soap *soap, ns5__DigestValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__DigestValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__DigestValueType(struct soap *soap, const char *URL, ns5__DigestValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__DigestValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__DigestValueType(struct soap *soap, ns5__DigestValueType *p)
{
	if (soap_read_ns5__DigestValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__X509CertificateType_DEFINED
#define SOAP_TYPE_ns5__X509CertificateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__X509CertificateType(struct soap*, const char*, int, const ns5__X509CertificateType *, const char*);
SOAP_FMAC3 ns5__X509CertificateType * SOAP_FMAC4 soap_in_ns5__X509CertificateType(struct soap*, const char*, ns5__X509CertificateType *, const char*);
SOAP_FMAC1 ns5__X509CertificateType * SOAP_FMAC2 SCAP_instantiate_ns5__X509CertificateType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__X509CertificateType * soap_new_ns5__X509CertificateType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__X509CertificateType(soap, n, NULL, NULL, NULL);
}

inline ns5__X509CertificateType * soap_new_req_ns5__X509CertificateType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns5__X509CertificateType *_p = soap_new_ns5__X509CertificateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__X509CertificateType::__item = __item;
		_p->ns5__X509CertificateType::Id = Id;
	}
	return _p;
}

inline ns5__X509CertificateType * soap_new_set_ns5__X509CertificateType(
	struct soap *soap,
	const xsd__base64Binary& __item,
	const std::string& Id)
{
	ns5__X509CertificateType *_p = soap_new_ns5__X509CertificateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__X509CertificateType::__item = __item;
		_p->ns5__X509CertificateType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__X509CertificateType(struct soap *soap, ns5__X509CertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:X509CertificateType", p->soap_type() == SOAP_TYPE_ns5__X509CertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__X509CertificateType(struct soap *soap, const char *URL, ns5__X509CertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:X509CertificateType", p->soap_type() == SOAP_TYPE_ns5__X509CertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__X509CertificateType(struct soap *soap, const char *URL, ns5__X509CertificateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:X509CertificateType", p->soap_type() == SOAP_TYPE_ns5__X509CertificateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__X509CertificateType * SOAP_FMAC4 soap_get_ns5__X509CertificateType(struct soap*, ns5__X509CertificateType *, const char*, const char*);

inline int soap_read_ns5__X509CertificateType(struct soap *soap, ns5__X509CertificateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__X509CertificateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__X509CertificateType(struct soap *soap, const char *URL, ns5__X509CertificateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__X509CertificateType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__X509CertificateType(struct soap *soap, ns5__X509CertificateType *p)
{
	if (soap_read_ns5__X509CertificateType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ObjectType_DEFINED
#define SOAP_TYPE_ns5__ObjectType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ObjectType(struct soap*, const char*, int, const ns5__ObjectType *, const char*);
SOAP_FMAC3 ns5__ObjectType * SOAP_FMAC4 soap_in_ns5__ObjectType(struct soap*, const char*, ns5__ObjectType *, const char*);
SOAP_FMAC1 ns5__ObjectType * SOAP_FMAC2 SCAP_instantiate_ns5__ObjectType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ObjectType * soap_new_ns5__ObjectType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__ObjectType(soap, n, NULL, NULL, NULL);
}

inline ns5__ObjectType * soap_new_req_ns5__ObjectType(
	struct soap *soap,
	int __union_ObjectType,
	const union _ns5__union_ObjectType& union_ObjectType,
	const std::string& Id)
{
	ns5__ObjectType *_p = soap_new_ns5__ObjectType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ObjectType::__union_ObjectType = __union_ObjectType;
		_p->ns5__ObjectType::union_ObjectType = union_ObjectType;
		_p->ns5__ObjectType::Id = Id;
	}
	return _p;
}

inline ns5__ObjectType * soap_new_set_ns5__ObjectType(
	struct soap *soap,
	int __union_ObjectType,
	const union _ns5__union_ObjectType& union_ObjectType,
	const std::string& Id)
{
	ns5__ObjectType *_p = soap_new_ns5__ObjectType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ObjectType::__union_ObjectType = __union_ObjectType;
		_p->ns5__ObjectType::union_ObjectType = union_ObjectType;
		_p->ns5__ObjectType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__ObjectType(struct soap *soap, ns5__ObjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ObjectType", p->soap_type() == SOAP_TYPE_ns5__ObjectType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ObjectType(struct soap *soap, const char *URL, ns5__ObjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ObjectType", p->soap_type() == SOAP_TYPE_ns5__ObjectType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ObjectType(struct soap *soap, const char *URL, ns5__ObjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ObjectType", p->soap_type() == SOAP_TYPE_ns5__ObjectType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ObjectType * SOAP_FMAC4 soap_get_ns5__ObjectType(struct soap*, ns5__ObjectType *, const char*, const char*);

inline int soap_read_ns5__ObjectType(struct soap *soap, ns5__ObjectType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ObjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ObjectType(struct soap *soap, const char *URL, ns5__ObjectType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ObjectType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ObjectType(struct soap *soap, ns5__ObjectType *p)
{
	if (soap_read_ns5__ObjectType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__X509DataType_DEFINED
#define SOAP_TYPE_ns5__X509DataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__X509DataType(struct soap*, const char*, int, const ns5__X509DataType *, const char*);
SOAP_FMAC3 ns5__X509DataType * SOAP_FMAC4 soap_in_ns5__X509DataType(struct soap*, const char*, ns5__X509DataType *, const char*);
SOAP_FMAC1 ns5__X509DataType * SOAP_FMAC2 SCAP_instantiate_ns5__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__X509DataType * soap_new_ns5__X509DataType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__X509DataType(soap, n, NULL, NULL, NULL);
}

inline ns5__X509DataType * soap_new_req_ns5__X509DataType(
	struct soap *soap,
	const std::vector<ns5__X509CertificateType *> & ns5__X509Certificate)
{
	ns5__X509DataType *_p = soap_new_ns5__X509DataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__X509DataType::ns5__X509Certificate = ns5__X509Certificate;
	}
	return _p;
}

inline ns5__X509DataType * soap_new_set_ns5__X509DataType(
	struct soap *soap,
	const std::vector<ns5__X509CertificateType *> & ns5__X509Certificate)
{
	ns5__X509DataType *_p = soap_new_ns5__X509DataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__X509DataType::ns5__X509Certificate = ns5__X509Certificate;
	}
	return _p;
}

inline int soap_write_ns5__X509DataType(struct soap *soap, ns5__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:X509DataType", p->soap_type() == SOAP_TYPE_ns5__X509DataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__X509DataType(struct soap *soap, const char *URL, ns5__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:X509DataType", p->soap_type() == SOAP_TYPE_ns5__X509DataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__X509DataType(struct soap *soap, const char *URL, ns5__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:X509DataType", p->soap_type() == SOAP_TYPE_ns5__X509DataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__X509DataType * SOAP_FMAC4 soap_get_ns5__X509DataType(struct soap*, ns5__X509DataType *, const char*, const char*);

inline int soap_read_ns5__X509DataType(struct soap *soap, ns5__X509DataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__X509DataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__X509DataType(struct soap *soap, const char *URL, ns5__X509DataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__X509DataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__X509DataType(struct soap *soap, ns5__X509DataType *p)
{
	if (soap_read_ns5__X509DataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__KeyInfoType_DEFINED
#define SOAP_TYPE_ns5__KeyInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__KeyInfoType(struct soap*, const char*, int, const ns5__KeyInfoType *, const char*);
SOAP_FMAC3 ns5__KeyInfoType * SOAP_FMAC4 soap_in_ns5__KeyInfoType(struct soap*, const char*, ns5__KeyInfoType *, const char*);
SOAP_FMAC1 ns5__KeyInfoType * SOAP_FMAC2 SCAP_instantiate_ns5__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__KeyInfoType * soap_new_ns5__KeyInfoType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__KeyInfoType(soap, n, NULL, NULL, NULL);
}

inline ns5__KeyInfoType * soap_new_req_ns5__KeyInfoType(
	struct soap *soap,
	ns5__X509DataType *ns5__X509Data,
	const std::string& Id)
{
	ns5__KeyInfoType *_p = soap_new_ns5__KeyInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__KeyInfoType::ns5__X509Data = ns5__X509Data;
		_p->ns5__KeyInfoType::Id = Id;
	}
	return _p;
}

inline ns5__KeyInfoType * soap_new_set_ns5__KeyInfoType(
	struct soap *soap,
	ns5__X509DataType *ns5__X509Data,
	const std::string& Id)
{
	ns5__KeyInfoType *_p = soap_new_ns5__KeyInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__KeyInfoType::ns5__X509Data = ns5__X509Data;
		_p->ns5__KeyInfoType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__KeyInfoType(struct soap *soap, ns5__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:KeyInfoType", p->soap_type() == SOAP_TYPE_ns5__KeyInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__KeyInfoType(struct soap *soap, const char *URL, ns5__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:KeyInfoType", p->soap_type() == SOAP_TYPE_ns5__KeyInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__KeyInfoType(struct soap *soap, const char *URL, ns5__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:KeyInfoType", p->soap_type() == SOAP_TYPE_ns5__KeyInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__KeyInfoType * SOAP_FMAC4 soap_get_ns5__KeyInfoType(struct soap*, ns5__KeyInfoType *, const char*, const char*);

inline int soap_read_ns5__KeyInfoType(struct soap *soap, ns5__KeyInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__KeyInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__KeyInfoType(struct soap *soap, const char *URL, ns5__KeyInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__KeyInfoType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__KeyInfoType(struct soap *soap, ns5__KeyInfoType *p)
{
	if (soap_read_ns5__KeyInfoType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__DigestMethodType_DEFINED
#define SOAP_TYPE_ns5__DigestMethodType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__DigestMethodType(struct soap*, const char*, int, const ns5__DigestMethodType *, const char*);
SOAP_FMAC3 ns5__DigestMethodType * SOAP_FMAC4 soap_in_ns5__DigestMethodType(struct soap*, const char*, ns5__DigestMethodType *, const char*);
SOAP_FMAC1 ns5__DigestMethodType * SOAP_FMAC2 SCAP_instantiate_ns5__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__DigestMethodType * soap_new_ns5__DigestMethodType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__DigestMethodType(soap, n, NULL, NULL, NULL);
}

inline ns5__DigestMethodType * soap_new_req_ns5__DigestMethodType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__DigestMethodType *_p = soap_new_ns5__DigestMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__DigestMethodType::Algorithm = Algorithm;
	}
	return _p;
}

inline ns5__DigestMethodType * soap_new_set_ns5__DigestMethodType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__DigestMethodType *_p = soap_new_ns5__DigestMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__DigestMethodType::Algorithm = Algorithm;
	}
	return _p;
}

inline int soap_write_ns5__DigestMethodType(struct soap *soap, ns5__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:DigestMethodType", p->soap_type() == SOAP_TYPE_ns5__DigestMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__DigestMethodType(struct soap *soap, const char *URL, ns5__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:DigestMethodType", p->soap_type() == SOAP_TYPE_ns5__DigestMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__DigestMethodType(struct soap *soap, const char *URL, ns5__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:DigestMethodType", p->soap_type() == SOAP_TYPE_ns5__DigestMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__DigestMethodType * SOAP_FMAC4 soap_get_ns5__DigestMethodType(struct soap*, ns5__DigestMethodType *, const char*, const char*);

inline int soap_read_ns5__DigestMethodType(struct soap *soap, ns5__DigestMethodType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__DigestMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__DigestMethodType(struct soap *soap, const char *URL, ns5__DigestMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__DigestMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__DigestMethodType(struct soap *soap, ns5__DigestMethodType *p)
{
	if (soap_read_ns5__DigestMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__TransformType_DEFINED
#define SOAP_TYPE_ns5__TransformType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TransformType(struct soap*, const char*, int, const ns5__TransformType *, const char*);
SOAP_FMAC3 ns5__TransformType * SOAP_FMAC4 soap_in_ns5__TransformType(struct soap*, const char*, ns5__TransformType *, const char*);
SOAP_FMAC1 ns5__TransformType * SOAP_FMAC2 SCAP_instantiate_ns5__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TransformType * soap_new_ns5__TransformType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__TransformType(soap, n, NULL, NULL, NULL);
}

inline ns5__TransformType * soap_new_req_ns5__TransformType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__TransformType *_p = soap_new_ns5__TransformType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__TransformType::Algorithm = Algorithm;
	}
	return _p;
}

inline ns5__TransformType * soap_new_set_ns5__TransformType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__TransformType *_p = soap_new_ns5__TransformType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__TransformType::Algorithm = Algorithm;
	}
	return _p;
}

inline int soap_write_ns5__TransformType(struct soap *soap, ns5__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:TransformType", p->soap_type() == SOAP_TYPE_ns5__TransformType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__TransformType(struct soap *soap, const char *URL, ns5__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:TransformType", p->soap_type() == SOAP_TYPE_ns5__TransformType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__TransformType(struct soap *soap, const char *URL, ns5__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:TransformType", p->soap_type() == SOAP_TYPE_ns5__TransformType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__TransformType * SOAP_FMAC4 soap_get_ns5__TransformType(struct soap*, ns5__TransformType *, const char*, const char*);

inline int soap_read_ns5__TransformType(struct soap *soap, ns5__TransformType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__TransformType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__TransformType(struct soap *soap, const char *URL, ns5__TransformType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__TransformType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__TransformType(struct soap *soap, ns5__TransformType *p)
{
	if (soap_read_ns5__TransformType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__TransformsType_DEFINED
#define SOAP_TYPE_ns5__TransformsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TransformsType(struct soap*, const char*, int, const ns5__TransformsType *, const char*);
SOAP_FMAC3 ns5__TransformsType * SOAP_FMAC4 soap_in_ns5__TransformsType(struct soap*, const char*, ns5__TransformsType *, const char*);
SOAP_FMAC1 ns5__TransformsType * SOAP_FMAC2 SCAP_instantiate_ns5__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TransformsType * soap_new_ns5__TransformsType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__TransformsType(soap, n, NULL, NULL, NULL);
}

inline ns5__TransformsType * soap_new_req_ns5__TransformsType(
	struct soap *soap,
	const std::vector<ns5__TransformType *> & ns5__Transform)
{
	ns5__TransformsType *_p = soap_new_ns5__TransformsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__TransformsType::ns5__Transform = ns5__Transform;
	}
	return _p;
}

inline ns5__TransformsType * soap_new_set_ns5__TransformsType(
	struct soap *soap,
	const std::vector<ns5__TransformType *> & ns5__Transform)
{
	ns5__TransformsType *_p = soap_new_ns5__TransformsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__TransformsType::ns5__Transform = ns5__Transform;
	}
	return _p;
}

inline int soap_write_ns5__TransformsType(struct soap *soap, ns5__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:TransformsType", p->soap_type() == SOAP_TYPE_ns5__TransformsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__TransformsType(struct soap *soap, const char *URL, ns5__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:TransformsType", p->soap_type() == SOAP_TYPE_ns5__TransformsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__TransformsType(struct soap *soap, const char *URL, ns5__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:TransformsType", p->soap_type() == SOAP_TYPE_ns5__TransformsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__TransformsType * SOAP_FMAC4 soap_get_ns5__TransformsType(struct soap*, ns5__TransformsType *, const char*, const char*);

inline int soap_read_ns5__TransformsType(struct soap *soap, ns5__TransformsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__TransformsType(struct soap *soap, const char *URL, ns5__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__TransformsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__TransformsType(struct soap *soap, ns5__TransformsType *p)
{
	if (soap_read_ns5__TransformsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__ReferenceType_DEFINED
#define SOAP_TYPE_ns5__ReferenceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ReferenceType(struct soap*, const char*, int, const ns5__ReferenceType *, const char*);
SOAP_FMAC3 ns5__ReferenceType * SOAP_FMAC4 soap_in_ns5__ReferenceType(struct soap*, const char*, ns5__ReferenceType *, const char*);
SOAP_FMAC1 ns5__ReferenceType * SOAP_FMAC2 SCAP_instantiate_ns5__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ReferenceType * soap_new_ns5__ReferenceType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline ns5__ReferenceType * soap_new_req_ns5__ReferenceType(
	struct soap *soap,
	ns5__TransformsType *ns5__Transforms,
	ns5__DigestMethodType *ns5__DigestMethod,
	ns5__DigestValueType *ns5__DigestValue,
	const std::string& Id)
{
	ns5__ReferenceType *_p = soap_new_ns5__ReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ReferenceType::ns5__Transforms = ns5__Transforms;
		_p->ns5__ReferenceType::ns5__DigestMethod = ns5__DigestMethod;
		_p->ns5__ReferenceType::ns5__DigestValue = ns5__DigestValue;
		_p->ns5__ReferenceType::Id = Id;
	}
	return _p;
}

inline ns5__ReferenceType * soap_new_set_ns5__ReferenceType(
	struct soap *soap,
	ns5__TransformsType *ns5__Transforms,
	ns5__DigestMethodType *ns5__DigestMethod,
	ns5__DigestValueType *ns5__DigestValue,
	const std::string& Id,
	std::string *Type,
	std::string *URI)
{
	ns5__ReferenceType *_p = soap_new_ns5__ReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__ReferenceType::ns5__Transforms = ns5__Transforms;
		_p->ns5__ReferenceType::ns5__DigestMethod = ns5__DigestMethod;
		_p->ns5__ReferenceType::ns5__DigestValue = ns5__DigestValue;
		_p->ns5__ReferenceType::Id = Id;
		_p->ns5__ReferenceType::Type = Type;
		_p->ns5__ReferenceType::URI = URI;
	}
	return _p;
}

inline int soap_write_ns5__ReferenceType(struct soap *soap, ns5__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ReferenceType", p->soap_type() == SOAP_TYPE_ns5__ReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__ReferenceType(struct soap *soap, const char *URL, ns5__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ReferenceType", p->soap_type() == SOAP_TYPE_ns5__ReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__ReferenceType(struct soap *soap, const char *URL, ns5__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:ReferenceType", p->soap_type() == SOAP_TYPE_ns5__ReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__ReferenceType * SOAP_FMAC4 soap_get_ns5__ReferenceType(struct soap*, ns5__ReferenceType *, const char*, const char*);

inline int soap_read_ns5__ReferenceType(struct soap *soap, ns5__ReferenceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__ReferenceType(struct soap *soap, const char *URL, ns5__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__ReferenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__ReferenceType(struct soap *soap, ns5__ReferenceType *p)
{
	if (soap_read_ns5__ReferenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SignatureMethodType_DEFINED
#define SOAP_TYPE_ns5__SignatureMethodType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SignatureMethodType(struct soap*, const char*, int, const ns5__SignatureMethodType *, const char*);
SOAP_FMAC3 ns5__SignatureMethodType * SOAP_FMAC4 soap_in_ns5__SignatureMethodType(struct soap*, const char*, ns5__SignatureMethodType *, const char*);
SOAP_FMAC1 ns5__SignatureMethodType * SOAP_FMAC2 SCAP_instantiate_ns5__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SignatureMethodType * soap_new_ns5__SignatureMethodType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__SignatureMethodType(soap, n, NULL, NULL, NULL);
}

inline ns5__SignatureMethodType * soap_new_req_ns5__SignatureMethodType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__SignatureMethodType *_p = soap_new_ns5__SignatureMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignatureMethodType::Algorithm = Algorithm;
	}
	return _p;
}

inline ns5__SignatureMethodType * soap_new_set_ns5__SignatureMethodType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__SignatureMethodType *_p = soap_new_ns5__SignatureMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignatureMethodType::Algorithm = Algorithm;
	}
	return _p;
}

inline int soap_write_ns5__SignatureMethodType(struct soap *soap, ns5__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureMethodType", p->soap_type() == SOAP_TYPE_ns5__SignatureMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SignatureMethodType(struct soap *soap, const char *URL, ns5__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureMethodType", p->soap_type() == SOAP_TYPE_ns5__SignatureMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SignatureMethodType(struct soap *soap, const char *URL, ns5__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureMethodType", p->soap_type() == SOAP_TYPE_ns5__SignatureMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SignatureMethodType * SOAP_FMAC4 soap_get_ns5__SignatureMethodType(struct soap*, ns5__SignatureMethodType *, const char*, const char*);

inline int soap_read_ns5__SignatureMethodType(struct soap *soap, ns5__SignatureMethodType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SignatureMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SignatureMethodType(struct soap *soap, const char *URL, ns5__SignatureMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SignatureMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SignatureMethodType(struct soap *soap, ns5__SignatureMethodType *p)
{
	if (soap_read_ns5__SignatureMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_ns5__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__CanonicalizationMethodType(struct soap*, const char*, int, const ns5__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 ns5__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ns5__CanonicalizationMethodType(struct soap*, const char*, ns5__CanonicalizationMethodType *, const char*);
SOAP_FMAC1 ns5__CanonicalizationMethodType * SOAP_FMAC2 SCAP_instantiate_ns5__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__CanonicalizationMethodType * soap_new_ns5__CanonicalizationMethodType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__CanonicalizationMethodType(soap, n, NULL, NULL, NULL);
}

inline ns5__CanonicalizationMethodType * soap_new_req_ns5__CanonicalizationMethodType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__CanonicalizationMethodType *_p = soap_new_ns5__CanonicalizationMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__CanonicalizationMethodType::Algorithm = Algorithm;
	}
	return _p;
}

inline ns5__CanonicalizationMethodType * soap_new_set_ns5__CanonicalizationMethodType(
	struct soap *soap,
	const std::string& Algorithm)
{
	ns5__CanonicalizationMethodType *_p = soap_new_ns5__CanonicalizationMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__CanonicalizationMethodType::Algorithm = Algorithm;
	}
	return _p;
}

inline int soap_write_ns5__CanonicalizationMethodType(struct soap *soap, ns5__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:CanonicalizationMethodType", p->soap_type() == SOAP_TYPE_ns5__CanonicalizationMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__CanonicalizationMethodType(struct soap *soap, const char *URL, ns5__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:CanonicalizationMethodType", p->soap_type() == SOAP_TYPE_ns5__CanonicalizationMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__CanonicalizationMethodType(struct soap *soap, const char *URL, ns5__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:CanonicalizationMethodType", p->soap_type() == SOAP_TYPE_ns5__CanonicalizationMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ns5__CanonicalizationMethodType(struct soap*, ns5__CanonicalizationMethodType *, const char*, const char*);

inline int soap_read_ns5__CanonicalizationMethodType(struct soap *soap, ns5__CanonicalizationMethodType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__CanonicalizationMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__CanonicalizationMethodType(struct soap *soap, const char *URL, ns5__CanonicalizationMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__CanonicalizationMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__CanonicalizationMethodType(struct soap *soap, ns5__CanonicalizationMethodType *p)
{
	if (soap_read_ns5__CanonicalizationMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SignedInfoType_DEFINED
#define SOAP_TYPE_ns5__SignedInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SignedInfoType(struct soap*, const char*, int, const ns5__SignedInfoType *, const char*);
SOAP_FMAC3 ns5__SignedInfoType * SOAP_FMAC4 soap_in_ns5__SignedInfoType(struct soap*, const char*, ns5__SignedInfoType *, const char*);
SOAP_FMAC1 ns5__SignedInfoType * SOAP_FMAC2 SCAP_instantiate_ns5__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SignedInfoType * soap_new_ns5__SignedInfoType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__SignedInfoType(soap, n, NULL, NULL, NULL);
}

inline ns5__SignedInfoType * soap_new_req_ns5__SignedInfoType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	ns5__SignatureMethodType *ns5__SignatureMethod,
	const std::vector<ns5__ReferenceType *> & ns5__Reference,
	const std::string& Id)
{
	ns5__SignedInfoType *_p = soap_new_ns5__SignedInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignedInfoType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns5__SignedInfoType::ns5__SignatureMethod = ns5__SignatureMethod;
		_p->ns5__SignedInfoType::ns5__Reference = ns5__Reference;
		_p->ns5__SignedInfoType::Id = Id;
	}
	return _p;
}

inline ns5__SignedInfoType * soap_new_set_ns5__SignedInfoType(
	struct soap *soap,
	ns5__CanonicalizationMethodType *ns5__CanonicalizationMethod,
	ns5__SignatureMethodType *ns5__SignatureMethod,
	const std::vector<ns5__ReferenceType *> & ns5__Reference,
	const std::string& Id)
{
	ns5__SignedInfoType *_p = soap_new_ns5__SignedInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignedInfoType::ns5__CanonicalizationMethod = ns5__CanonicalizationMethod;
		_p->ns5__SignedInfoType::ns5__SignatureMethod = ns5__SignatureMethod;
		_p->ns5__SignedInfoType::ns5__Reference = ns5__Reference;
		_p->ns5__SignedInfoType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__SignedInfoType(struct soap *soap, ns5__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignedInfoType", p->soap_type() == SOAP_TYPE_ns5__SignedInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SignedInfoType(struct soap *soap, const char *URL, ns5__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignedInfoType", p->soap_type() == SOAP_TYPE_ns5__SignedInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SignedInfoType(struct soap *soap, const char *URL, ns5__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignedInfoType", p->soap_type() == SOAP_TYPE_ns5__SignedInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SignedInfoType * SOAP_FMAC4 soap_get_ns5__SignedInfoType(struct soap*, ns5__SignedInfoType *, const char*, const char*);

inline int soap_read_ns5__SignedInfoType(struct soap *soap, ns5__SignedInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SignedInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SignedInfoType(struct soap *soap, const char *URL, ns5__SignedInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SignedInfoType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SignedInfoType(struct soap *soap, ns5__SignedInfoType *p)
{
	if (soap_read_ns5__SignedInfoType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns5__SignatureType_DEFINED
#define SOAP_TYPE_ns5__SignatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SignatureType(struct soap*, const char*, int, const ns5__SignatureType *, const char*);
SOAP_FMAC3 ns5__SignatureType * SOAP_FMAC4 soap_in_ns5__SignatureType(struct soap*, const char*, ns5__SignatureType *, const char*);
SOAP_FMAC1 ns5__SignatureType * SOAP_FMAC2 SCAP_instantiate_ns5__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SignatureType * soap_new_ns5__SignatureType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns5__SignatureType(soap, n, NULL, NULL, NULL);
}

inline ns5__SignatureType * soap_new_req_ns5__SignatureType(
	struct soap *soap,
	ns5__SignedInfoType *ns5__SignedInfo,
	ns5__SignatureValueType *ns5__SignatureValue,
	ns5__KeyInfoType *ns5__KeyInfo,
	const std::string& Id)
{
	ns5__SignatureType *_p = soap_new_ns5__SignatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignatureType::ns5__SignedInfo = ns5__SignedInfo;
		_p->ns5__SignatureType::ns5__SignatureValue = ns5__SignatureValue;
		_p->ns5__SignatureType::ns5__KeyInfo = ns5__KeyInfo;
		_p->ns5__SignatureType::Id = Id;
	}
	return _p;
}

inline ns5__SignatureType * soap_new_set_ns5__SignatureType(
	struct soap *soap,
	ns5__SignedInfoType *ns5__SignedInfo,
	ns5__SignatureValueType *ns5__SignatureValue,
	ns5__KeyInfoType *ns5__KeyInfo,
	const std::vector<ns5__ObjectType *> & ns5__Object,
	const std::string& Id)
{
	ns5__SignatureType *_p = soap_new_ns5__SignatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SignatureType::ns5__SignedInfo = ns5__SignedInfo;
		_p->ns5__SignatureType::ns5__SignatureValue = ns5__SignatureValue;
		_p->ns5__SignatureType::ns5__KeyInfo = ns5__KeyInfo;
		_p->ns5__SignatureType::ns5__Object = ns5__Object;
		_p->ns5__SignatureType::Id = Id;
	}
	return _p;
}

inline int soap_write_ns5__SignatureType(struct soap *soap, ns5__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureType", p->soap_type() == SOAP_TYPE_ns5__SignatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SignatureType(struct soap *soap, const char *URL, ns5__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureType", p->soap_type() == SOAP_TYPE_ns5__SignatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SignatureType(struct soap *soap, const char *URL, ns5__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SignatureType", p->soap_type() == SOAP_TYPE_ns5__SignatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SignatureType * SOAP_FMAC4 soap_get_ns5__SignatureType(struct soap*, ns5__SignatureType *, const char*, const char*);

inline int soap_read_ns5__SignatureType(struct soap *soap, ns5__SignatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns5__SignatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SignatureType(struct soap *soap, const char *URL, ns5__SignatureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns5__SignatureType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns5__SignatureType(struct soap *soap, ns5__SignatureType *p)
{
	if (soap_read_ns5__SignatureType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ResponseResult_DEFINED
#define SOAP_TYPE_ns2__ResponseResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ResponseResult(struct soap*, const char*, int, const ns2__ResponseResult *, const char*);
SOAP_FMAC3 ns2__ResponseResult * SOAP_FMAC4 soap_in_ns2__ResponseResult(struct soap*, const char*, ns2__ResponseResult *, const char*);
SOAP_FMAC1 ns2__ResponseResult * SOAP_FMAC2 SCAP_instantiate_ns2__ResponseResult(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ResponseResult * soap_new_ns2__ResponseResult(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__ResponseResult(soap, n, NULL, NULL, NULL);
}

inline ns2__ResponseResult * soap_new_req_ns2__ResponseResult(
	struct soap *soap,
	const std::string& ResultCode,
	const std::string& ResultMessage,
	ns3__PersonalDataType *CitizenIDWithExtraInfo)
{
	ns2__ResponseResult *_p = soap_new_ns2__ResponseResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ResponseResult::ResultCode = ResultCode;
		_p->ns2__ResponseResult::ResultMessage = ResultMessage;
		_p->ns2__ResponseResult::CitizenIDWithExtraInfo = CitizenIDWithExtraInfo;
	}
	return _p;
}

inline ns2__ResponseResult * soap_new_set_ns2__ResponseResult(
	struct soap *soap,
	const std::string& ResultCode,
	const std::string& ResultMessage,
	ns3__PersonalDataType *CitizenIDWithExtraInfo)
{
	ns2__ResponseResult *_p = soap_new_ns2__ResponseResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ResponseResult::ResultCode = ResultCode;
		_p->ns2__ResponseResult::ResultMessage = ResultMessage;
		_p->ns2__ResponseResult::CitizenIDWithExtraInfo = CitizenIDWithExtraInfo;
	}
	return _p;
}

inline int soap_write_ns2__ResponseResult(struct soap *soap, ns2__ResponseResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ResponseResult", p->soap_type() == SOAP_TYPE_ns2__ResponseResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ResponseResult(struct soap *soap, const char *URL, ns2__ResponseResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ResponseResult", p->soap_type() == SOAP_TYPE_ns2__ResponseResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ResponseResult(struct soap *soap, const char *URL, ns2__ResponseResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ResponseResult", p->soap_type() == SOAP_TYPE_ns2__ResponseResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ResponseResult * SOAP_FMAC4 soap_get_ns2__ResponseResult(struct soap*, ns2__ResponseResult *, const char*, const char*);

inline int soap_read_ns2__ResponseResult(struct soap *soap, ns2__ResponseResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ResponseResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ResponseResult(struct soap *soap, const char *URL, ns2__ResponseResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ResponseResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ResponseResult(struct soap *soap, ns2__ResponseResult *p)
{
	if (soap_read_ns2__ResponseResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__UnsignedAttributesBasicType_DEFINED
#define SOAP_TYPE_ns2__UnsignedAttributesBasicType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UnsignedAttributesBasicType(struct soap*, const char*, int, const ns2__UnsignedAttributesBasicType *, const char*);
SOAP_FMAC3 ns2__UnsignedAttributesBasicType * SOAP_FMAC4 soap_in_ns2__UnsignedAttributesBasicType(struct soap*, const char*, ns2__UnsignedAttributesBasicType *, const char*);
SOAP_FMAC1 ns2__UnsignedAttributesBasicType * SOAP_FMAC2 SCAP_instantiate_ns2__UnsignedAttributesBasicType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UnsignedAttributesBasicType * soap_new_ns2__UnsignedAttributesBasicType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__UnsignedAttributesBasicType(soap, n, NULL, NULL, NULL);
}

inline ns2__UnsignedAttributesBasicType * soap_new_req_ns2__UnsignedAttributesBasicType(
	struct soap *soap,
	const std::vector<ns3__AttributeType *> & ns3__Attribute)
{
	ns2__UnsignedAttributesBasicType *_p = soap_new_ns2__UnsignedAttributesBasicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UnsignedAttributesBasicType::ns3__Attribute = ns3__Attribute;
	}
	return _p;
}

inline ns2__UnsignedAttributesBasicType * soap_new_set_ns2__UnsignedAttributesBasicType(
	struct soap *soap,
	const std::vector<ns3__AttributeType *> & ns3__Attribute)
{
	ns2__UnsignedAttributesBasicType *_p = soap_new_ns2__UnsignedAttributesBasicType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UnsignedAttributesBasicType::ns3__Attribute = ns3__Attribute;
	}
	return _p;
}

inline int soap_write_ns2__UnsignedAttributesBasicType(struct soap *soap, ns2__UnsignedAttributesBasicType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributesBasicType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributesBasicType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__UnsignedAttributesBasicType(struct soap *soap, const char *URL, ns2__UnsignedAttributesBasicType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributesBasicType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributesBasicType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__UnsignedAttributesBasicType(struct soap *soap, const char *URL, ns2__UnsignedAttributesBasicType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributesBasicType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributesBasicType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__UnsignedAttributesBasicType * SOAP_FMAC4 soap_get_ns2__UnsignedAttributesBasicType(struct soap*, ns2__UnsignedAttributesBasicType *, const char*, const char*);

inline int soap_read_ns2__UnsignedAttributesBasicType(struct soap *soap, ns2__UnsignedAttributesBasicType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__UnsignedAttributesBasicType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__UnsignedAttributesBasicType(struct soap *soap, const char *URL, ns2__UnsignedAttributesBasicType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__UnsignedAttributesBasicType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__UnsignedAttributesBasicType(struct soap *soap, ns2__UnsignedAttributesBasicType *p)
{
	if (soap_read_ns2__UnsignedAttributesBasicType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__SignedAttributesType_DEFINED
#define SOAP_TYPE_ns2__SignedAttributesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SignedAttributesType(struct soap*, const char*, int, const ns2__SignedAttributesType *, const char*);
SOAP_FMAC3 ns2__SignedAttributesType * SOAP_FMAC4 soap_in_ns2__SignedAttributesType(struct soap*, const char*, ns2__SignedAttributesType *, const char*);
SOAP_FMAC1 ns2__SignedAttributesType * SOAP_FMAC2 SCAP_instantiate_ns2__SignedAttributesType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SignedAttributesType * soap_new_ns2__SignedAttributesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__SignedAttributesType(soap, n, NULL, NULL, NULL);
}

inline ns2__SignedAttributesType * soap_new_req_ns2__SignedAttributesType(
	struct soap *soap,
	const std::vector<ns5__SignatureType *> & ns3__SignatureAttribute)
{
	ns2__SignedAttributesType *_p = soap_new_ns2__SignedAttributesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SignedAttributesType::ns3__SignatureAttribute = ns3__SignatureAttribute;
	}
	return _p;
}

inline ns2__SignedAttributesType * soap_new_set_ns2__SignedAttributesType(
	struct soap *soap,
	const std::vector<ns5__SignatureType *> & ns3__SignatureAttribute)
{
	ns2__SignedAttributesType *_p = soap_new_ns2__SignedAttributesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SignedAttributesType::ns3__SignatureAttribute = ns3__SignatureAttribute;
	}
	return _p;
}

inline int soap_write_ns2__SignedAttributesType(struct soap *soap, ns2__SignedAttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SignedAttributesType", p->soap_type() == SOAP_TYPE_ns2__SignedAttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__SignedAttributesType(struct soap *soap, const char *URL, ns2__SignedAttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SignedAttributesType", p->soap_type() == SOAP_TYPE_ns2__SignedAttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SignedAttributesType(struct soap *soap, const char *URL, ns2__SignedAttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SignedAttributesType", p->soap_type() == SOAP_TYPE_ns2__SignedAttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__SignedAttributesType * SOAP_FMAC4 soap_get_ns2__SignedAttributesType(struct soap*, ns2__SignedAttributesType *, const char*, const char*);

inline int soap_read_ns2__SignedAttributesType(struct soap *soap, ns2__SignedAttributesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__SignedAttributesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SignedAttributesType(struct soap *soap, const char *URL, ns2__SignedAttributesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__SignedAttributesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__SignedAttributesType(struct soap *soap, ns2__SignedAttributesType *p)
{
	if (soap_read_ns2__SignedAttributesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__UnsignedAttributesType_DEFINED
#define SOAP_TYPE_ns2__UnsignedAttributesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UnsignedAttributesType(struct soap*, const char*, int, const ns2__UnsignedAttributesType *, const char*);
SOAP_FMAC3 ns2__UnsignedAttributesType * SOAP_FMAC4 soap_in_ns2__UnsignedAttributesType(struct soap*, const char*, ns2__UnsignedAttributesType *, const char*);
SOAP_FMAC1 ns2__UnsignedAttributesType * SOAP_FMAC2 SCAP_instantiate_ns2__UnsignedAttributesType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UnsignedAttributesType * soap_new_ns2__UnsignedAttributesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__UnsignedAttributesType(soap, n, NULL, NULL, NULL);
}

inline ns2__UnsignedAttributesType * soap_new_req_ns2__UnsignedAttributesType(
	struct soap *soap,
	ns2__ResponseResult *ResponseResult)
{
	ns2__UnsignedAttributesType *_p = soap_new_ns2__UnsignedAttributesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UnsignedAttributesType::ResponseResult = ResponseResult;
	}
	return _p;
}

inline ns2__UnsignedAttributesType * soap_new_set_ns2__UnsignedAttributesType(
	struct soap *soap,
	ns2__ResponseResult *ResponseResult,
	ns2__UnsignedAttributesBasicType *UnsignedAttributes)
{
	ns2__UnsignedAttributesType *_p = soap_new_ns2__UnsignedAttributesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UnsignedAttributesType::ResponseResult = ResponseResult;
		_p->ns2__UnsignedAttributesType::UnsignedAttributes = UnsignedAttributes;
	}
	return _p;
}

inline int soap_write_ns2__UnsignedAttributesType(struct soap *soap, ns2__UnsignedAttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributesType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__UnsignedAttributesType(struct soap *soap, const char *URL, ns2__UnsignedAttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributesType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__UnsignedAttributesType(struct soap *soap, const char *URL, ns2__UnsignedAttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributesType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__UnsignedAttributesType * SOAP_FMAC4 soap_get_ns2__UnsignedAttributesType(struct soap*, ns2__UnsignedAttributesType *, const char*, const char*);

inline int soap_read_ns2__UnsignedAttributesType(struct soap *soap, ns2__UnsignedAttributesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__UnsignedAttributesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__UnsignedAttributesType(struct soap *soap, const char *URL, ns2__UnsignedAttributesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__UnsignedAttributesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__UnsignedAttributesType(struct soap *soap, ns2__UnsignedAttributesType *p)
{
	if (soap_read_ns2__UnsignedAttributesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__AttributesType_DEFINED
#define SOAP_TYPE_ns2__AttributesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AttributesType(struct soap*, const char*, int, const ns2__AttributesType *, const char*);
SOAP_FMAC3 ns2__AttributesType * SOAP_FMAC4 soap_in_ns2__AttributesType(struct soap*, const char*, ns2__AttributesType *, const char*);
SOAP_FMAC1 ns2__AttributesType * SOAP_FMAC2 SCAP_instantiate_ns2__AttributesType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AttributesType * soap_new_ns2__AttributesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__AttributesType(soap, n, NULL, NULL, NULL);
}

inline ns2__AttributesType * soap_new_req_ns2__AttributesType(
	struct soap *soap,
	ns3__AttributeSupplierType *ATTRSupplier,
	ns2__ResponseResult *ResponseResult)
{
	ns2__AttributesType *_p = soap_new_ns2__AttributesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributesType::ATTRSupplier = ATTRSupplier;
		_p->ns2__AttributesType::ResponseResult = ResponseResult;
	}
	return _p;
}

inline ns2__AttributesType * soap_new_set_ns2__AttributesType(
	struct soap *soap,
	ns3__AttributeSupplierType *ATTRSupplier,
	ns2__ResponseResult *ResponseResult,
	ns2__SignedAttributesType *SignedAttributes)
{
	ns2__AttributesType *_p = soap_new_ns2__AttributesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributesType::ATTRSupplier = ATTRSupplier;
		_p->ns2__AttributesType::ResponseResult = ResponseResult;
		_p->ns2__AttributesType::SignedAttributes = SignedAttributes;
	}
	return _p;
}

inline int soap_write_ns2__AttributesType(struct soap *soap, ns2__AttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributesType", p->soap_type() == SOAP_TYPE_ns2__AttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AttributesType(struct soap *soap, const char *URL, ns2__AttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributesType", p->soap_type() == SOAP_TYPE_ns2__AttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AttributesType(struct soap *soap, const char *URL, ns2__AttributesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributesType", p->soap_type() == SOAP_TYPE_ns2__AttributesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AttributesType * SOAP_FMAC4 soap_get_ns2__AttributesType(struct soap*, ns2__AttributesType *, const char*, const char*);

inline int soap_read_ns2__AttributesType(struct soap *soap, ns2__AttributesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__AttributesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AttributesType(struct soap *soap, const char *URL, ns2__AttributesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__AttributesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__AttributesType(struct soap *soap, ns2__AttributesType *p)
{
	if (soap_read_ns2__AttributesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__UnsignedAttributeResponseType_DEFINED
#define SOAP_TYPE_ns2__UnsignedAttributeResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UnsignedAttributeResponseType(struct soap*, const char*, int, const ns2__UnsignedAttributeResponseType *, const char*);
SOAP_FMAC3 ns2__UnsignedAttributeResponseType * SOAP_FMAC4 soap_in_ns2__UnsignedAttributeResponseType(struct soap*, const char*, ns2__UnsignedAttributeResponseType *, const char*);
SOAP_FMAC1 ns2__UnsignedAttributeResponseType * SOAP_FMAC2 SCAP_instantiate_ns2__UnsignedAttributeResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__UnsignedAttributeResponseType * soap_new_ns2__UnsignedAttributeResponseType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__UnsignedAttributeResponseType(soap, n, NULL, NULL, NULL);
}

inline ns2__UnsignedAttributeResponseType * soap_new_req_ns2__UnsignedAttributeResponseType(
	struct soap *soap,
	const std::string& ProcessId,
	ns2__UnsignedAttributesType *AttributeResponseValues)
{
	ns2__UnsignedAttributeResponseType *_p = soap_new_ns2__UnsignedAttributeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UnsignedAttributeResponseType::ProcessId = ProcessId;
		_p->ns2__UnsignedAttributeResponseType::AttributeResponseValues = AttributeResponseValues;
	}
	return _p;
}

inline ns2__UnsignedAttributeResponseType * soap_new_set_ns2__UnsignedAttributeResponseType(
	struct soap *soap,
	const std::string& ProcessId,
	std::string *CompanyId,
	std::string *CompanyName,
	ns2__UnsignedAttributesType *AttributeResponseValues)
{
	ns2__UnsignedAttributeResponseType *_p = soap_new_ns2__UnsignedAttributeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__UnsignedAttributeResponseType::ProcessId = ProcessId;
		_p->ns2__UnsignedAttributeResponseType::CompanyId = CompanyId;
		_p->ns2__UnsignedAttributeResponseType::CompanyName = CompanyName;
		_p->ns2__UnsignedAttributeResponseType::AttributeResponseValues = AttributeResponseValues;
	}
	return _p;
}

inline int soap_write_ns2__UnsignedAttributeResponseType(struct soap *soap, ns2__UnsignedAttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__UnsignedAttributeResponseType(struct soap *soap, const char *URL, ns2__UnsignedAttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__UnsignedAttributeResponseType(struct soap *soap, const char *URL, ns2__UnsignedAttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:UnsignedAttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__UnsignedAttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__UnsignedAttributeResponseType * SOAP_FMAC4 soap_get_ns2__UnsignedAttributeResponseType(struct soap*, ns2__UnsignedAttributeResponseType *, const char*, const char*);

inline int soap_read_ns2__UnsignedAttributeResponseType(struct soap *soap, ns2__UnsignedAttributeResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__UnsignedAttributeResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__UnsignedAttributeResponseType(struct soap *soap, const char *URL, ns2__UnsignedAttributeResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__UnsignedAttributeResponseType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__UnsignedAttributeResponseType(struct soap *soap, ns2__UnsignedAttributeResponseType *p)
{
	if (soap_read_ns2__UnsignedAttributeResponseType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__SingleAttributeResponseType_DEFINED
#define SOAP_TYPE_ns2__SingleAttributeResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SingleAttributeResponseType(struct soap*, const char*, int, const ns2__SingleAttributeResponseType *, const char*);
SOAP_FMAC3 ns2__SingleAttributeResponseType * SOAP_FMAC4 soap_in_ns2__SingleAttributeResponseType(struct soap*, const char*, ns2__SingleAttributeResponseType *, const char*);
SOAP_FMAC1 ns2__SingleAttributeResponseType * SOAP_FMAC2 SCAP_instantiate_ns2__SingleAttributeResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SingleAttributeResponseType * soap_new_ns2__SingleAttributeResponseType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__SingleAttributeResponseType(soap, n, NULL, NULL, NULL);
}

inline ns2__SingleAttributeResponseType * soap_new_req_ns2__SingleAttributeResponseType(
	struct soap *soap,
	const std::string& ProcessId,
	ns2__AttributesType *AttributeResponseValues)
{
	ns2__SingleAttributeResponseType *_p = soap_new_ns2__SingleAttributeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SingleAttributeResponseType::ProcessId = ProcessId;
		_p->ns2__SingleAttributeResponseType::AttributeResponseValues = AttributeResponseValues;
	}
	return _p;
}

inline ns2__SingleAttributeResponseType * soap_new_set_ns2__SingleAttributeResponseType(
	struct soap *soap,
	const std::string& ProcessId,
	ns2__AttributesType *AttributeResponseValues)
{
	ns2__SingleAttributeResponseType *_p = soap_new_ns2__SingleAttributeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SingleAttributeResponseType::ProcessId = ProcessId;
		_p->ns2__SingleAttributeResponseType::AttributeResponseValues = AttributeResponseValues;
	}
	return _p;
}

inline int soap_write_ns2__SingleAttributeResponseType(struct soap *soap, ns2__SingleAttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleAttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__SingleAttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__SingleAttributeResponseType(struct soap *soap, const char *URL, ns2__SingleAttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleAttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__SingleAttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SingleAttributeResponseType(struct soap *soap, const char *URL, ns2__SingleAttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleAttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__SingleAttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__SingleAttributeResponseType * SOAP_FMAC4 soap_get_ns2__SingleAttributeResponseType(struct soap*, ns2__SingleAttributeResponseType *, const char*, const char*);

inline int soap_read_ns2__SingleAttributeResponseType(struct soap *soap, ns2__SingleAttributeResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__SingleAttributeResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SingleAttributeResponseType(struct soap *soap, const char *URL, ns2__SingleAttributeResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__SingleAttributeResponseType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__SingleAttributeResponseType(struct soap *soap, ns2__SingleAttributeResponseType *p)
{
	if (soap_read_ns2__SingleAttributeResponseType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__AttributeResponseType_DEFINED
#define SOAP_TYPE_ns2__AttributeResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AttributeResponseType(struct soap*, const char*, int, const ns2__AttributeResponseType *, const char*);
SOAP_FMAC3 ns2__AttributeResponseType * SOAP_FMAC4 soap_in_ns2__AttributeResponseType(struct soap*, const char*, ns2__AttributeResponseType *, const char*);
SOAP_FMAC1 ns2__AttributeResponseType * SOAP_FMAC2 SCAP_instantiate_ns2__AttributeResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AttributeResponseType * soap_new_ns2__AttributeResponseType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__AttributeResponseType(soap, n, NULL, NULL, NULL);
}

inline ns2__AttributeResponseType * soap_new_req_ns2__AttributeResponseType(
	struct soap *soap,
	const std::string& ProcessId,
	const std::vector<ns2__AttributesType *> & AttributeResponseValues)
{
	ns2__AttributeResponseType *_p = soap_new_ns2__AttributeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeResponseType::ProcessId = ProcessId;
		_p->ns2__AttributeResponseType::AttributeResponseValues = AttributeResponseValues;
	}
	return _p;
}

inline ns2__AttributeResponseType * soap_new_set_ns2__AttributeResponseType(
	struct soap *soap,
	const std::string& ProcessId,
	const std::vector<ns2__AttributesType *> & AttributeResponseValues,
	std::string *ErrorMessage,
	std::string *AppId,
	std::string *SecretKey)
{
	ns2__AttributeResponseType *_p = soap_new_ns2__AttributeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeResponseType::ProcessId = ProcessId;
		_p->ns2__AttributeResponseType::AttributeResponseValues = AttributeResponseValues;
		_p->ns2__AttributeResponseType::ErrorMessage = ErrorMessage;
		_p->ns2__AttributeResponseType::AppId = AppId;
		_p->ns2__AttributeResponseType::SecretKey = SecretKey;
	}
	return _p;
}

inline int soap_write_ns2__AttributeResponseType(struct soap *soap, ns2__AttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__AttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AttributeResponseType(struct soap *soap, const char *URL, ns2__AttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__AttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AttributeResponseType(struct soap *soap, const char *URL, ns2__AttributeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeResponseType", p->soap_type() == SOAP_TYPE_ns2__AttributeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AttributeResponseType * SOAP_FMAC4 soap_get_ns2__AttributeResponseType(struct soap*, ns2__AttributeResponseType *, const char*, const char*);

inline int soap_read_ns2__AttributeResponseType(struct soap *soap, ns2__AttributeResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__AttributeResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AttributeResponseType(struct soap *soap, const char *URL, ns2__AttributeResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__AttributeResponseType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__AttributeResponseType(struct soap *soap, ns2__AttributeResponseType *p)
{
	if (soap_read_ns2__AttributeResponseType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__AttributeSupplierListType_DEFINED
#define SOAP_TYPE_ns2__AttributeSupplierListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AttributeSupplierListType(struct soap*, const char*, int, const ns2__AttributeSupplierListType *, const char*);
SOAP_FMAC3 ns2__AttributeSupplierListType * SOAP_FMAC4 soap_in_ns2__AttributeSupplierListType(struct soap*, const char*, ns2__AttributeSupplierListType *, const char*);
SOAP_FMAC1 ns2__AttributeSupplierListType * SOAP_FMAC2 SCAP_instantiate_ns2__AttributeSupplierListType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AttributeSupplierListType * soap_new_ns2__AttributeSupplierListType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__AttributeSupplierListType(soap, n, NULL, NULL, NULL);
}

inline ns2__AttributeSupplierListType * soap_new_req_ns2__AttributeSupplierListType(
	struct soap *soap,
	const std::vector<ns3__AttributeSupplierType *> & AttributeSupplier)
{
	ns2__AttributeSupplierListType *_p = soap_new_ns2__AttributeSupplierListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeSupplierListType::AttributeSupplier = AttributeSupplier;
	}
	return _p;
}

inline ns2__AttributeSupplierListType * soap_new_set_ns2__AttributeSupplierListType(
	struct soap *soap,
	const std::vector<ns3__AttributeSupplierType *> & AttributeSupplier)
{
	ns2__AttributeSupplierListType *_p = soap_new_ns2__AttributeSupplierListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeSupplierListType::AttributeSupplier = AttributeSupplier;
	}
	return _p;
}

inline int soap_write_ns2__AttributeSupplierListType(struct soap *soap, ns2__AttributeSupplierListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeSupplierListType", p->soap_type() == SOAP_TYPE_ns2__AttributeSupplierListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AttributeSupplierListType(struct soap *soap, const char *URL, ns2__AttributeSupplierListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeSupplierListType", p->soap_type() == SOAP_TYPE_ns2__AttributeSupplierListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AttributeSupplierListType(struct soap *soap, const char *URL, ns2__AttributeSupplierListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeSupplierListType", p->soap_type() == SOAP_TYPE_ns2__AttributeSupplierListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AttributeSupplierListType * SOAP_FMAC4 soap_get_ns2__AttributeSupplierListType(struct soap*, ns2__AttributeSupplierListType *, const char*, const char*);

inline int soap_read_ns2__AttributeSupplierListType(struct soap *soap, ns2__AttributeSupplierListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__AttributeSupplierListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AttributeSupplierListType(struct soap *soap, const char *URL, ns2__AttributeSupplierListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__AttributeSupplierListType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__AttributeSupplierListType(struct soap *soap, ns2__AttributeSupplierListType *p)
{
	if (soap_read_ns2__AttributeSupplierListType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__PSAAttributeRequestType_DEFINED
#define SOAP_TYPE_ns2__PSAAttributeRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PSAAttributeRequestType(struct soap*, const char*, int, const ns2__PSAAttributeRequestType *, const char*);
SOAP_FMAC3 ns2__PSAAttributeRequestType * SOAP_FMAC4 soap_in_ns2__PSAAttributeRequestType(struct soap*, const char*, ns2__PSAAttributeRequestType *, const char*);
SOAP_FMAC1 ns2__PSAAttributeRequestType * SOAP_FMAC2 SCAP_instantiate_ns2__PSAAttributeRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PSAAttributeRequestType * soap_new_ns2__PSAAttributeRequestType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__PSAAttributeRequestType(soap, n, NULL, NULL, NULL);
}

inline ns2__PSAAttributeRequestType * soap_new_req_ns2__PSAAttributeRequestType(
	struct soap *soap,
	const std::string& ProcessId,
	ns3__PersonalDataType *Citizen)
{
	ns2__PSAAttributeRequestType *_p = soap_new_ns2__PSAAttributeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PSAAttributeRequestType::ProcessId = ProcessId;
		_p->ns2__PSAAttributeRequestType::Citizen = Citizen;
	}
	return _p;
}

inline ns2__PSAAttributeRequestType * soap_new_set_ns2__PSAAttributeRequestType(
	struct soap *soap,
	const std::string& ProcessId,
	ns3__PersonalDataType *Citizen,
	std::string *CompanyId,
	std::string *CompanyName)
{
	ns2__PSAAttributeRequestType *_p = soap_new_ns2__PSAAttributeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PSAAttributeRequestType::ProcessId = ProcessId;
		_p->ns2__PSAAttributeRequestType::Citizen = Citizen;
		_p->ns2__PSAAttributeRequestType::CompanyId = CompanyId;
		_p->ns2__PSAAttributeRequestType::CompanyName = CompanyName;
	}
	return _p;
}

inline int soap_write_ns2__PSAAttributeRequestType(struct soap *soap, ns2__PSAAttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PSAAttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__PSAAttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__PSAAttributeRequestType(struct soap *soap, const char *URL, ns2__PSAAttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PSAAttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__PSAAttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__PSAAttributeRequestType(struct soap *soap, const char *URL, ns2__PSAAttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PSAAttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__PSAAttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PSAAttributeRequestType * SOAP_FMAC4 soap_get_ns2__PSAAttributeRequestType(struct soap*, ns2__PSAAttributeRequestType *, const char*, const char*);

inline int soap_read_ns2__PSAAttributeRequestType(struct soap *soap, ns2__PSAAttributeRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__PSAAttributeRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__PSAAttributeRequestType(struct soap *soap, const char *URL, ns2__PSAAttributeRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__PSAAttributeRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__PSAAttributeRequestType(struct soap *soap, ns2__PSAAttributeRequestType *p)
{
	if (soap_read_ns2__PSAAttributeRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__SingleAttributeRequestType_DEFINED
#define SOAP_TYPE_ns2__SingleAttributeRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__SingleAttributeRequestType(struct soap*, const char*, int, const ns2__SingleAttributeRequestType *, const char*);
SOAP_FMAC3 ns2__SingleAttributeRequestType * SOAP_FMAC4 soap_in_ns2__SingleAttributeRequestType(struct soap*, const char*, ns2__SingleAttributeRequestType *, const char*);
SOAP_FMAC1 ns2__SingleAttributeRequestType * SOAP_FMAC2 SCAP_instantiate_ns2__SingleAttributeRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__SingleAttributeRequestType * soap_new_ns2__SingleAttributeRequestType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__SingleAttributeRequestType(soap, n, NULL, NULL, NULL);
}

inline ns2__SingleAttributeRequestType * soap_new_req_ns2__SingleAttributeRequestType(
	struct soap *soap,
	const std::string& ProcessId,
	ns3__PersonalDataType *Citizen,
	ns3__AttributeSupplierType *AttributeSuppliers)
{
	ns2__SingleAttributeRequestType *_p = soap_new_ns2__SingleAttributeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SingleAttributeRequestType::ProcessId = ProcessId;
		_p->ns2__SingleAttributeRequestType::Citizen = Citizen;
		_p->ns2__SingleAttributeRequestType::AttributeSuppliers = AttributeSuppliers;
	}
	return _p;
}

inline ns2__SingleAttributeRequestType * soap_new_set_ns2__SingleAttributeRequestType(
	struct soap *soap,
	const std::string& ProcessId,
	ns3__PersonalDataType *Citizen,
	ns3__AttributeSupplierType *AttributeSuppliers)
{
	ns2__SingleAttributeRequestType *_p = soap_new_ns2__SingleAttributeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__SingleAttributeRequestType::ProcessId = ProcessId;
		_p->ns2__SingleAttributeRequestType::Citizen = Citizen;
		_p->ns2__SingleAttributeRequestType::AttributeSuppliers = AttributeSuppliers;
	}
	return _p;
}

inline int soap_write_ns2__SingleAttributeRequestType(struct soap *soap, ns2__SingleAttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleAttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__SingleAttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__SingleAttributeRequestType(struct soap *soap, const char *URL, ns2__SingleAttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleAttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__SingleAttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__SingleAttributeRequestType(struct soap *soap, const char *URL, ns2__SingleAttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SingleAttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__SingleAttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__SingleAttributeRequestType * SOAP_FMAC4 soap_get_ns2__SingleAttributeRequestType(struct soap*, ns2__SingleAttributeRequestType *, const char*, const char*);

inline int soap_read_ns2__SingleAttributeRequestType(struct soap *soap, ns2__SingleAttributeRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__SingleAttributeRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__SingleAttributeRequestType(struct soap *soap, const char *URL, ns2__SingleAttributeRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__SingleAttributeRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__SingleAttributeRequestType(struct soap *soap, ns2__SingleAttributeRequestType *p)
{
	if (soap_read_ns2__SingleAttributeRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__AttributeRequestType_DEFINED
#define SOAP_TYPE_ns2__AttributeRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AttributeRequestType(struct soap*, const char*, int, const ns2__AttributeRequestType *, const char*);
SOAP_FMAC3 ns2__AttributeRequestType * SOAP_FMAC4 soap_in_ns2__AttributeRequestType(struct soap*, const char*, ns2__AttributeRequestType *, const char*);
SOAP_FMAC1 ns2__AttributeRequestType * SOAP_FMAC2 SCAP_instantiate_ns2__AttributeRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AttributeRequestType * soap_new_ns2__AttributeRequestType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_ns2__AttributeRequestType(soap, n, NULL, NULL, NULL);
}

inline ns2__AttributeRequestType * soap_new_req_ns2__AttributeRequestType(
	struct soap *soap,
	const std::string& ProcessId,
	ns3__PersonalDataType *Citizen,
	ns2__AttributeSupplierListType *AttributeSuppliers)
{
	ns2__AttributeRequestType *_p = soap_new_ns2__AttributeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeRequestType::ProcessId = ProcessId;
		_p->ns2__AttributeRequestType::Citizen = Citizen;
		_p->ns2__AttributeRequestType::AttributeSuppliers = AttributeSuppliers;
	}
	return _p;
}

inline ns2__AttributeRequestType * soap_new_set_ns2__AttributeRequestType(
	struct soap *soap,
	const std::string& ProcessId,
	ns3__PersonalDataType *Citizen,
	ns2__AttributeSupplierListType *AttributeSuppliers,
	bool *AllEnterprises,
	std::string *AppId,
	std::string *AppName,
	std::string *SecretKey)
{
	ns2__AttributeRequestType *_p = soap_new_ns2__AttributeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeRequestType::ProcessId = ProcessId;
		_p->ns2__AttributeRequestType::Citizen = Citizen;
		_p->ns2__AttributeRequestType::AttributeSuppliers = AttributeSuppliers;
		_p->ns2__AttributeRequestType::AllEnterprises = AllEnterprises;
		_p->ns2__AttributeRequestType::AppId = AppId;
		_p->ns2__AttributeRequestType::AppName = AppName;
		_p->ns2__AttributeRequestType::SecretKey = SecretKey;
	}
	return _p;
}

inline int soap_write_ns2__AttributeRequestType(struct soap *soap, ns2__AttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__AttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__AttributeRequestType(struct soap *soap, const char *URL, ns2__AttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__AttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__AttributeRequestType(struct soap *soap, const char *URL, ns2__AttributeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AttributeRequestType", p->soap_type() == SOAP_TYPE_ns2__AttributeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__AttributeRequestType * SOAP_FMAC4 soap_get_ns2__AttributeRequestType(struct soap*, ns2__AttributeRequestType *, const char*, const char*);

inline int soap_read_ns2__AttributeRequestType(struct soap *soap, ns2__AttributeRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__AttributeRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__AttributeRequestType(struct soap *soap, const char *URL, ns2__AttributeRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__AttributeRequestType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__AttributeRequestType(struct soap *soap, ns2__AttributeRequestType *p)
{
	if (soap_read_ns2__AttributeRequestType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_xsd__integer SCAP_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__integer(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__date_DEFINED
#define SOAP_TYPE_xsd__date_DEFINED

inline void soap_default_xsd__date(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, const std::string *);

#define soap_xsd__date2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__date(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_xsd__date SCAP_instantiate_std__string


#define soap_new_xsd__date soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__date(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__date(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__date(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__date(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__date(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_xsd__anyURI SCAP_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID_DEFINED
#define SOAP_TYPE_xsd__ID_DEFINED

inline void soap_default_xsd__ID(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::string *);

#define soap_xsd__ID2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__ID(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::string*, const char*);

#define SCAP_instantiate_xsd__ID SCAP_instantiate_std__string


#define soap_new_xsd__ID soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__ID(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__ID(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__ID(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__ID(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__ID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__ID(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__ID(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__ID(struct soap *soap, std::string *p)
{
	if (soap_read_xsd__ID(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 SCAP_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 SCAP_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns8__AttributeSuppliers_DEFINED
#define SOAP_TYPE___ns8__AttributeSuppliers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns8__AttributeSuppliers(struct soap*, struct __ns8__AttributeSuppliers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns8__AttributeSuppliers(struct soap*, const struct __ns8__AttributeSuppliers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns8__AttributeSuppliers(struct soap*, const char*, int, const struct __ns8__AttributeSuppliers *, const char*);
SOAP_FMAC3 struct __ns8__AttributeSuppliers * SOAP_FMAC4 soap_in___ns8__AttributeSuppliers(struct soap*, const char*, struct __ns8__AttributeSuppliers *, const char*);
SOAP_FMAC1 struct __ns8__AttributeSuppliers * SOAP_FMAC2 SCAP_instantiate___ns8__AttributeSuppliers(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns8__AttributeSuppliers * soap_new___ns8__AttributeSuppliers(struct soap *soap, int n = -1)
{
	return SCAP_instantiate___ns8__AttributeSuppliers(soap, n, NULL, NULL, NULL);
}

inline struct __ns8__AttributeSuppliers * soap_new_req___ns8__AttributeSuppliers(
	struct soap *soap)
{
	struct __ns8__AttributeSuppliers *_p = soap_new___ns8__AttributeSuppliers(soap);
	if (_p)
	{	soap_default___ns8__AttributeSuppliers(soap, _p);
	}
	return _p;
}

inline struct __ns8__AttributeSuppliers * soap_new_set___ns8__AttributeSuppliers(
	struct soap *soap)
{
	struct __ns8__AttributeSuppliers *_p = soap_new___ns8__AttributeSuppliers(soap);
	if (_p)
	{	soap_default___ns8__AttributeSuppliers(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns8__AttributeSuppliers(struct soap*, const struct __ns8__AttributeSuppliers *, const char*, const char*);

inline int soap_write___ns8__AttributeSuppliers(struct soap *soap, struct __ns8__AttributeSuppliers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns8__AttributeSuppliers(soap, p), 0) || soap_put___ns8__AttributeSuppliers(soap, p, "-ns8:AttributeSuppliers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns8__AttributeSuppliers(struct soap *soap, const char *URL, struct __ns8__AttributeSuppliers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns8__AttributeSuppliers(soap, p), 0) || soap_put___ns8__AttributeSuppliers(soap, p, "-ns8:AttributeSuppliers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns8__AttributeSuppliers(struct soap *soap, const char *URL, struct __ns8__AttributeSuppliers const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns8__AttributeSuppliers(soap, p), 0) || soap_put___ns8__AttributeSuppliers(soap, p, "-ns8:AttributeSuppliers", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns8__AttributeSuppliers * SOAP_FMAC4 soap_get___ns8__AttributeSuppliers(struct soap*, struct __ns8__AttributeSuppliers *, const char*, const char*);

inline int soap_read___ns8__AttributeSuppliers(struct soap *soap, struct __ns8__AttributeSuppliers *p)
{
	if (p)
	{	soap_default___ns8__AttributeSuppliers(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns8__AttributeSuppliers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns8__AttributeSuppliers(struct soap *soap, const char *URL, struct __ns8__AttributeSuppliers *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns8__AttributeSuppliers(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns8__AttributeSuppliers(struct soap *soap, struct __ns8__AttributeSuppliers *p)
{
	if (soap_read___ns8__AttributeSuppliers(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns3__Signature_DEFINED
#define SOAP_TYPE___ns3__Signature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__Signature(struct soap*, struct __ns3__Signature *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__Signature(struct soap*, const struct __ns3__Signature *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__Signature(struct soap*, const char*, int, const struct __ns3__Signature *, const char*);
SOAP_FMAC3 struct __ns3__Signature * SOAP_FMAC4 soap_in___ns3__Signature(struct soap*, const char*, struct __ns3__Signature *, const char*);
SOAP_FMAC1 struct __ns3__Signature * SOAP_FMAC2 SCAP_instantiate___ns3__Signature(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__Signature * soap_new___ns3__Signature(struct soap *soap, int n = -1)
{
	return SCAP_instantiate___ns3__Signature(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__Signature * soap_new_req___ns3__Signature(
	struct soap *soap)
{
	struct __ns3__Signature *_p = soap_new___ns3__Signature(soap);
	if (_p)
	{	soap_default___ns3__Signature(soap, _p);
	}
	return _p;
}

inline struct __ns3__Signature * soap_new_set___ns3__Signature(
	struct soap *soap,
	_ns1__SignatureRequest *ns1__SignatureRequest)
{
	struct __ns3__Signature *_p = soap_new___ns3__Signature(soap);
	if (_p)
	{	soap_default___ns3__Signature(soap, _p);
		_p->ns1__SignatureRequest = ns1__SignatureRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__Signature(struct soap*, const struct __ns3__Signature *, const char*, const char*);

inline int soap_write___ns3__Signature(struct soap *soap, struct __ns3__Signature const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns3__Signature(soap, p), 0) || soap_put___ns3__Signature(soap, p, "-ns3:Signature", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__Signature(struct soap *soap, const char *URL, struct __ns3__Signature const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns3__Signature(soap, p), 0) || soap_put___ns3__Signature(soap, p, "-ns3:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns3__Signature(struct soap *soap, const char *URL, struct __ns3__Signature const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns3__Signature(soap, p), 0) || soap_put___ns3__Signature(soap, p, "-ns3:Signature", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__Signature * SOAP_FMAC4 soap_get___ns3__Signature(struct soap*, struct __ns3__Signature *, const char*, const char*);

inline int soap_read___ns3__Signature(struct soap *soap, struct __ns3__Signature *p)
{
	if (p)
	{	soap_default___ns3__Signature(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns3__Signature(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__Signature(struct soap *soap, const char *URL, struct __ns3__Signature *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns3__Signature(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns3__Signature(struct soap *soap, struct __ns3__Signature *p)
{
	if (soap_read___ns3__Signature(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns2__Authorization_DEFINED
#define SOAP_TYPE___ns2__Authorization_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__Authorization(struct soap*, struct __ns2__Authorization *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__Authorization(struct soap*, const struct __ns2__Authorization *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__Authorization(struct soap*, const char*, int, const struct __ns2__Authorization *, const char*);
SOAP_FMAC3 struct __ns2__Authorization * SOAP_FMAC4 soap_in___ns2__Authorization(struct soap*, const char*, struct __ns2__Authorization *, const char*);
SOAP_FMAC1 struct __ns2__Authorization * SOAP_FMAC2 SCAP_instantiate___ns2__Authorization(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns2__Authorization * soap_new___ns2__Authorization(struct soap *soap, int n = -1)
{
	return SCAP_instantiate___ns2__Authorization(soap, n, NULL, NULL, NULL);
}

inline struct __ns2__Authorization * soap_new_req___ns2__Authorization(
	struct soap *soap)
{
	struct __ns2__Authorization *_p = soap_new___ns2__Authorization(soap);
	if (_p)
	{	soap_default___ns2__Authorization(soap, _p);
	}
	return _p;
}

inline struct __ns2__Authorization * soap_new_set___ns2__Authorization(
	struct soap *soap,
	_ns1__AuthorizationRequest *ns1__AuthorizationRequest)
{
	struct __ns2__Authorization *_p = soap_new___ns2__Authorization(soap);
	if (_p)
	{	soap_default___ns2__Authorization(soap, _p);
		_p->ns1__AuthorizationRequest = ns1__AuthorizationRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__Authorization(struct soap*, const struct __ns2__Authorization *, const char*, const char*);

inline int soap_write___ns2__Authorization(struct soap *soap, struct __ns2__Authorization const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns2__Authorization(soap, p), 0) || soap_put___ns2__Authorization(soap, p, "-ns2:Authorization", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns2__Authorization(struct soap *soap, const char *URL, struct __ns2__Authorization const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns2__Authorization(soap, p), 0) || soap_put___ns2__Authorization(soap, p, "-ns2:Authorization", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns2__Authorization(struct soap *soap, const char *URL, struct __ns2__Authorization const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns2__Authorization(soap, p), 0) || soap_put___ns2__Authorization(soap, p, "-ns2:Authorization", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns2__Authorization * SOAP_FMAC4 soap_get___ns2__Authorization(struct soap*, struct __ns2__Authorization *, const char*, const char*);

inline int soap_read___ns2__Authorization(struct soap *soap, struct __ns2__Authorization *p)
{
	if (p)
	{	soap_default___ns2__Authorization(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns2__Authorization(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns2__Authorization(struct soap *soap, const char *URL, struct __ns2__Authorization *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns2__Authorization(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns2__Authorization(struct soap *soap, struct __ns2__Authorization *p)
{
	if (soap_read___ns2__Authorization(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Attributes_DEFINED
#define SOAP_TYPE___ns1__Attributes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Attributes(struct soap*, struct __ns1__Attributes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Attributes(struct soap*, const struct __ns1__Attributes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Attributes(struct soap*, const char*, int, const struct __ns1__Attributes *, const char*);
SOAP_FMAC3 struct __ns1__Attributes * SOAP_FMAC4 soap_in___ns1__Attributes(struct soap*, const char*, struct __ns1__Attributes *, const char*);
SOAP_FMAC1 struct __ns1__Attributes * SOAP_FMAC2 SCAP_instantiate___ns1__Attributes(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Attributes * soap_new___ns1__Attributes(struct soap *soap, int n = -1)
{
	return SCAP_instantiate___ns1__Attributes(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Attributes * soap_new_req___ns1__Attributes(
	struct soap *soap)
{
	struct __ns1__Attributes *_p = soap_new___ns1__Attributes(soap);
	if (_p)
	{	soap_default___ns1__Attributes(soap, _p);
	}
	return _p;
}

inline struct __ns1__Attributes * soap_new_set___ns1__Attributes(
	struct soap *soap,
	ns2__AttributeRequestType *ns2__AttributeRequest)
{
	struct __ns1__Attributes *_p = soap_new___ns1__Attributes(soap);
	if (_p)
	{	soap_default___ns1__Attributes(soap, _p);
		_p->ns2__AttributeRequest = ns2__AttributeRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Attributes(struct soap*, const struct __ns1__Attributes *, const char*, const char*);

inline int soap_write___ns1__Attributes(struct soap *soap, struct __ns1__Attributes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Attributes(soap, p), 0) || soap_put___ns1__Attributes(soap, p, "-ns1:Attributes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Attributes(struct soap *soap, const char *URL, struct __ns1__Attributes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__Attributes(soap, p), 0) || soap_put___ns1__Attributes(soap, p, "-ns1:Attributes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Attributes(struct soap *soap, const char *URL, struct __ns1__Attributes const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__Attributes(soap, p), 0) || soap_put___ns1__Attributes(soap, p, "-ns1:Attributes", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Attributes * SOAP_FMAC4 soap_get___ns1__Attributes(struct soap*, struct __ns1__Attributes *, const char*, const char*);

inline int soap_read___ns1__Attributes(struct soap *soap, struct __ns1__Attributes *p)
{
	if (p)
	{	soap_default___ns1__Attributes(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Attributes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Attributes(struct soap *soap, const char *URL, struct __ns1__Attributes *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Attributes(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Attributes(struct soap *soap, struct __ns1__Attributes *p)
{
	if (soap_read___ns1__Attributes(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 SCAP_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 SCAP_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 SCAP_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 SCAP_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 SCAP_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa__MessageID,
	struct wsa__Relationship *wsa__RelatesTo,
	struct wsa__EndpointReferenceType *wsa__From,
	struct wsa__EndpointReferenceType *wsa__ReplyTo,
	struct wsa__EndpointReferenceType *wsa__FaultTo,
	char *wsa__To,
	char *wsa__Action)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa__MessageID = wsa__MessageID;
		_p->wsa__RelatesTo = wsa__RelatesTo;
		_p->wsa__From = wsa__From;
		_p->wsa__ReplyTo = wsa__ReplyTo;
		_p->wsa__FaultTo = wsa__FaultTo;
		_p->wsa__To = wsa__To;
		_p->wsa__Action = wsa__Action;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif
/* _wsa__FaultTo is a typedef synonym for wsa__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa__FaultTo_DEFINED
#define SOAP_TYPE__wsa__FaultTo_DEFINED

#define soap_default__wsa__FaultTo soap_default_wsa__EndpointReferenceType


#define soap_serialize__wsa__FaultTo soap_serialize_wsa__EndpointReferenceType


#define soap__wsa__FaultTo2s soap_wsa__EndpointReferenceType2s


#define soap_out__wsa__FaultTo soap_out_wsa__EndpointReferenceType


#define soap_s2_wsa__FaultTo soap_s2wsa__EndpointReferenceType


#define soap_in__wsa__FaultTo soap_in_wsa__EndpointReferenceType


#define SCAP_instantiate__wsa__FaultTo SCAP_instantiate_wsa__EndpointReferenceType


#define soap_new__wsa__FaultTo soap_new_wsa__EndpointReferenceType


#define soap_new_req__wsa__FaultTo soap_new_req_wsa__EndpointReferenceType


#define soap_new_set__wsa__FaultTo soap_new_set_wsa__EndpointReferenceType


#define soap_put__wsa__FaultTo soap_put_wsa__EndpointReferenceType


#define soap_write__wsa__FaultTo soap_write_wsa__EndpointReferenceType


#define soap_PUT__wsa__FaultTo soap_PUT_wsa__EndpointReferenceType


#define soap_POST_send__wsa__FaultTo soap_POST_send_wsa__EndpointReferenceType


#define soap_get__wsa__FaultTo soap_get_wsa__EndpointReferenceType


#define soap_read__wsa__FaultTo soap_read_wsa__EndpointReferenceType


#define soap_GET__wsa__FaultTo soap_GET_wsa__EndpointReferenceType


#define soap_POST_recv__wsa__FaultTo soap_POST_recv_wsa__EndpointReferenceType

#endif
/* _wsa__ReplyTo is a typedef synonym for wsa__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa__ReplyTo_DEFINED
#define SOAP_TYPE__wsa__ReplyTo_DEFINED

#define soap_default__wsa__ReplyTo soap_default_wsa__EndpointReferenceType


#define soap_serialize__wsa__ReplyTo soap_serialize_wsa__EndpointReferenceType


#define soap__wsa__ReplyTo2s soap_wsa__EndpointReferenceType2s


#define soap_out__wsa__ReplyTo soap_out_wsa__EndpointReferenceType


#define soap_s2_wsa__ReplyTo soap_s2wsa__EndpointReferenceType


#define soap_in__wsa__ReplyTo soap_in_wsa__EndpointReferenceType


#define SCAP_instantiate__wsa__ReplyTo SCAP_instantiate_wsa__EndpointReferenceType


#define soap_new__wsa__ReplyTo soap_new_wsa__EndpointReferenceType


#define soap_new_req__wsa__ReplyTo soap_new_req_wsa__EndpointReferenceType


#define soap_new_set__wsa__ReplyTo soap_new_set_wsa__EndpointReferenceType


#define soap_put__wsa__ReplyTo soap_put_wsa__EndpointReferenceType


#define soap_write__wsa__ReplyTo soap_write_wsa__EndpointReferenceType


#define soap_PUT__wsa__ReplyTo soap_PUT_wsa__EndpointReferenceType


#define soap_POST_send__wsa__ReplyTo soap_POST_send_wsa__EndpointReferenceType


#define soap_get__wsa__ReplyTo soap_get_wsa__EndpointReferenceType


#define soap_read__wsa__ReplyTo soap_read_wsa__EndpointReferenceType


#define soap_GET__wsa__ReplyTo soap_GET_wsa__EndpointReferenceType


#define soap_POST_recv__wsa__ReplyTo soap_POST_recv_wsa__EndpointReferenceType

#endif
/* _wsa__From is a typedef synonym for wsa__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa__From_DEFINED
#define SOAP_TYPE__wsa__From_DEFINED

#define soap_default__wsa__From soap_default_wsa__EndpointReferenceType


#define soap_serialize__wsa__From soap_serialize_wsa__EndpointReferenceType


#define soap__wsa__From2s soap_wsa__EndpointReferenceType2s


#define soap_out__wsa__From soap_out_wsa__EndpointReferenceType


#define soap_s2_wsa__From soap_s2wsa__EndpointReferenceType


#define soap_in__wsa__From soap_in_wsa__EndpointReferenceType


#define SCAP_instantiate__wsa__From SCAP_instantiate_wsa__EndpointReferenceType


#define soap_new__wsa__From soap_new_wsa__EndpointReferenceType


#define soap_new_req__wsa__From soap_new_req_wsa__EndpointReferenceType


#define soap_new_set__wsa__From soap_new_set_wsa__EndpointReferenceType


#define soap_put__wsa__From soap_put_wsa__EndpointReferenceType


#define soap_write__wsa__From soap_write_wsa__EndpointReferenceType


#define soap_PUT__wsa__From soap_PUT_wsa__EndpointReferenceType


#define soap_POST_send__wsa__From soap_POST_send_wsa__EndpointReferenceType


#define soap_get__wsa__From soap_get_wsa__EndpointReferenceType


#define soap_read__wsa__From soap_read_wsa__EndpointReferenceType


#define soap_GET__wsa__From soap_GET_wsa__EndpointReferenceType


#define soap_POST_recv__wsa__From soap_POST_recv_wsa__EndpointReferenceType

#endif
/* _wsa__RelatesTo is a typedef synonym for wsa__Relationship */

#ifndef SOAP_TYPE__wsa__RelatesTo_DEFINED
#define SOAP_TYPE__wsa__RelatesTo_DEFINED

#define soap_default__wsa__RelatesTo soap_default_wsa__Relationship


#define soap_serialize__wsa__RelatesTo soap_serialize_wsa__Relationship


#define soap__wsa__RelatesTo2s soap_wsa__Relationship2s


#define soap_out__wsa__RelatesTo soap_out_wsa__Relationship


#define soap_s2_wsa__RelatesTo soap_s2wsa__Relationship


#define soap_in__wsa__RelatesTo soap_in_wsa__Relationship


#define SCAP_instantiate__wsa__RelatesTo SCAP_instantiate_wsa__Relationship


#define soap_new__wsa__RelatesTo soap_new_wsa__Relationship


#define soap_new_req__wsa__RelatesTo soap_new_req_wsa__Relationship


#define soap_new_set__wsa__RelatesTo soap_new_set_wsa__Relationship


#define soap_put__wsa__RelatesTo soap_put_wsa__Relationship


#define soap_write__wsa__RelatesTo soap_write_wsa__Relationship


#define soap_PUT__wsa__RelatesTo soap_PUT_wsa__Relationship


#define soap_POST_send__wsa__RelatesTo soap_POST_send_wsa__Relationship


#define soap_get__wsa__RelatesTo soap_get_wsa__Relationship


#define soap_read__wsa__RelatesTo soap_read_wsa__Relationship


#define soap_GET__wsa__RelatesTo soap_GET_wsa__Relationship


#define soap_POST_recv__wsa__RelatesTo soap_POST_recv_wsa__Relationship

#endif
/* _wsa__EndpointReference is a typedef synonym for wsa__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa__EndpointReference_DEFINED
#define SOAP_TYPE__wsa__EndpointReference_DEFINED

#define soap_default__wsa__EndpointReference soap_default_wsa__EndpointReferenceType


#define soap_serialize__wsa__EndpointReference soap_serialize_wsa__EndpointReferenceType


#define soap__wsa__EndpointReference2s soap_wsa__EndpointReferenceType2s


#define soap_out__wsa__EndpointReference soap_out_wsa__EndpointReferenceType


#define soap_s2_wsa__EndpointReference soap_s2wsa__EndpointReferenceType


#define soap_in__wsa__EndpointReference soap_in_wsa__EndpointReferenceType


#define SCAP_instantiate__wsa__EndpointReference SCAP_instantiate_wsa__EndpointReferenceType


#define soap_new__wsa__EndpointReference soap_new_wsa__EndpointReferenceType


#define soap_new_req__wsa__EndpointReference soap_new_req_wsa__EndpointReferenceType


#define soap_new_set__wsa__EndpointReference soap_new_set_wsa__EndpointReferenceType


#define soap_put__wsa__EndpointReference soap_put_wsa__EndpointReferenceType


#define soap_write__wsa__EndpointReference soap_write_wsa__EndpointReferenceType


#define soap_PUT__wsa__EndpointReference soap_PUT_wsa__EndpointReferenceType


#define soap_POST_send__wsa__EndpointReference soap_POST_send_wsa__EndpointReferenceType


#define soap_get__wsa__EndpointReference soap_get_wsa__EndpointReferenceType


#define soap_read__wsa__EndpointReference soap_read_wsa__EndpointReferenceType


#define soap_GET__wsa__EndpointReference soap_GET_wsa__EndpointReferenceType


#define soap_POST_recv__wsa__EndpointReference soap_POST_recv_wsa__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa__Relationship_DEFINED
#define SOAP_TYPE_wsa__Relationship_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa__Relationship(struct soap*, struct wsa__Relationship *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa__Relationship(struct soap*, const struct wsa__Relationship *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__Relationship(struct soap*, const char*, int, const struct wsa__Relationship *, const char*);
SOAP_FMAC3 struct wsa__Relationship * SOAP_FMAC4 soap_in_wsa__Relationship(struct soap*, const char*, struct wsa__Relationship *, const char*);
SOAP_FMAC1 struct wsa__Relationship * SOAP_FMAC2 SCAP_instantiate_wsa__Relationship(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa__Relationship * soap_new_wsa__Relationship(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_wsa__Relationship(soap, n, NULL, NULL, NULL);
}

inline struct wsa__Relationship * soap_new_req_wsa__Relationship(
	struct soap *soap)
{
	struct wsa__Relationship *_p = soap_new_wsa__Relationship(soap);
	if (_p)
	{	soap_default_wsa__Relationship(soap, _p);
	}
	return _p;
}

inline struct wsa__Relationship * soap_new_set_wsa__Relationship(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa__Relationship *_p = soap_new_wsa__Relationship(soap);
	if (_p)
	{	soap_default_wsa__Relationship(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__Relationship(struct soap*, const struct wsa__Relationship *, const char*, const char*);

inline int soap_write_wsa__Relationship(struct soap *soap, struct wsa__Relationship const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsa__Relationship(soap, p), 0) || soap_put_wsa__Relationship(soap, p, "wsa:Relationship", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa__Relationship(struct soap *soap, const char *URL, struct wsa__Relationship const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsa__Relationship(soap, p), 0) || soap_put_wsa__Relationship(soap, p, "wsa:Relationship", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__Relationship(struct soap *soap, const char *URL, struct wsa__Relationship const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsa__Relationship(soap, p), 0) || soap_put_wsa__Relationship(soap, p, "wsa:Relationship", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa__Relationship * SOAP_FMAC4 soap_get_wsa__Relationship(struct soap*, struct wsa__Relationship *, const char*, const char*);

inline int soap_read_wsa__Relationship(struct soap *soap, struct wsa__Relationship *p)
{
	if (p)
	{	soap_default_wsa__Relationship(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa__Relationship(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__Relationship(struct soap *soap, const char *URL, struct wsa__Relationship *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__Relationship(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__Relationship(struct soap *soap, struct wsa__Relationship *p)
{
	if (soap_read_wsa__Relationship(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa__ServiceNameType_DEFINED
#define SOAP_TYPE_wsa__ServiceNameType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa__ServiceNameType(struct soap*, struct wsa__ServiceNameType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa__ServiceNameType(struct soap*, const struct wsa__ServiceNameType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__ServiceNameType(struct soap*, const char*, int, const struct wsa__ServiceNameType *, const char*);
SOAP_FMAC3 struct wsa__ServiceNameType * SOAP_FMAC4 soap_in_wsa__ServiceNameType(struct soap*, const char*, struct wsa__ServiceNameType *, const char*);
SOAP_FMAC1 struct wsa__ServiceNameType * SOAP_FMAC2 SCAP_instantiate_wsa__ServiceNameType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa__ServiceNameType * soap_new_wsa__ServiceNameType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_wsa__ServiceNameType(soap, n, NULL, NULL, NULL);
}

inline struct wsa__ServiceNameType * soap_new_req_wsa__ServiceNameType(
	struct soap *soap)
{
	struct wsa__ServiceNameType *_p = soap_new_wsa__ServiceNameType(soap);
	if (_p)
	{	soap_default_wsa__ServiceNameType(soap, _p);
	}
	return _p;
}

inline struct wsa__ServiceNameType * soap_new_set_wsa__ServiceNameType(
	struct soap *soap,
	char *__item,
	char *PortName,
	char *__anyAttribute)
{
	struct wsa__ServiceNameType *_p = soap_new_wsa__ServiceNameType(soap);
	if (_p)
	{	soap_default_wsa__ServiceNameType(soap, _p);
		_p->__item = __item;
		_p->PortName = PortName;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__ServiceNameType(struct soap*, const struct wsa__ServiceNameType *, const char*, const char*);

inline int soap_write_wsa__ServiceNameType(struct soap *soap, struct wsa__ServiceNameType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsa__ServiceNameType(soap, p), 0) || soap_put_wsa__ServiceNameType(soap, p, "wsa:ServiceNameType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa__ServiceNameType(struct soap *soap, const char *URL, struct wsa__ServiceNameType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsa__ServiceNameType(soap, p), 0) || soap_put_wsa__ServiceNameType(soap, p, "wsa:ServiceNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__ServiceNameType(struct soap *soap, const char *URL, struct wsa__ServiceNameType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsa__ServiceNameType(soap, p), 0) || soap_put_wsa__ServiceNameType(soap, p, "wsa:ServiceNameType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa__ServiceNameType * SOAP_FMAC4 soap_get_wsa__ServiceNameType(struct soap*, struct wsa__ServiceNameType *, const char*, const char*);

inline int soap_read_wsa__ServiceNameType(struct soap *soap, struct wsa__ServiceNameType *p)
{
	if (p)
	{	soap_default_wsa__ServiceNameType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa__ServiceNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__ServiceNameType(struct soap *soap, const char *URL, struct wsa__ServiceNameType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__ServiceNameType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__ServiceNameType(struct soap *soap, struct wsa__ServiceNameType *p)
{
	if (soap_read_wsa__ServiceNameType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa__ReferenceParametersType(struct soap*, struct wsa__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa__ReferenceParametersType(struct soap*, const struct wsa__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__ReferenceParametersType(struct soap*, const char*, int, const struct wsa__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa__ReferenceParametersType(struct soap*, const char*, struct wsa__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa__ReferenceParametersType * SOAP_FMAC2 SCAP_instantiate_wsa__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa__ReferenceParametersType * soap_new_wsa__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_wsa__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa__ReferenceParametersType * soap_new_req_wsa__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa__ReferenceParametersType *_p = soap_new_wsa__ReferenceParametersType(soap);
	if (_p)
	{	soap_default_wsa__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa__ReferenceParametersType * soap_new_set_wsa__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa__ReferenceParametersType *_p = soap_new_wsa__ReferenceParametersType(soap);
	if (_p)
	{	soap_default_wsa__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__ReferenceParametersType(struct soap*, const struct wsa__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa__ReferenceParametersType(struct soap *soap, struct wsa__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsa__ReferenceParametersType(soap, p), 0) || soap_put_wsa__ReferenceParametersType(soap, p, "wsa:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsa__ReferenceParametersType(soap, p), 0) || soap_put_wsa__ReferenceParametersType(soap, p, "wsa:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsa__ReferenceParametersType(soap, p), 0) || soap_put_wsa__ReferenceParametersType(soap, p, "wsa:ReferenceParametersType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa__ReferenceParametersType(struct soap*, struct wsa__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa__ReferenceParametersType(struct soap *soap, struct wsa__ReferenceParametersType *p)
{
	if (p)
	{	soap_default_wsa__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__ReferenceParametersType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__ReferenceParametersType(struct soap *soap, struct wsa__ReferenceParametersType *p)
{
	if (soap_read_wsa__ReferenceParametersType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa__ReferencePropertiesType_DEFINED
#define SOAP_TYPE_wsa__ReferencePropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa__ReferencePropertiesType(struct soap*, struct wsa__ReferencePropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa__ReferencePropertiesType(struct soap*, const struct wsa__ReferencePropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__ReferencePropertiesType(struct soap*, const char*, int, const struct wsa__ReferencePropertiesType *, const char*);
SOAP_FMAC3 struct wsa__ReferencePropertiesType * SOAP_FMAC4 soap_in_wsa__ReferencePropertiesType(struct soap*, const char*, struct wsa__ReferencePropertiesType *, const char*);
SOAP_FMAC1 struct wsa__ReferencePropertiesType * SOAP_FMAC2 SCAP_instantiate_wsa__ReferencePropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa__ReferencePropertiesType * soap_new_wsa__ReferencePropertiesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_wsa__ReferencePropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct wsa__ReferencePropertiesType * soap_new_req_wsa__ReferencePropertiesType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa__ReferencePropertiesType *_p = soap_new_wsa__ReferencePropertiesType(soap);
	if (_p)
	{	soap_default_wsa__ReferencePropertiesType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa__ReferencePropertiesType * soap_new_set_wsa__ReferencePropertiesType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa__ReferencePropertiesType *_p = soap_new_wsa__ReferencePropertiesType(soap);
	if (_p)
	{	soap_default_wsa__ReferencePropertiesType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__ReferencePropertiesType(struct soap*, const struct wsa__ReferencePropertiesType *, const char*, const char*);

inline int soap_write_wsa__ReferencePropertiesType(struct soap *soap, struct wsa__ReferencePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsa__ReferencePropertiesType(soap, p), 0) || soap_put_wsa__ReferencePropertiesType(soap, p, "wsa:ReferencePropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa__ReferencePropertiesType(struct soap *soap, const char *URL, struct wsa__ReferencePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsa__ReferencePropertiesType(soap, p), 0) || soap_put_wsa__ReferencePropertiesType(soap, p, "wsa:ReferencePropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__ReferencePropertiesType(struct soap *soap, const char *URL, struct wsa__ReferencePropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsa__ReferencePropertiesType(soap, p), 0) || soap_put_wsa__ReferencePropertiesType(soap, p, "wsa:ReferencePropertiesType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa__ReferencePropertiesType * SOAP_FMAC4 soap_get_wsa__ReferencePropertiesType(struct soap*, struct wsa__ReferencePropertiesType *, const char*, const char*);

inline int soap_read_wsa__ReferencePropertiesType(struct soap *soap, struct wsa__ReferencePropertiesType *p)
{
	if (p)
	{	soap_default_wsa__ReferencePropertiesType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa__ReferencePropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__ReferencePropertiesType(struct soap *soap, const char *URL, struct wsa__ReferencePropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__ReferencePropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__ReferencePropertiesType(struct soap *soap, struct wsa__ReferencePropertiesType *p)
{
	if (soap_read_wsa__ReferencePropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsa__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa__EndpointReferenceType(struct soap*, struct wsa__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa__EndpointReferenceType(struct soap*, const struct wsa__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__EndpointReferenceType(struct soap*, const char*, int, const struct wsa__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa__EndpointReferenceType(struct soap*, const char*, struct wsa__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa__EndpointReferenceType * SOAP_FMAC2 SCAP_instantiate_wsa__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa__EndpointReferenceType * soap_new_wsa__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_wsa__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa__EndpointReferenceType * soap_new_req_wsa__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa__EndpointReferenceType *_p = soap_new_wsa__EndpointReferenceType(soap);
	if (_p)
	{	soap_default_wsa__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa__EndpointReferenceType * soap_new_set_wsa__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa__ReferencePropertiesType *ReferenceProperties,
	struct wsa__ReferenceParametersType *ReferenceParameters,
	char **PortType,
	struct wsa__ServiceNameType *ServiceName,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa__EndpointReferenceType *_p = soap_new_wsa__EndpointReferenceType(soap);
	if (_p)
	{	soap_default_wsa__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceProperties = ReferenceProperties;
		_p->ReferenceParameters = ReferenceParameters;
		_p->PortType = PortType;
		_p->ServiceName = ServiceName;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa__EndpointReferenceType(struct soap*, const struct wsa__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa__EndpointReferenceType(struct soap *soap, struct wsa__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsa__EndpointReferenceType(soap, p), 0) || soap_put_wsa__EndpointReferenceType(soap, p, "wsa:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsa__EndpointReferenceType(soap, p), 0) || soap_put_wsa__EndpointReferenceType(soap, p, "wsa:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsa__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsa__EndpointReferenceType(soap, p), 0) || soap_put_wsa__EndpointReferenceType(soap, p, "wsa:EndpointReferenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa__EndpointReferenceType(struct soap*, struct wsa__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa__EndpointReferenceType(struct soap *soap, struct wsa__EndpointReferenceType *p)
{
	if (p)
	{	soap_default_wsa__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsa__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsa__EndpointReferenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsa__EndpointReferenceType(struct soap *soap, struct wsa__EndpointReferenceType *p)
{
	if (soap_read_wsa__EndpointReferenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns5__union_ObjectType_DEFINED
#define SOAP_TYPE__ns5__union_ObjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns5__union_ObjectType(struct soap*, int, const union _ns5__union_ObjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__union_ObjectType(struct soap*, int, const union _ns5__union_ObjectType *);
SOAP_FMAC3 union _ns5__union_ObjectType * SOAP_FMAC4 soap_in__ns5__union_ObjectType(struct soap*, int*, union _ns5__union_ObjectType *);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SignatureRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SignatureRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SignatureRequest(struct soap*, const char *, int, _ns1__SignatureRequest *const*, const char *);
SOAP_FMAC3 _ns1__SignatureRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__SignatureRequest(struct soap*, const char*, _ns1__SignatureRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SignatureRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__SignatureRequest(struct soap*, _ns1__SignatureRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AuthorizationRequest_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AuthorizationRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AuthorizationRequest(struct soap*, const char *, int, _ns1__AuthorizationRequest *const*, const char *);
SOAP_FMAC3 _ns1__AuthorizationRequest ** SOAP_FMAC4 soap_in_PointerTo_ns1__AuthorizationRequest(struct soap*, const char*, _ns1__AuthorizationRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AuthorizationRequest ** SOAP_FMAC4 soap_get_PointerTo_ns1__AuthorizationRequest(struct soap*, _ns1__AuthorizationRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AttributeRequestType_DEFINED
#define SOAP_TYPE_PointerTons2__AttributeRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AttributeRequestType(struct soap*, ns2__AttributeRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AttributeRequestType(struct soap*, const char *, int, ns2__AttributeRequestType *const*, const char *);
SOAP_FMAC3 ns2__AttributeRequestType ** SOAP_FMAC4 soap_in_PointerTons2__AttributeRequestType(struct soap*, const char*, ns2__AttributeRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AttributeRequestType(struct soap*, ns2__AttributeRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns2__AttributeRequestType ** SOAP_FMAC4 soap_get_PointerTons2__AttributeRequestType(struct soap*, ns2__AttributeRequestType **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_wsa__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa__FaultTo(struct soap*, struct wsa__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa__FaultTo(struct soap*, const char *, int, struct wsa__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa__FaultTo(struct soap*, const char*, struct wsa__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa__FaultTo(struct soap*, struct wsa__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa__FaultTo(struct soap*, struct wsa__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa__ReplyTo(struct soap*, struct wsa__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa__ReplyTo(struct soap*, const char *, int, struct wsa__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa__ReplyTo(struct soap*, const char*, struct wsa__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa__ReplyTo(struct soap*, struct wsa__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa__ReplyTo(struct soap*, struct wsa__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa__From(struct soap*, struct wsa__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa__From(struct soap*, const char *, int, struct wsa__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa__From(struct soap*, const char*, struct wsa__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa__From(struct soap*, struct wsa__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa__From(struct soap*, struct wsa__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa__RelatesTo(struct soap*, struct wsa__Relationship *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa__RelatesTo(struct soap*, const char *, int, struct wsa__Relationship *const*, const char *);
SOAP_FMAC3 struct wsa__Relationship ** SOAP_FMAC4 soap_in_PointerTo_wsa__RelatesTo(struct soap*, const char*, struct wsa__Relationship **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa__RelatesTo(struct soap*, struct wsa__Relationship *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__Relationship ** SOAP_FMAC4 soap_get_PointerTo_wsa__RelatesTo(struct soap*, struct wsa__Relationship **, const char*, const char*);
#endif
/* _wsa__Action is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa__Action_DEFINED
#define SOAP_TYPE__wsa__Action_DEFINED

#define soap_default__wsa__Action soap_default_string


#define soap_serialize__wsa__Action soap_serialize_string


#define soap__wsa__Action2s(soap, a) (a)

#define soap_out__wsa__Action soap_out_string


#define soap_s2_wsa__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa__Action soap_in_string


#define SCAP_instantiate__wsa__Action SCAP_instantiate_string


#define soap_new__wsa__Action soap_new_string


#define soap_put__wsa__Action soap_put_string


#define soap_write__wsa__Action soap_write_string


#define soap_PUT__wsa__Action soap_PUT_string


#define soap_POST_send__wsa__Action soap_POST_send_string


#define soap_get__wsa__Action soap_get_string


#define soap_read__wsa__Action soap_read_string


#define soap_GET__wsa__Action soap_GET_string


#define soap_POST_recv__wsa__Action soap_POST_recv_string

#endif
/* _wsa__To is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa__To_DEFINED
#define SOAP_TYPE__wsa__To_DEFINED

#define soap_default__wsa__To soap_default_string


#define soap_serialize__wsa__To soap_serialize_string


#define soap__wsa__To2s(soap, a) (a)

#define soap_out__wsa__To soap_out_string


#define soap_s2_wsa__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa__To soap_in_string


#define SCAP_instantiate__wsa__To SCAP_instantiate_string


#define soap_new__wsa__To soap_new_string


#define soap_put__wsa__To soap_put_string


#define soap_write__wsa__To soap_write_string


#define soap_PUT__wsa__To soap_PUT_string


#define soap_POST_send__wsa__To soap_POST_send_string


#define soap_get__wsa__To soap_get_string


#define soap_read__wsa__To soap_read_string


#define soap_GET__wsa__To soap_GET_string


#define soap_POST_recv__wsa__To soap_POST_recv_string

#endif
/* _wsa__MessageID is a typedef synonym for string */

#ifndef SOAP_TYPE__wsa__MessageID_DEFINED
#define SOAP_TYPE__wsa__MessageID_DEFINED

#define soap_default__wsa__MessageID soap_default_string


#define soap_serialize__wsa__MessageID soap_serialize_string


#define soap__wsa__MessageID2s(soap, a) (a)

#define soap_out__wsa__MessageID soap_out_string


#define soap_s2_wsa__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa__MessageID soap_in_string


#define SCAP_instantiate__wsa__MessageID SCAP_instantiate_string


#define soap_new__wsa__MessageID soap_new_string


#define soap_put__wsa__MessageID soap_put_string


#define soap_write__wsa__MessageID soap_write_string


#define soap_PUT__wsa__MessageID soap_PUT_string


#define soap_POST_send__wsa__MessageID soap_POST_send_string


#define soap_get__wsa__MessageID soap_get_string


#define soap_read__wsa__MessageID soap_read_string


#define soap_GET__wsa__MessageID soap_GET_string


#define soap_POST_recv__wsa__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa__ServiceNameType_DEFINED
#define SOAP_TYPE_PointerTowsa__ServiceNameType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa__ServiceNameType(struct soap*, struct wsa__ServiceNameType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa__ServiceNameType(struct soap*, const char *, int, struct wsa__ServiceNameType *const*, const char *);
SOAP_FMAC3 struct wsa__ServiceNameType ** SOAP_FMAC4 soap_in_PointerTowsa__ServiceNameType(struct soap*, const char*, struct wsa__ServiceNameType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa__ServiceNameType(struct soap*, struct wsa__ServiceNameType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__ServiceNameType ** SOAP_FMAC4 soap_get_PointerTowsa__ServiceNameType(struct soap*, struct wsa__ServiceNameType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_QName_DEFINED
#define SOAP_TYPE_PointerTo_QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_QName(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_QName(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTo_QName(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_QName(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTo_QName(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa__ReferenceParametersType(struct soap*, struct wsa__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa__ReferenceParametersType(struct soap*, const char *, int, struct wsa__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa__ReferenceParametersType(struct soap*, const char*, struct wsa__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa__ReferenceParametersType(struct soap*, struct wsa__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa__ReferenceParametersType(struct soap*, struct wsa__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa__ReferencePropertiesType_DEFINED
#define SOAP_TYPE_PointerTowsa__ReferencePropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa__ReferencePropertiesType(struct soap*, struct wsa__ReferencePropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa__ReferencePropertiesType(struct soap*, const char *, int, struct wsa__ReferencePropertiesType *const*, const char *);
SOAP_FMAC3 struct wsa__ReferencePropertiesType ** SOAP_FMAC4 soap_in_PointerTowsa__ReferencePropertiesType(struct soap*, const char*, struct wsa__ReferencePropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa__ReferencePropertiesType(struct soap*, struct wsa__ReferencePropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa__ReferencePropertiesType ** SOAP_FMAC4 soap_get_PointerTowsa__ReferencePropertiesType(struct soap*, struct wsa__ReferencePropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__ID_DEFINED
#define SOAP_TYPE_PointerToxsd__ID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__ID(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__ID(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__ID(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__ID(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__ID(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionTypeList(struct soap*, ns1__TransactionTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionTypeList(struct soap*, const char *, int, ns1__TransactionTypeList *const*, const char *);
SOAP_FMAC3 ns1__TransactionTypeList ** SOAP_FMAC4 soap_in_PointerTons1__TransactionTypeList(struct soap*, const char*, ns1__TransactionTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionTypeList(struct soap*, ns1__TransactionTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionTypeList ** SOAP_FMAC4 soap_get_PointerTons1__TransactionTypeList(struct soap*, ns1__TransactionTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Status_DEFINED
#define SOAP_TYPE_PointerTons1__Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Status(struct soap*, ns1__Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Status(struct soap*, const char *, int, ns1__Status *const*, const char *);
SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_in_PointerTons1__Status(struct soap*, const char*, ns1__Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Status(struct soap*, ns1__Status *const*, const char*, const char*);
SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_get_PointerTons1__Status(struct soap*, ns1__Status **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AttributeListType_DEFINED
#define SOAP_TYPE_PointerTons1__AttributeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AttributeListType(struct soap*, ns1__AttributeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AttributeListType(struct soap*, const char *, int, ns1__AttributeListType *const*, const char *);
SOAP_FMAC3 ns1__AttributeListType ** SOAP_FMAC4 soap_in_PointerTons1__AttributeListType(struct soap*, const char*, ns1__AttributeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AttributeListType(struct soap*, ns1__AttributeListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AttributeListType ** SOAP_FMAC4 soap_get_PointerTons1__AttributeListType(struct soap*, ns1__AttributeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PersonalData_DEFINED
#define SOAP_TYPE_PointerTons1__PersonalData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PersonalData(struct soap*, ns1__PersonalData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PersonalData(struct soap*, const char *, int, ns1__PersonalData *const*, const char *);
SOAP_FMAC3 ns1__PersonalData ** SOAP_FMAC4 soap_in_PointerTons1__PersonalData(struct soap*, const char*, ns1__PersonalData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PersonalData(struct soap*, ns1__PersonalData *const*, const char*, const char*);
SOAP_FMAC3 ns1__PersonalData ** SOAP_FMAC4 soap_get_PointerTons1__PersonalData(struct soap*, ns1__PersonalData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionType_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionType(struct soap*, ns1__TransactionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionType(struct soap*, const char *, int, ns1__TransactionType *const*, const char *);
SOAP_FMAC3 ns1__TransactionType ** SOAP_FMAC4 soap_in_PointerTons1__TransactionType(struct soap*, const char*, ns1__TransactionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionType(struct soap*, ns1__TransactionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionType ** SOAP_FMAC4 soap_get_PointerTons1__TransactionType(struct soap*, ns1__TransactionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubAttributeType_DEFINED
#define SOAP_TYPE_PointerTons1__SubAttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubAttributeType(struct soap*, ns1__SubAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubAttributeType(struct soap*, const char *, int, ns1__SubAttributeType *const*, const char *);
SOAP_FMAC3 ns1__SubAttributeType ** SOAP_FMAC4 soap_in_PointerTons1__SubAttributeType(struct soap*, const char*, ns1__SubAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubAttributeType(struct soap*, ns1__SubAttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubAttributeType ** SOAP_FMAC4 soap_get_PointerTons1__SubAttributeType(struct soap*, ns1__SubAttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubAttributeListType_DEFINED
#define SOAP_TYPE_PointerTons1__SubAttributeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubAttributeListType(struct soap*, ns1__SubAttributeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubAttributeListType(struct soap*, const char *, int, ns1__SubAttributeListType *const*, const char *);
SOAP_FMAC3 ns1__SubAttributeListType ** SOAP_FMAC4 soap_in_PointerTons1__SubAttributeListType(struct soap*, const char*, ns1__SubAttributeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubAttributeListType(struct soap*, ns1__SubAttributeListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubAttributeListType ** SOAP_FMAC4 soap_get_PointerTons1__SubAttributeListType(struct soap*, ns1__SubAttributeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LegalActListType_DEFINED
#define SOAP_TYPE_PointerTons1__LegalActListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LegalActListType(struct soap*, ns1__LegalActListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LegalActListType(struct soap*, const char *, int, ns1__LegalActListType *const*, const char *);
SOAP_FMAC3 ns1__LegalActListType ** SOAP_FMAC4 soap_in_PointerTons1__LegalActListType(struct soap*, const char*, ns1__LegalActListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LegalActListType(struct soap*, ns1__LegalActListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LegalActListType ** SOAP_FMAC4 soap_get_PointerTons1__LegalActListType(struct soap*, ns1__LegalActListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MainAttributeType_DEFINED
#define SOAP_TYPE_PointerTons1__MainAttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MainAttributeType(struct soap*, ns1__MainAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MainAttributeType(struct soap*, const char *, int, ns1__MainAttributeType *const*, const char *);
SOAP_FMAC3 ns1__MainAttributeType ** SOAP_FMAC4 soap_in_PointerTons1__MainAttributeType(struct soap*, const char*, ns1__MainAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MainAttributeType(struct soap*, ns1__MainAttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MainAttributeType ** SOAP_FMAC4 soap_get_PointerTons1__MainAttributeType(struct soap*, ns1__MainAttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AttributeSupplierType_DEFINED
#define SOAP_TYPE_PointerTons1__AttributeSupplierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AttributeSupplierType(struct soap*, ns1__AttributeSupplierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AttributeSupplierType(struct soap*, const char *, int, ns1__AttributeSupplierType *const*, const char *);
SOAP_FMAC3 ns1__AttributeSupplierType ** SOAP_FMAC4 soap_in_PointerTons1__AttributeSupplierType(struct soap*, const char*, ns1__AttributeSupplierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AttributeSupplierType(struct soap*, ns1__AttributeSupplierType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AttributeSupplierType ** SOAP_FMAC4 soap_get_PointerTons1__AttributeSupplierType(struct soap*, ns1__AttributeSupplierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AttributeType_DEFINED
#define SOAP_TYPE_PointerTons1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AttributeType(struct soap*, ns1__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AttributeType(struct soap*, const char *, int, ns1__AttributeType *const*, const char *);
SOAP_FMAC3 ns1__AttributeType ** SOAP_FMAC4 soap_in_PointerTons1__AttributeType(struct soap*, const char*, ns1__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AttributeType(struct soap*, ns1__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AttributeType ** SOAP_FMAC4 soap_get_PointerTons1__AttributeType(struct soap*, ns1__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__EncapsulatedOCSPValueType_DEFINED
#define SOAP_TYPE_PointerTons6__EncapsulatedOCSPValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__EncapsulatedOCSPValueType(struct soap*, ns6__EncapsulatedOCSPValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__EncapsulatedOCSPValueType(struct soap*, const char *, int, ns6__EncapsulatedOCSPValueType *const*, const char *);
SOAP_FMAC3 ns6__EncapsulatedOCSPValueType ** SOAP_FMAC4 soap_in_PointerTons6__EncapsulatedOCSPValueType(struct soap*, const char*, ns6__EncapsulatedOCSPValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__EncapsulatedOCSPValueType(struct soap*, ns6__EncapsulatedOCSPValueType *const*, const char*, const char*);
SOAP_FMAC3 ns6__EncapsulatedOCSPValueType ** SOAP_FMAC4 soap_get_PointerTons6__EncapsulatedOCSPValueType(struct soap*, ns6__EncapsulatedOCSPValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__EncapsulatedCRLValueType_DEFINED
#define SOAP_TYPE_PointerTons6__EncapsulatedCRLValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__EncapsulatedCRLValueType(struct soap*, ns6__EncapsulatedCRLValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__EncapsulatedCRLValueType(struct soap*, const char *, int, ns6__EncapsulatedCRLValueType *const*, const char *);
SOAP_FMAC3 ns6__EncapsulatedCRLValueType ** SOAP_FMAC4 soap_in_PointerTons6__EncapsulatedCRLValueType(struct soap*, const char*, ns6__EncapsulatedCRLValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__EncapsulatedCRLValueType(struct soap*, ns6__EncapsulatedCRLValueType *const*, const char*, const char*);
SOAP_FMAC3 ns6__EncapsulatedCRLValueType ** SOAP_FMAC4 soap_get_PointerTons6__EncapsulatedCRLValueType(struct soap*, ns6__EncapsulatedCRLValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__OCSPValuesType_DEFINED
#define SOAP_TYPE_PointerTons6__OCSPValuesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__OCSPValuesType(struct soap*, ns6__OCSPValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__OCSPValuesType(struct soap*, const char *, int, ns6__OCSPValuesType *const*, const char *);
SOAP_FMAC3 ns6__OCSPValuesType ** SOAP_FMAC4 soap_in_PointerTons6__OCSPValuesType(struct soap*, const char*, ns6__OCSPValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__OCSPValuesType(struct soap*, ns6__OCSPValuesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__OCSPValuesType ** SOAP_FMAC4 soap_get_PointerTons6__OCSPValuesType(struct soap*, ns6__OCSPValuesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CRLValuesType_DEFINED
#define SOAP_TYPE_PointerTons6__CRLValuesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CRLValuesType(struct soap*, ns6__CRLValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CRLValuesType(struct soap*, const char *, int, ns6__CRLValuesType *const*, const char *);
SOAP_FMAC3 ns6__CRLValuesType ** SOAP_FMAC4 soap_in_PointerTons6__CRLValuesType(struct soap*, const char*, ns6__CRLValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CRLValuesType(struct soap*, ns6__CRLValuesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CRLValuesType ** SOAP_FMAC4 soap_get_PointerTons6__CRLValuesType(struct soap*, ns6__CRLValuesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__EncapsulatedX509CertificateType_DEFINED
#define SOAP_TYPE_PointerTons6__EncapsulatedX509CertificateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__EncapsulatedX509CertificateType(struct soap*, ns6__EncapsulatedX509CertificateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__EncapsulatedX509CertificateType(struct soap*, const char *, int, ns6__EncapsulatedX509CertificateType *const*, const char *);
SOAP_FMAC3 ns6__EncapsulatedX509CertificateType ** SOAP_FMAC4 soap_in_PointerTons6__EncapsulatedX509CertificateType(struct soap*, const char*, ns6__EncapsulatedX509CertificateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__EncapsulatedX509CertificateType(struct soap*, ns6__EncapsulatedX509CertificateType *const*, const char*, const char*);
SOAP_FMAC3 ns6__EncapsulatedX509CertificateType ** SOAP_FMAC4 soap_get_PointerTons6__EncapsulatedX509CertificateType(struct soap*, ns6__EncapsulatedX509CertificateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__ResponderIDType_DEFINED
#define SOAP_TYPE_PointerTons6__ResponderIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ResponderIDType(struct soap*, ns6__ResponderIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ResponderIDType(struct soap*, const char *, int, ns6__ResponderIDType *const*, const char *);
SOAP_FMAC3 ns6__ResponderIDType ** SOAP_FMAC4 soap_in_PointerTons6__ResponderIDType(struct soap*, const char*, ns6__ResponderIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ResponderIDType(struct soap*, ns6__ResponderIDType *const*, const char*, const char*);
SOAP_FMAC3 ns6__ResponderIDType ** SOAP_FMAC4 soap_get_PointerTons6__ResponderIDType(struct soap*, ns6__ResponderIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__OCSPIdentifierType_DEFINED
#define SOAP_TYPE_PointerTons6__OCSPIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__OCSPIdentifierType(struct soap*, ns6__OCSPIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__OCSPIdentifierType(struct soap*, const char *, int, ns6__OCSPIdentifierType *const*, const char *);
SOAP_FMAC3 ns6__OCSPIdentifierType ** SOAP_FMAC4 soap_in_PointerTons6__OCSPIdentifierType(struct soap*, const char*, ns6__OCSPIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__OCSPIdentifierType(struct soap*, ns6__OCSPIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 ns6__OCSPIdentifierType ** SOAP_FMAC4 soap_get_PointerTons6__OCSPIdentifierType(struct soap*, ns6__OCSPIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__OCSPRefType_DEFINED
#define SOAP_TYPE_PointerTons6__OCSPRefType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__OCSPRefType(struct soap*, ns6__OCSPRefType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__OCSPRefType(struct soap*, const char *, int, ns6__OCSPRefType *const*, const char *);
SOAP_FMAC3 ns6__OCSPRefType ** SOAP_FMAC4 soap_in_PointerTons6__OCSPRefType(struct soap*, const char*, ns6__OCSPRefType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__OCSPRefType(struct soap*, ns6__OCSPRefType *const*, const char*, const char*);
SOAP_FMAC3 ns6__OCSPRefType ** SOAP_FMAC4 soap_get_PointerTons6__OCSPRefType(struct soap*, ns6__OCSPRefType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CRLIdentifierType_DEFINED
#define SOAP_TYPE_PointerTons6__CRLIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CRLIdentifierType(struct soap*, ns6__CRLIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CRLIdentifierType(struct soap*, const char *, int, ns6__CRLIdentifierType *const*, const char *);
SOAP_FMAC3 ns6__CRLIdentifierType ** SOAP_FMAC4 soap_in_PointerTons6__CRLIdentifierType(struct soap*, const char*, ns6__CRLIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CRLIdentifierType(struct soap*, ns6__CRLIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CRLIdentifierType ** SOAP_FMAC4 soap_get_PointerTons6__CRLIdentifierType(struct soap*, ns6__CRLIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__DigestAlgAndValueType_DEFINED
#define SOAP_TYPE_PointerTons6__DigestAlgAndValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__DigestAlgAndValueType(struct soap*, ns6__DigestAlgAndValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__DigestAlgAndValueType(struct soap*, const char *, int, ns6__DigestAlgAndValueType *const*, const char *);
SOAP_FMAC3 ns6__DigestAlgAndValueType ** SOAP_FMAC4 soap_in_PointerTons6__DigestAlgAndValueType(struct soap*, const char*, ns6__DigestAlgAndValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__DigestAlgAndValueType(struct soap*, ns6__DigestAlgAndValueType *const*, const char*, const char*);
SOAP_FMAC3 ns6__DigestAlgAndValueType ** SOAP_FMAC4 soap_get_PointerTons6__DigestAlgAndValueType(struct soap*, ns6__DigestAlgAndValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CRLRefType_DEFINED
#define SOAP_TYPE_PointerTons6__CRLRefType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CRLRefType(struct soap*, ns6__CRLRefType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CRLRefType(struct soap*, const char *, int, ns6__CRLRefType *const*, const char *);
SOAP_FMAC3 ns6__CRLRefType ** SOAP_FMAC4 soap_in_PointerTons6__CRLRefType(struct soap*, const char*, ns6__CRLRefType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CRLRefType(struct soap*, ns6__CRLRefType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CRLRefType ** SOAP_FMAC4 soap_get_PointerTons6__CRLRefType(struct soap*, ns6__CRLRefType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__OCSPRefsType_DEFINED
#define SOAP_TYPE_PointerTons6__OCSPRefsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__OCSPRefsType(struct soap*, ns6__OCSPRefsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__OCSPRefsType(struct soap*, const char *, int, ns6__OCSPRefsType *const*, const char *);
SOAP_FMAC3 ns6__OCSPRefsType ** SOAP_FMAC4 soap_in_PointerTons6__OCSPRefsType(struct soap*, const char*, ns6__OCSPRefsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__OCSPRefsType(struct soap*, ns6__OCSPRefsType *const*, const char*, const char*);
SOAP_FMAC3 ns6__OCSPRefsType ** SOAP_FMAC4 soap_get_PointerTons6__OCSPRefsType(struct soap*, ns6__OCSPRefsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CRLRefsType_DEFINED
#define SOAP_TYPE_PointerTons6__CRLRefsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CRLRefsType(struct soap*, ns6__CRLRefsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CRLRefsType(struct soap*, const char *, int, ns6__CRLRefsType *const*, const char *);
SOAP_FMAC3 ns6__CRLRefsType ** SOAP_FMAC4 soap_in_PointerTons6__CRLRefsType(struct soap*, const char*, ns6__CRLRefsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CRLRefsType(struct soap*, ns6__CRLRefsType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CRLRefsType ** SOAP_FMAC4 soap_get_PointerTons6__CRLRefsType(struct soap*, ns6__CRLRefsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CertRefsType_DEFINED
#define SOAP_TYPE_PointerTons6__CertRefsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CertRefsType(struct soap*, ns6__CertRefsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CertRefsType(struct soap*, const char *, int, ns6__CertRefsType *const*, const char *);
SOAP_FMAC3 ns6__CertRefsType ** SOAP_FMAC4 soap_in_PointerTons6__CertRefsType(struct soap*, const char*, ns6__CertRefsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CertRefsType(struct soap*, ns6__CertRefsType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CertRefsType ** SOAP_FMAC4 soap_get_PointerTons6__CertRefsType(struct soap*, ns6__CertRefsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__ArchiveTimeStampType_DEFINED
#define SOAP_TYPE_PointerTons6__ArchiveTimeStampType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ArchiveTimeStampType(struct soap*, ns6__ArchiveTimeStampType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ArchiveTimeStampType(struct soap*, const char *, int, ns6__ArchiveTimeStampType *const*, const char *);
SOAP_FMAC3 ns6__ArchiveTimeStampType ** SOAP_FMAC4 soap_in_PointerTons6__ArchiveTimeStampType(struct soap*, const char*, ns6__ArchiveTimeStampType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ArchiveTimeStampType(struct soap*, ns6__ArchiveTimeStampType *const*, const char*, const char*);
SOAP_FMAC3 ns6__ArchiveTimeStampType ** SOAP_FMAC4 soap_get_PointerTons6__ArchiveTimeStampType(struct soap*, ns6__ArchiveTimeStampType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__RevocationValuesType_DEFINED
#define SOAP_TYPE_PointerTons6__RevocationValuesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__RevocationValuesType(struct soap*, ns6__RevocationValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__RevocationValuesType(struct soap*, const char *, int, ns6__RevocationValuesType *const*, const char *);
SOAP_FMAC3 ns6__RevocationValuesType ** SOAP_FMAC4 soap_in_PointerTons6__RevocationValuesType(struct soap*, const char*, ns6__RevocationValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__RevocationValuesType(struct soap*, ns6__RevocationValuesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__RevocationValuesType ** SOAP_FMAC4 soap_get_PointerTons6__RevocationValuesType(struct soap*, ns6__RevocationValuesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CertificateValuesType_DEFINED
#define SOAP_TYPE_PointerTons6__CertificateValuesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CertificateValuesType(struct soap*, ns6__CertificateValuesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CertificateValuesType(struct soap*, const char *, int, ns6__CertificateValuesType *const*, const char *);
SOAP_FMAC3 ns6__CertificateValuesType ** SOAP_FMAC4 soap_in_PointerTons6__CertificateValuesType(struct soap*, const char*, ns6__CertificateValuesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CertificateValuesType(struct soap*, ns6__CertificateValuesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CertificateValuesType ** SOAP_FMAC4 soap_get_PointerTons6__CertificateValuesType(struct soap*, ns6__CertificateValuesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__SigAndRefsTimeStampType_DEFINED
#define SOAP_TYPE_PointerTons6__SigAndRefsTimeStampType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__SigAndRefsTimeStampType(struct soap*, ns6__SigAndRefsTimeStampType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__SigAndRefsTimeStampType(struct soap*, const char *, int, ns6__SigAndRefsTimeStampType *const*, const char *);
SOAP_FMAC3 ns6__SigAndRefsTimeStampType ** SOAP_FMAC4 soap_in_PointerTons6__SigAndRefsTimeStampType(struct soap*, const char*, ns6__SigAndRefsTimeStampType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__SigAndRefsTimeStampType(struct soap*, ns6__SigAndRefsTimeStampType *const*, const char*, const char*);
SOAP_FMAC3 ns6__SigAndRefsTimeStampType ** SOAP_FMAC4 soap_get_PointerTons6__SigAndRefsTimeStampType(struct soap*, ns6__SigAndRefsTimeStampType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CompleteRevocationRefsType_DEFINED
#define SOAP_TYPE_PointerTons6__CompleteRevocationRefsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CompleteRevocationRefsType(struct soap*, ns6__CompleteRevocationRefsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CompleteRevocationRefsType(struct soap*, const char *, int, ns6__CompleteRevocationRefsType *const*, const char *);
SOAP_FMAC3 ns6__CompleteRevocationRefsType ** SOAP_FMAC4 soap_in_PointerTons6__CompleteRevocationRefsType(struct soap*, const char*, ns6__CompleteRevocationRefsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CompleteRevocationRefsType(struct soap*, ns6__CompleteRevocationRefsType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CompleteRevocationRefsType ** SOAP_FMAC4 soap_get_PointerTons6__CompleteRevocationRefsType(struct soap*, ns6__CompleteRevocationRefsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CompleteCertificateRefsType_DEFINED
#define SOAP_TYPE_PointerTons6__CompleteCertificateRefsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CompleteCertificateRefsType(struct soap*, ns6__CompleteCertificateRefsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CompleteCertificateRefsType(struct soap*, const char *, int, ns6__CompleteCertificateRefsType *const*, const char *);
SOAP_FMAC3 ns6__CompleteCertificateRefsType ** SOAP_FMAC4 soap_in_PointerTons6__CompleteCertificateRefsType(struct soap*, const char*, ns6__CompleteCertificateRefsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CompleteCertificateRefsType(struct soap*, ns6__CompleteCertificateRefsType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CompleteCertificateRefsType ** SOAP_FMAC4 soap_get_PointerTons6__CompleteCertificateRefsType(struct soap*, ns6__CompleteCertificateRefsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__SignatureTimeStampType_DEFINED
#define SOAP_TYPE_PointerTons6__SignatureTimeStampType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__SignatureTimeStampType(struct soap*, ns6__SignatureTimeStampType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__SignatureTimeStampType(struct soap*, const char *, int, ns6__SignatureTimeStampType *const*, const char *);
SOAP_FMAC3 ns6__SignatureTimeStampType ** SOAP_FMAC4 soap_in_PointerTons6__SignatureTimeStampType(struct soap*, const char*, ns6__SignatureTimeStampType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__SignatureTimeStampType(struct soap*, ns6__SignatureTimeStampType *const*, const char*, const char*);
SOAP_FMAC3 ns6__SignatureTimeStampType ** SOAP_FMAC4 soap_get_PointerTons6__SignatureTimeStampType(struct soap*, ns6__SignatureTimeStampType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CounterSignatureType_DEFINED
#define SOAP_TYPE_PointerTons6__CounterSignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CounterSignatureType(struct soap*, ns6__CounterSignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CounterSignatureType(struct soap*, const char *, int, ns6__CounterSignatureType *const*, const char *);
SOAP_FMAC3 ns6__CounterSignatureType ** SOAP_FMAC4 soap_in_PointerTons6__CounterSignatureType(struct soap*, const char*, ns6__CounterSignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CounterSignatureType(struct soap*, ns6__CounterSignatureType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CounterSignatureType ** SOAP_FMAC4 soap_get_PointerTons6__CounterSignatureType(struct soap*, ns6__CounterSignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__UnsignedSignaturePropertiesType_DEFINED
#define SOAP_TYPE_PointerTons6__UnsignedSignaturePropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__UnsignedSignaturePropertiesType(struct soap*, ns6__UnsignedSignaturePropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__UnsignedSignaturePropertiesType(struct soap*, const char *, int, ns6__UnsignedSignaturePropertiesType *const*, const char *);
SOAP_FMAC3 ns6__UnsignedSignaturePropertiesType ** SOAP_FMAC4 soap_in_PointerTons6__UnsignedSignaturePropertiesType(struct soap*, const char*, ns6__UnsignedSignaturePropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__UnsignedSignaturePropertiesType(struct soap*, ns6__UnsignedSignaturePropertiesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__UnsignedSignaturePropertiesType ** SOAP_FMAC4 soap_get_PointerTons6__UnsignedSignaturePropertiesType(struct soap*, ns6__UnsignedSignaturePropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__ClaimedRoleType_DEFINED
#define SOAP_TYPE_PointerTons6__ClaimedRoleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ClaimedRoleType(struct soap*, ns6__ClaimedRoleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ClaimedRoleType(struct soap*, const char *, int, ns6__ClaimedRoleType *const*, const char *);
SOAP_FMAC3 ns6__ClaimedRoleType ** SOAP_FMAC4 soap_in_PointerTons6__ClaimedRoleType(struct soap*, const char*, ns6__ClaimedRoleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ClaimedRoleType(struct soap*, ns6__ClaimedRoleType *const*, const char*, const char*);
SOAP_FMAC3 ns6__ClaimedRoleType ** SOAP_FMAC4 soap_get_PointerTons6__ClaimedRoleType(struct soap*, ns6__ClaimedRoleType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__ClaimedRolesListType_DEFINED
#define SOAP_TYPE_PointerTons6__ClaimedRolesListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ClaimedRolesListType(struct soap*, ns6__ClaimedRolesListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ClaimedRolesListType(struct soap*, const char *, int, ns6__ClaimedRolesListType *const*, const char *);
SOAP_FMAC3 ns6__ClaimedRolesListType ** SOAP_FMAC4 soap_in_PointerTons6__ClaimedRolesListType(struct soap*, const char*, ns6__ClaimedRolesListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ClaimedRolesListType(struct soap*, ns6__ClaimedRolesListType *const*, const char*, const char*);
SOAP_FMAC3 ns6__ClaimedRolesListType ** SOAP_FMAC4 soap_get_PointerTons6__ClaimedRolesListType(struct soap*, ns6__ClaimedRolesListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__IssuerSerialType_DEFINED
#define SOAP_TYPE_PointerTons6__IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__IssuerSerialType(struct soap*, ns6__IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__IssuerSerialType(struct soap*, const char *, int, ns6__IssuerSerialType *const*, const char *);
SOAP_FMAC3 ns6__IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTons6__IssuerSerialType(struct soap*, const char*, ns6__IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__IssuerSerialType(struct soap*, ns6__IssuerSerialType *const*, const char*, const char*);
SOAP_FMAC3 ns6__IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTons6__IssuerSerialType(struct soap*, ns6__IssuerSerialType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CertDigestType_DEFINED
#define SOAP_TYPE_PointerTons6__CertDigestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CertDigestType(struct soap*, ns6__CertDigestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CertDigestType(struct soap*, const char *, int, ns6__CertDigestType *const*, const char *);
SOAP_FMAC3 ns6__CertDigestType ** SOAP_FMAC4 soap_in_PointerTons6__CertDigestType(struct soap*, const char*, ns6__CertDigestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CertDigestType(struct soap*, ns6__CertDigestType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CertDigestType ** SOAP_FMAC4 soap_get_PointerTons6__CertDigestType(struct soap*, ns6__CertDigestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__CertType_DEFINED
#define SOAP_TYPE_PointerTons6__CertType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__CertType(struct soap*, ns6__CertType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__CertType(struct soap*, const char *, int, ns6__CertType *const*, const char *);
SOAP_FMAC3 ns6__CertType ** SOAP_FMAC4 soap_in_PointerTons6__CertType(struct soap*, const char*, ns6__CertType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__CertType(struct soap*, ns6__CertType *const*, const char*, const char*);
SOAP_FMAC3 ns6__CertType ** SOAP_FMAC4 soap_get_PointerTons6__CertType(struct soap*, ns6__CertType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__SignerRoleType_DEFINED
#define SOAP_TYPE_PointerTons6__SignerRoleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__SignerRoleType(struct soap*, ns6__SignerRoleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__SignerRoleType(struct soap*, const char *, int, ns6__SignerRoleType *const*, const char *);
SOAP_FMAC3 ns6__SignerRoleType ** SOAP_FMAC4 soap_in_PointerTons6__SignerRoleType(struct soap*, const char*, ns6__SignerRoleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__SignerRoleType(struct soap*, ns6__SignerRoleType *const*, const char*, const char*);
SOAP_FMAC3 ns6__SignerRoleType ** SOAP_FMAC4 soap_get_PointerTons6__SignerRoleType(struct soap*, ns6__SignerRoleType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__SigningCertificateType_DEFINED
#define SOAP_TYPE_PointerTons6__SigningCertificateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__SigningCertificateType(struct soap*, ns6__SigningCertificateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__SigningCertificateType(struct soap*, const char *, int, ns6__SigningCertificateType *const*, const char *);
SOAP_FMAC3 ns6__SigningCertificateType ** SOAP_FMAC4 soap_in_PointerTons6__SigningCertificateType(struct soap*, const char*, ns6__SigningCertificateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__SigningCertificateType(struct soap*, ns6__SigningCertificateType *const*, const char*, const char*);
SOAP_FMAC3 ns6__SigningCertificateType ** SOAP_FMAC4 soap_get_PointerTons6__SigningCertificateType(struct soap*, ns6__SigningCertificateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__SignedSignaturePropertiesType_DEFINED
#define SOAP_TYPE_PointerTons6__SignedSignaturePropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__SignedSignaturePropertiesType(struct soap*, ns6__SignedSignaturePropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__SignedSignaturePropertiesType(struct soap*, const char *, int, ns6__SignedSignaturePropertiesType *const*, const char *);
SOAP_FMAC3 ns6__SignedSignaturePropertiesType ** SOAP_FMAC4 soap_in_PointerTons6__SignedSignaturePropertiesType(struct soap*, const char*, ns6__SignedSignaturePropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__SignedSignaturePropertiesType(struct soap*, ns6__SignedSignaturePropertiesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__SignedSignaturePropertiesType ** SOAP_FMAC4 soap_get_PointerTons6__SignedSignaturePropertiesType(struct soap*, ns6__SignedSignaturePropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__UnsignedPropertiesType_DEFINED
#define SOAP_TYPE_PointerTons6__UnsignedPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__UnsignedPropertiesType(struct soap*, ns6__UnsignedPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__UnsignedPropertiesType(struct soap*, const char *, int, ns6__UnsignedPropertiesType *const*, const char *);
SOAP_FMAC3 ns6__UnsignedPropertiesType ** SOAP_FMAC4 soap_in_PointerTons6__UnsignedPropertiesType(struct soap*, const char*, ns6__UnsignedPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__UnsignedPropertiesType(struct soap*, ns6__UnsignedPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__UnsignedPropertiesType ** SOAP_FMAC4 soap_get_PointerTons6__UnsignedPropertiesType(struct soap*, ns6__UnsignedPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__SignedPropertiesType_DEFINED
#define SOAP_TYPE_PointerTons6__SignedPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__SignedPropertiesType(struct soap*, ns6__SignedPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__SignedPropertiesType(struct soap*, const char *, int, ns6__SignedPropertiesType *const*, const char *);
SOAP_FMAC3 ns6__SignedPropertiesType ** SOAP_FMAC4 soap_in_PointerTons6__SignedPropertiesType(struct soap*, const char*, ns6__SignedPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__SignedPropertiesType(struct soap*, ns6__SignedPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__SignedPropertiesType ** SOAP_FMAC4 soap_get_PointerTons6__SignedPropertiesType(struct soap*, ns6__SignedPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ResponseCodeMessage_DEFINED
#define SOAP_TYPE_PointerTons4__ResponseCodeMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ResponseCodeMessage(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ResponseCodeMessage(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__ResponseCodeMessage(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ResponseCodeMessage(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__ResponseCodeMessage(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__SubAttributeValueType_DEFINED
#define SOAP_TYPE_PointerTons4__SubAttributeValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__SubAttributeValueType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__SubAttributeValueType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__SubAttributeValueType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__SubAttributeValueType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__SubAttributeValueType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SubAttributeType_DEFINED
#define SOAP_TYPE_PointerTons3__SubAttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubAttributeType(struct soap*, ns3__SubAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubAttributeType(struct soap*, const char *, int, ns3__SubAttributeType *const*, const char *);
SOAP_FMAC3 ns3__SubAttributeType ** SOAP_FMAC4 soap_in_PointerTons3__SubAttributeType(struct soap*, const char*, ns3__SubAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubAttributeType(struct soap*, ns3__SubAttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SubAttributeType ** SOAP_FMAC4 soap_get_PointerTons3__SubAttributeType(struct soap*, ns3__SubAttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__SubAttributeListType_DEFINED
#define SOAP_TYPE_PointerTons3__SubAttributeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubAttributeListType(struct soap*, ns3__SubAttributeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubAttributeListType(struct soap*, const char *, int, ns3__SubAttributeListType *const*, const char *);
SOAP_FMAC3 ns3__SubAttributeListType ** SOAP_FMAC4 soap_in_PointerTons3__SubAttributeListType(struct soap*, const char*, ns3__SubAttributeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubAttributeListType(struct soap*, ns3__SubAttributeListType *const*, const char*, const char*);
SOAP_FMAC3 ns3__SubAttributeListType ** SOAP_FMAC4 soap_get_PointerTons3__SubAttributeListType(struct soap*, ns3__SubAttributeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__LegalActListType_DEFINED
#define SOAP_TYPE_PointerTons3__LegalActListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__LegalActListType(struct soap*, ns3__LegalActListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__LegalActListType(struct soap*, const char *, int, ns3__LegalActListType *const*, const char *);
SOAP_FMAC3 ns3__LegalActListType ** SOAP_FMAC4 soap_in_PointerTons3__LegalActListType(struct soap*, const char*, ns3__LegalActListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__LegalActListType(struct soap*, ns3__LegalActListType *const*, const char*, const char*);
SOAP_FMAC3 ns3__LegalActListType ** SOAP_FMAC4 soap_get_PointerTons3__LegalActListType(struct soap*, ns3__LegalActListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__DescriptionType_DEFINED
#define SOAP_TYPE_PointerTons4__DescriptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__DescriptionType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__DescriptionType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__DescriptionType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__DescriptionType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__DescriptionType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExtraIDType_DEFINED
#define SOAP_TYPE_PointerTons3__ExtraIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExtraIDType(struct soap*, ns3__ExtraIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExtraIDType(struct soap*, const char *, int, ns3__ExtraIDType *const*, const char *);
SOAP_FMAC3 ns3__ExtraIDType ** SOAP_FMAC4 soap_in_PointerTons3__ExtraIDType(struct soap*, const char*, ns3__ExtraIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExtraIDType(struct soap*, ns3__ExtraIDType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExtraIDType ** SOAP_FMAC4 soap_get_PointerTons3__ExtraIDType(struct soap*, ns3__ExtraIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ExtraIDListType_DEFINED
#define SOAP_TYPE_PointerTons3__ExtraIDListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExtraIDListType(struct soap*, ns3__ExtraIDListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExtraIDListType(struct soap*, const char *, int, ns3__ExtraIDListType *const*, const char *);
SOAP_FMAC3 ns3__ExtraIDListType ** SOAP_FMAC4 soap_in_PointerTons3__ExtraIDListType(struct soap*, const char*, ns3__ExtraIDListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExtraIDListType(struct soap*, ns3__ExtraIDListType *const*, const char*, const char*);
SOAP_FMAC3 ns3__ExtraIDListType ** SOAP_FMAC4 soap_get_PointerTons3__ExtraIDListType(struct soap*, ns3__ExtraIDListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__MainAttributeType_DEFINED
#define SOAP_TYPE_PointerTons3__MainAttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MainAttributeType(struct soap*, ns3__MainAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MainAttributeType(struct soap*, const char *, int, ns3__MainAttributeType *const*, const char *);
SOAP_FMAC3 ns3__MainAttributeType ** SOAP_FMAC4 soap_in_PointerTons3__MainAttributeType(struct soap*, const char*, ns3__MainAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MainAttributeType(struct soap*, ns3__MainAttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__MainAttributeType ** SOAP_FMAC4 soap_get_PointerTons3__MainAttributeType(struct soap*, ns3__MainAttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__SVGListType_DEFINED
#define SOAP_TYPE_PointerTons7__SVGListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__SVGListType(struct soap*, ns7__SVGListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__SVGListType(struct soap*, const char *, int, ns7__SVGListType *const*, const char *);
SOAP_FMAC3 ns7__SVGListType ** SOAP_FMAC4 soap_in_PointerTons7__SVGListType(struct soap*, const char*, ns7__SVGListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__SVGListType(struct soap*, ns7__SVGListType *const*, const char*, const char*);
SOAP_FMAC3 ns7__SVGListType ** SOAP_FMAC4 soap_get_PointerTons7__SVGListType(struct soap*, ns7__SVGListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__QualifyingPropertiesType_DEFINED
#define SOAP_TYPE_PointerTons6__QualifyingPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__QualifyingPropertiesType(struct soap*, ns6__QualifyingPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__QualifyingPropertiesType(struct soap*, const char *, int, ns6__QualifyingPropertiesType *const*, const char *);
SOAP_FMAC3 ns6__QualifyingPropertiesType ** SOAP_FMAC4 soap_in_PointerTons6__QualifyingPropertiesType(struct soap*, const char*, ns6__QualifyingPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__QualifyingPropertiesType(struct soap*, ns6__QualifyingPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 ns6__QualifyingPropertiesType ** SOAP_FMAC4 soap_get_PointerTons6__QualifyingPropertiesType(struct soap*, ns6__QualifyingPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__X509CertificateType_DEFINED
#define SOAP_TYPE_PointerTons5__X509CertificateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__X509CertificateType(struct soap*, ns5__X509CertificateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__X509CertificateType(struct soap*, const char *, int, ns5__X509CertificateType *const*, const char *);
SOAP_FMAC3 ns5__X509CertificateType ** SOAP_FMAC4 soap_in_PointerTons5__X509CertificateType(struct soap*, const char*, ns5__X509CertificateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__X509CertificateType(struct soap*, ns5__X509CertificateType *const*, const char*, const char*);
SOAP_FMAC3 ns5__X509CertificateType ** SOAP_FMAC4 soap_get_PointerTons5__X509CertificateType(struct soap*, ns5__X509CertificateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__X509DataType_DEFINED
#define SOAP_TYPE_PointerTons5__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__X509DataType(struct soap*, ns5__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__X509DataType(struct soap*, const char *, int, ns5__X509DataType *const*, const char *);
SOAP_FMAC3 ns5__X509DataType ** SOAP_FMAC4 soap_in_PointerTons5__X509DataType(struct soap*, const char*, ns5__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__X509DataType(struct soap*, ns5__X509DataType *const*, const char*, const char*);
SOAP_FMAC3 ns5__X509DataType ** SOAP_FMAC4 soap_get_PointerTons5__X509DataType(struct soap*, ns5__X509DataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__TransformType_DEFINED
#define SOAP_TYPE_PointerTons5__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TransformType(struct soap*, ns5__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TransformType(struct soap*, const char *, int, ns5__TransformType *const*, const char *);
SOAP_FMAC3 ns5__TransformType ** SOAP_FMAC4 soap_in_PointerTons5__TransformType(struct soap*, const char*, ns5__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TransformType(struct soap*, ns5__TransformType *const*, const char*, const char*);
SOAP_FMAC3 ns5__TransformType ** SOAP_FMAC4 soap_get_PointerTons5__TransformType(struct soap*, ns5__TransformType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__DigestValueType_DEFINED
#define SOAP_TYPE_PointerTons5__DigestValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__DigestValueType(struct soap*, ns5__DigestValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__DigestValueType(struct soap*, const char *, int, ns5__DigestValueType *const*, const char *);
SOAP_FMAC3 ns5__DigestValueType ** SOAP_FMAC4 soap_in_PointerTons5__DigestValueType(struct soap*, const char*, ns5__DigestValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__DigestValueType(struct soap*, ns5__DigestValueType *const*, const char*, const char*);
SOAP_FMAC3 ns5__DigestValueType ** SOAP_FMAC4 soap_get_PointerTons5__DigestValueType(struct soap*, ns5__DigestValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__DigestMethodType_DEFINED
#define SOAP_TYPE_PointerTons5__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__DigestMethodType(struct soap*, ns5__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__DigestMethodType(struct soap*, const char *, int, ns5__DigestMethodType *const*, const char *);
SOAP_FMAC3 ns5__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTons5__DigestMethodType(struct soap*, const char*, ns5__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__DigestMethodType(struct soap*, ns5__DigestMethodType *const*, const char*, const char*);
SOAP_FMAC3 ns5__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTons5__DigestMethodType(struct soap*, ns5__DigestMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__TransformsType_DEFINED
#define SOAP_TYPE_PointerTons5__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TransformsType(struct soap*, ns5__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TransformsType(struct soap*, const char *, int, ns5__TransformsType *const*, const char *);
SOAP_FMAC3 ns5__TransformsType ** SOAP_FMAC4 soap_in_PointerTons5__TransformsType(struct soap*, const char*, ns5__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TransformsType(struct soap*, ns5__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 ns5__TransformsType ** SOAP_FMAC4 soap_get_PointerTons5__TransformsType(struct soap*, ns5__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ReferenceType_DEFINED
#define SOAP_TYPE_PointerTons5__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ReferenceType(struct soap*, ns5__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ReferenceType(struct soap*, const char *, int, ns5__ReferenceType *const*, const char *);
SOAP_FMAC3 ns5__ReferenceType ** SOAP_FMAC4 soap_in_PointerTons5__ReferenceType(struct soap*, const char*, ns5__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ReferenceType(struct soap*, ns5__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 ns5__ReferenceType ** SOAP_FMAC4 soap_get_PointerTons5__ReferenceType(struct soap*, ns5__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__SignatureMethodType_DEFINED
#define SOAP_TYPE_PointerTons5__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SignatureMethodType(struct soap*, ns5__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SignatureMethodType(struct soap*, const char *, int, ns5__SignatureMethodType *const*, const char *);
SOAP_FMAC3 ns5__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTons5__SignatureMethodType(struct soap*, const char*, ns5__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SignatureMethodType(struct soap*, ns5__SignatureMethodType *const*, const char*, const char*);
SOAP_FMAC3 ns5__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTons5__SignatureMethodType(struct soap*, ns5__SignatureMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_PointerTons5__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__CanonicalizationMethodType(struct soap*, ns5__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__CanonicalizationMethodType(struct soap*, const char *, int, ns5__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 ns5__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTons5__CanonicalizationMethodType(struct soap*, const char*, ns5__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__CanonicalizationMethodType(struct soap*, ns5__CanonicalizationMethodType *const*, const char*, const char*);
SOAP_FMAC3 ns5__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTons5__CanonicalizationMethodType(struct soap*, ns5__CanonicalizationMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__ObjectType_DEFINED
#define SOAP_TYPE_PointerTons5__ObjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ObjectType(struct soap*, ns5__ObjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ObjectType(struct soap*, const char *, int, ns5__ObjectType *const*, const char *);
SOAP_FMAC3 ns5__ObjectType ** SOAP_FMAC4 soap_in_PointerTons5__ObjectType(struct soap*, const char*, ns5__ObjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ObjectType(struct soap*, ns5__ObjectType *const*, const char*, const char*);
SOAP_FMAC3 ns5__ObjectType ** SOAP_FMAC4 soap_get_PointerTons5__ObjectType(struct soap*, ns5__ObjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__KeyInfoType_DEFINED
#define SOAP_TYPE_PointerTons5__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__KeyInfoType(struct soap*, ns5__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__KeyInfoType(struct soap*, const char *, int, ns5__KeyInfoType *const*, const char *);
SOAP_FMAC3 ns5__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTons5__KeyInfoType(struct soap*, const char*, ns5__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__KeyInfoType(struct soap*, ns5__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns5__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTons5__KeyInfoType(struct soap*, ns5__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__SignatureValueType_DEFINED
#define SOAP_TYPE_PointerTons5__SignatureValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SignatureValueType(struct soap*, ns5__SignatureValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SignatureValueType(struct soap*, const char *, int, ns5__SignatureValueType *const*, const char *);
SOAP_FMAC3 ns5__SignatureValueType ** SOAP_FMAC4 soap_in_PointerTons5__SignatureValueType(struct soap*, const char*, ns5__SignatureValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SignatureValueType(struct soap*, ns5__SignatureValueType *const*, const char*, const char*);
SOAP_FMAC3 ns5__SignatureValueType ** SOAP_FMAC4 soap_get_PointerTons5__SignatureValueType(struct soap*, ns5__SignatureValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__SignedInfoType_DEFINED
#define SOAP_TYPE_PointerTons5__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SignedInfoType(struct soap*, ns5__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SignedInfoType(struct soap*, const char *, int, ns5__SignedInfoType *const*, const char *);
SOAP_FMAC3 ns5__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTons5__SignedInfoType(struct soap*, const char*, ns5__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SignedInfoType(struct soap*, ns5__SignedInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns5__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTons5__SignedInfoType(struct soap*, ns5__SignedInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AttributeType_DEFINED
#define SOAP_TYPE_PointerTons3__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AttributeType(struct soap*, ns3__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AttributeType(struct soap*, const char *, int, ns3__AttributeType *const*, const char *);
SOAP_FMAC3 ns3__AttributeType ** SOAP_FMAC4 soap_in_PointerTons3__AttributeType(struct soap*, const char*, ns3__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AttributeType(struct soap*, ns3__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AttributeType ** SOAP_FMAC4 soap_get_PointerTons3__AttributeType(struct soap*, ns3__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__SignatureType_DEFINED
#define SOAP_TYPE_PointerTons5__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SignatureType(struct soap*, ns5__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SignatureType(struct soap*, const char *, int, ns5__SignatureType *const*, const char *);
SOAP_FMAC3 ns5__SignatureType ** SOAP_FMAC4 soap_in_PointerTons5__SignatureType(struct soap*, const char*, ns5__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SignatureType(struct soap*, ns5__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 ns5__SignatureType ** SOAP_FMAC4 soap_get_PointerTons5__SignatureType(struct soap*, ns5__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__UnsignedAttributesBasicType_DEFINED
#define SOAP_TYPE_PointerTons2__UnsignedAttributesBasicType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UnsignedAttributesBasicType(struct soap*, ns2__UnsignedAttributesBasicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UnsignedAttributesBasicType(struct soap*, const char *, int, ns2__UnsignedAttributesBasicType *const*, const char *);
SOAP_FMAC3 ns2__UnsignedAttributesBasicType ** SOAP_FMAC4 soap_in_PointerTons2__UnsignedAttributesBasicType(struct soap*, const char*, ns2__UnsignedAttributesBasicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UnsignedAttributesBasicType(struct soap*, ns2__UnsignedAttributesBasicType *const*, const char*, const char*);
SOAP_FMAC3 ns2__UnsignedAttributesBasicType ** SOAP_FMAC4 soap_get_PointerTons2__UnsignedAttributesBasicType(struct soap*, ns2__UnsignedAttributesBasicType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__SignedAttributesType_DEFINED
#define SOAP_TYPE_PointerTons2__SignedAttributesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__SignedAttributesType(struct soap*, ns2__SignedAttributesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__SignedAttributesType(struct soap*, const char *, int, ns2__SignedAttributesType *const*, const char *);
SOAP_FMAC3 ns2__SignedAttributesType ** SOAP_FMAC4 soap_in_PointerTons2__SignedAttributesType(struct soap*, const char*, ns2__SignedAttributesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__SignedAttributesType(struct soap*, ns2__SignedAttributesType *const*, const char*, const char*);
SOAP_FMAC3 ns2__SignedAttributesType ** SOAP_FMAC4 soap_get_PointerTons2__SignedAttributesType(struct soap*, ns2__SignedAttributesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ResponseResult_DEFINED
#define SOAP_TYPE_PointerTons2__ResponseResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ResponseResult(struct soap*, ns2__ResponseResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ResponseResult(struct soap*, const char *, int, ns2__ResponseResult *const*, const char *);
SOAP_FMAC3 ns2__ResponseResult ** SOAP_FMAC4 soap_in_PointerTons2__ResponseResult(struct soap*, const char*, ns2__ResponseResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ResponseResult(struct soap*, ns2__ResponseResult *const*, const char*, const char*);
SOAP_FMAC3 ns2__ResponseResult ** SOAP_FMAC4 soap_get_PointerTons2__ResponseResult(struct soap*, ns2__ResponseResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__UnsignedAttributesType_DEFINED
#define SOAP_TYPE_PointerTons2__UnsignedAttributesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UnsignedAttributesType(struct soap*, ns2__UnsignedAttributesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UnsignedAttributesType(struct soap*, const char *, int, ns2__UnsignedAttributesType *const*, const char *);
SOAP_FMAC3 ns2__UnsignedAttributesType ** SOAP_FMAC4 soap_in_PointerTons2__UnsignedAttributesType(struct soap*, const char*, ns2__UnsignedAttributesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UnsignedAttributesType(struct soap*, ns2__UnsignedAttributesType *const*, const char*, const char*);
SOAP_FMAC3 ns2__UnsignedAttributesType ** SOAP_FMAC4 soap_get_PointerTons2__UnsignedAttributesType(struct soap*, ns2__UnsignedAttributesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AttributesType_DEFINED
#define SOAP_TYPE_PointerTons2__AttributesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AttributesType(struct soap*, ns2__AttributesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AttributesType(struct soap*, const char *, int, ns2__AttributesType *const*, const char *);
SOAP_FMAC3 ns2__AttributesType ** SOAP_FMAC4 soap_in_PointerTons2__AttributesType(struct soap*, const char*, ns2__AttributesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AttributesType(struct soap*, ns2__AttributesType *const*, const char*, const char*);
SOAP_FMAC3 ns2__AttributesType ** SOAP_FMAC4 soap_get_PointerTons2__AttributesType(struct soap*, ns2__AttributesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__CompanyNameType_DEFINED
#define SOAP_TYPE_PointerTons4__CompanyNameType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__CompanyNameType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__CompanyNameType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__CompanyNameType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__CompanyNameType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__CompanyNameType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__NIPCType_DEFINED
#define SOAP_TYPE_PointerTons4__NIPCType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__NIPCType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__NIPCType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__NIPCType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__NIPCType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__NIPCType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__AttributeSupplierType_DEFINED
#define SOAP_TYPE_PointerTons3__AttributeSupplierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AttributeSupplierType(struct soap*, const char *, int, ns3__AttributeSupplierType *const*, const char *);
SOAP_FMAC3 ns3__AttributeSupplierType ** SOAP_FMAC4 soap_in_PointerTons3__AttributeSupplierType(struct soap*, const char*, ns3__AttributeSupplierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType *const*, const char*, const char*);
SOAP_FMAC3 ns3__AttributeSupplierType ** SOAP_FMAC4 soap_get_PointerTons3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__AttributeSupplierListType_DEFINED
#define SOAP_TYPE_PointerTons2__AttributeSupplierListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AttributeSupplierListType(struct soap*, ns2__AttributeSupplierListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AttributeSupplierListType(struct soap*, const char *, int, ns2__AttributeSupplierListType *const*, const char *);
SOAP_FMAC3 ns2__AttributeSupplierListType ** SOAP_FMAC4 soap_in_PointerTons2__AttributeSupplierListType(struct soap*, const char*, ns2__AttributeSupplierListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AttributeSupplierListType(struct soap*, ns2__AttributeSupplierListType *const*, const char*, const char*);
SOAP_FMAC3 ns2__AttributeSupplierListType ** SOAP_FMAC4 soap_get_PointerTons2__AttributeSupplierListType(struct soap*, ns2__AttributeSupplierListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__PersonalDataType_DEFINED
#define SOAP_TYPE_PointerTons3__PersonalDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PersonalDataType(struct soap*, ns3__PersonalDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PersonalDataType(struct soap*, const char *, int, ns3__PersonalDataType *const*, const char *);
SOAP_FMAC3 ns3__PersonalDataType ** SOAP_FMAC4 soap_in_PointerTons3__PersonalDataType(struct soap*, const char*, ns3__PersonalDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PersonalDataType(struct soap*, ns3__PersonalDataType *const*, const char*, const char*);
SOAP_FMAC3 ns3__PersonalDataType ** SOAP_FMAC4 soap_get_PointerTons3__PersonalDataType(struct soap*, ns3__PersonalDataType **, const char*, const char*);
#endif
/* _ns6__ProducedAt is a typedef synonym for _XML */

#ifndef SOAP_TYPE__ns6__ProducedAt_DEFINED
#define SOAP_TYPE__ns6__ProducedAt_DEFINED
#endif
/* _ns6__ByName is a typedef synonym for _XML */

#ifndef SOAP_TYPE__ns6__ByName_DEFINED
#define SOAP_TYPE__ns6__ByName_DEFINED
#endif
/* _ns6__Number is a typedef synonym for _XML */

#ifndef SOAP_TYPE__ns6__Number_DEFINED
#define SOAP_TYPE__ns6__Number_DEFINED
#endif
/* _ns6__IssueTime is a typedef synonym for _XML */

#ifndef SOAP_TYPE__ns6__IssueTime_DEFINED
#define SOAP_TYPE__ns6__IssueTime_DEFINED
#endif
/* _ns6__Issuer is a typedef synonym for _XML */

#ifndef SOAP_TYPE__ns6__Issuer_DEFINED
#define SOAP_TYPE__ns6__Issuer_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define SCAP_instantiate__QName SCAP_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__TransactionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__TransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TransactionType(struct soap*, std::vector<ns1__TransactionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TransactionType(struct soap*, const std::vector<ns1__TransactionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TransactionType(struct soap*, const char*, int, const std::vector<ns1__TransactionType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__TransactionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TransactionType(struct soap*, const char*, std::vector<ns1__TransactionType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__TransactionType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons1__TransactionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TransactionType *>  * soap_new_std__vectorTemplateOfPointerTons1__TransactionType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons1__TransactionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__SubAttributeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__SubAttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap*, std::vector<ns1__SubAttributeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap*, const std::vector<ns1__SubAttributeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap*, const char*, int, const std::vector<ns1__SubAttributeType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SubAttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap*, const char*, std::vector<ns1__SubAttributeType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SubAttributeType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SubAttributeType *>  * soap_new_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons1__SubAttributeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__AttributeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__AttributeType(struct soap*, std::vector<ns1__AttributeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__AttributeType(struct soap*, const std::vector<ns1__AttributeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__AttributeType(struct soap*, const char*, int, const std::vector<ns1__AttributeType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__AttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__AttributeType(struct soap*, const char*, std::vector<ns1__AttributeType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__AttributeType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons1__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__AttributeType *>  * soap_new_std__vectorTemplateOfPointerTons1__AttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons1__AttributeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns7__SVGType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns7__SVGType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns7__SVGType(struct soap*, std::vector<xsd__base64Binary> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns7__SVGType(struct soap*, const std::vector<xsd__base64Binary> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns7__SVGType(struct soap*, const char*, int, const std::vector<xsd__base64Binary> *, const char*);
SOAP_FMAC3 std::vector<xsd__base64Binary> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns7__SVGType(struct soap*, const char*, std::vector<xsd__base64Binary> *, const char*);
SOAP_FMAC1 std::vector<xsd__base64Binary>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfns7__SVGType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xsd__base64Binary>  * soap_new_std__vectorTemplateOfns7__SVGType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfns7__SVGType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(struct soap*, std::vector<ns6__EncapsulatedOCSPValueType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(struct soap*, const std::vector<ns6__EncapsulatedOCSPValueType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(struct soap*, const char*, int, const std::vector<ns6__EncapsulatedOCSPValueType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__EncapsulatedOCSPValueType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(struct soap*, const char*, std::vector<ns6__EncapsulatedOCSPValueType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__EncapsulatedOCSPValueType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__EncapsulatedOCSPValueType *>  * soap_new_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__EncapsulatedOCSPValueType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(struct soap*, std::vector<ns6__EncapsulatedCRLValueType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(struct soap*, const std::vector<ns6__EncapsulatedCRLValueType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(struct soap*, const char*, int, const std::vector<ns6__EncapsulatedCRLValueType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__EncapsulatedCRLValueType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(struct soap*, const char*, std::vector<ns6__EncapsulatedCRLValueType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__EncapsulatedCRLValueType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__EncapsulatedCRLValueType *>  * soap_new_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__EncapsulatedCRLValueType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(struct soap*, std::vector<ns6__EncapsulatedX509CertificateType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(struct soap*, const std::vector<ns6__EncapsulatedX509CertificateType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(struct soap*, const char*, int, const std::vector<ns6__EncapsulatedX509CertificateType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__EncapsulatedX509CertificateType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(struct soap*, const char*, std::vector<ns6__EncapsulatedX509CertificateType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__EncapsulatedX509CertificateType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__EncapsulatedX509CertificateType *>  * soap_new_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__EncapsulatedX509CertificateType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__OCSPRefType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__OCSPRefType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__OCSPRefType(struct soap*, std::vector<ns6__OCSPRefType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__OCSPRefType(struct soap*, const std::vector<ns6__OCSPRefType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__OCSPRefType(struct soap*, const char*, int, const std::vector<ns6__OCSPRefType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__OCSPRefType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__OCSPRefType(struct soap*, const char*, std::vector<ns6__OCSPRefType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__OCSPRefType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__OCSPRefType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__OCSPRefType *>  * soap_new_std__vectorTemplateOfPointerTons6__OCSPRefType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__OCSPRefType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__CRLRefType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__CRLRefType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__CRLRefType(struct soap*, std::vector<ns6__CRLRefType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__CRLRefType(struct soap*, const std::vector<ns6__CRLRefType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__CRLRefType(struct soap*, const char*, int, const std::vector<ns6__CRLRefType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__CRLRefType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__CRLRefType(struct soap*, const char*, std::vector<ns6__CRLRefType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__CRLRefType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__CRLRefType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__CRLRefType *>  * soap_new_std__vectorTemplateOfPointerTons6__CRLRefType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__CRLRefType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__CertType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__CertType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__CertType(struct soap*, std::vector<ns6__CertType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__CertType(struct soap*, const std::vector<ns6__CertType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__CertType(struct soap*, const char*, int, const std::vector<ns6__CertType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__CertType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__CertType(struct soap*, const char*, std::vector<ns6__CertType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__CertType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__CertType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__CertType *>  * soap_new_std__vectorTemplateOfPointerTons6__CertType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__CertType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons6__ClaimedRoleType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons6__ClaimedRoleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons6__ClaimedRoleType(struct soap*, std::vector<ns6__ClaimedRoleType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons6__ClaimedRoleType(struct soap*, const std::vector<ns6__ClaimedRoleType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons6__ClaimedRoleType(struct soap*, const char*, int, const std::vector<ns6__ClaimedRoleType *> *, const char*);
SOAP_FMAC3 std::vector<ns6__ClaimedRoleType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons6__ClaimedRoleType(struct soap*, const char*, std::vector<ns6__ClaimedRoleType *> *, const char*);
SOAP_FMAC1 std::vector<ns6__ClaimedRoleType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons6__ClaimedRoleType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns6__ClaimedRoleType *>  * soap_new_std__vectorTemplateOfPointerTons6__ClaimedRoleType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons6__ClaimedRoleType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__SubAttributeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__SubAttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, std::vector<ns3__SubAttributeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, const std::vector<ns3__SubAttributeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, const char*, int, const std::vector<ns3__SubAttributeType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__SubAttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, const char*, std::vector<ns3__SubAttributeType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__SubAttributeType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__SubAttributeType *>  * soap_new_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons3__SubAttributeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns4__LegalActType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns4__LegalActType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns4__LegalActType(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns4__LegalActType(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns4__LegalActType(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns4__LegalActType(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfns4__LegalActType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfns4__LegalActType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfns4__LegalActType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ExtraIDType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ExtraIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, std::vector<ns3__ExtraIDType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, const std::vector<ns3__ExtraIDType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, const char*, int, const std::vector<ns3__ExtraIDType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ExtraIDType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, const char*, std::vector<ns3__ExtraIDType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ExtraIDType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ExtraIDType *>  * soap_new_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons3__ExtraIDType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__X509CertificateType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__X509CertificateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__X509CertificateType(struct soap*, std::vector<ns5__X509CertificateType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__X509CertificateType(struct soap*, const std::vector<ns5__X509CertificateType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__X509CertificateType(struct soap*, const char*, int, const std::vector<ns5__X509CertificateType *> *, const char*);
SOAP_FMAC3 std::vector<ns5__X509CertificateType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__X509CertificateType(struct soap*, const char*, std::vector<ns5__X509CertificateType *> *, const char*);
SOAP_FMAC1 std::vector<ns5__X509CertificateType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons5__X509CertificateType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__X509CertificateType *>  * soap_new_std__vectorTemplateOfPointerTons5__X509CertificateType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons5__X509CertificateType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__TransformType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__TransformType(struct soap*, std::vector<ns5__TransformType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__TransformType(struct soap*, const std::vector<ns5__TransformType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__TransformType(struct soap*, const char*, int, const std::vector<ns5__TransformType *> *, const char*);
SOAP_FMAC3 std::vector<ns5__TransformType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__TransformType(struct soap*, const char*, std::vector<ns5__TransformType *> *, const char*);
SOAP_FMAC1 std::vector<ns5__TransformType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons5__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__TransformType *>  * soap_new_std__vectorTemplateOfPointerTons5__TransformType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons5__TransformType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ReferenceType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ReferenceType(struct soap*, std::vector<ns5__ReferenceType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ReferenceType(struct soap*, const std::vector<ns5__ReferenceType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ReferenceType(struct soap*, const char*, int, const std::vector<ns5__ReferenceType *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ReferenceType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ReferenceType(struct soap*, const char*, std::vector<ns5__ReferenceType *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ReferenceType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons5__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ReferenceType *>  * soap_new_std__vectorTemplateOfPointerTons5__ReferenceType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons5__ReferenceType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__ObjectType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__ObjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ObjectType(struct soap*, std::vector<ns5__ObjectType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ObjectType(struct soap*, const std::vector<ns5__ObjectType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ObjectType(struct soap*, const char*, int, const std::vector<ns5__ObjectType *> *, const char*);
SOAP_FMAC3 std::vector<ns5__ObjectType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ObjectType(struct soap*, const char*, std::vector<ns5__ObjectType *> *, const char*);
SOAP_FMAC1 std::vector<ns5__ObjectType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons5__ObjectType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ObjectType *>  * soap_new_std__vectorTemplateOfPointerTons5__ObjectType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons5__ObjectType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, std::vector<ns3__AttributeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, const std::vector<ns3__AttributeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, const char*, int, const std::vector<ns3__AttributeType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, const char*, std::vector<ns3__AttributeType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AttributeType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons3__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AttributeType *>  * soap_new_std__vectorTemplateOfPointerTons3__AttributeType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons3__AttributeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__SignatureType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__SignatureType(struct soap*, std::vector<ns5__SignatureType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__SignatureType(struct soap*, const std::vector<ns5__SignatureType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__SignatureType(struct soap*, const char*, int, const std::vector<ns5__SignatureType *> *, const char*);
SOAP_FMAC3 std::vector<ns5__SignatureType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__SignatureType(struct soap*, const char*, std::vector<ns5__SignatureType *> *, const char*);
SOAP_FMAC1 std::vector<ns5__SignatureType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons5__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__SignatureType *>  * soap_new_std__vectorTemplateOfPointerTons5__SignatureType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons5__SignatureType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AttributesType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AttributesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AttributesType(struct soap*, std::vector<ns2__AttributesType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AttributesType(struct soap*, const std::vector<ns2__AttributesType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AttributesType(struct soap*, const char*, int, const std::vector<ns2__AttributesType *> *, const char*);
SOAP_FMAC3 std::vector<ns2__AttributesType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AttributesType(struct soap*, const char*, std::vector<ns2__AttributesType *> *, const char*);
SOAP_FMAC1 std::vector<ns2__AttributesType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons2__AttributesType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AttributesType *>  * soap_new_std__vectorTemplateOfPointerTons2__AttributesType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons2__AttributesType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeSupplierType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeSupplierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, std::vector<ns3__AttributeSupplierType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, const std::vector<ns3__AttributeSupplierType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, const char*, int, const std::vector<ns3__AttributeSupplierType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AttributeSupplierType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, const char*, std::vector<ns3__AttributeSupplierType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AttributeSupplierType *>  * SOAP_FMAC2 SCAP_instantiate_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AttributeSupplierType *>  * soap_new_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap *soap, int n = -1)
{
	return SCAP_instantiate_std__vectorTemplateOfPointerTons3__AttributeSupplierType(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of SCAPH.h */
