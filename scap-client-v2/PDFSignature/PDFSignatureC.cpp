/* PDFSignatureC.cpp
   Generated by gSOAP 2.8.28 from SCAP-PDFSignature.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "PDFSignatureH.h"

namespace PDFSignature {

SOAP_SOURCE_STAMP("@(#) PDFSignatureC.cpp ver 2.8.28 2016-10-24 10:41:05 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_PDFSignature_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_PDFSignature_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PDFSignature_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PDFSignature_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType:
		return soap_in_ns1__SignatureOrientationEnumType(soap, NULL, NULL, "ns1:SignatureOrientationEnumType");
	case SOAP_TYPE_PDFSignature_ns1__Status:
		return soap_in_ns1__Status(soap, NULL, NULL, "ns1:Status");
	case SOAP_TYPE_PDFSignature_ns1__SignResponse:
		return soap_in_ns1__SignResponse(soap, NULL, NULL, "ns1:SignResponse");
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeType:
		return soap_in_ns1__SubAttributeType(soap, NULL, NULL, "ns1:SubAttributeType");
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeListType:
		return soap_in_ns1__SubAttributeListType(soap, NULL, NULL, "ns1:SubAttributeListType");
	case SOAP_TYPE_PDFSignature_ns1__LegalActListType:
		return soap_in_ns1__LegalActListType(soap, NULL, NULL, "ns1:LegalActListType");
	case SOAP_TYPE_PDFSignature_ns1__MainAttributeType:
		return soap_in_ns1__MainAttributeType(soap, NULL, NULL, "ns1:MainAttributeType");
	case SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType:
		return soap_in_ns1__AttributeSupplierType(soap, NULL, NULL, "ns1:AttributeSupplierType");
	case SOAP_TYPE_PDFSignature_ns1__AttributeType:
		return soap_in_ns1__AttributeType(soap, NULL, NULL, "ns1:AttributeType");
	case SOAP_TYPE_PDFSignature_ns1__AttributeListType:
		return soap_in_ns1__AttributeListType(soap, NULL, NULL, "ns1:AttributeListType");
	case SOAP_TYPE_PDFSignature_ns1__PersonalDataType:
		return soap_in_ns1__PersonalDataType(soap, NULL, NULL, "ns1:PersonalDataType");
	case SOAP_TYPE_PDFSignature_ns1__SignRequest:
		return soap_in_ns1__SignRequest(soap, NULL, NULL, "ns1:SignRequest");
	case SOAP_TYPE_PDFSignature_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_PDFSignature_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PDFSignature_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PDFSignature_PointerTons1__SignRequest:
		return soap_in_PointerTons1__SignRequest(soap, NULL, NULL, "ns1:SignRequest");
	case SOAP_TYPE_PDFSignature_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PDFSignature_PointerTons1__Status:
		return soap_in_PointerTons1__Status(soap, NULL, NULL, "ns1:Status");
	case SOAP_TYPE_PDFSignature_PointerTons1__SubAttributeType:
		return soap_in_PointerTons1__SubAttributeType(soap, NULL, NULL, "ns1:SubAttributeType");
	case SOAP_TYPE_PDFSignature_PointerTons1__SubAttributeListType:
		return soap_in_PointerTons1__SubAttributeListType(soap, NULL, NULL, "ns1:SubAttributeListType");
	case SOAP_TYPE_PDFSignature_PointerTons1__LegalActListType:
		return soap_in_PointerTons1__LegalActListType(soap, NULL, NULL, "ns1:LegalActListType");
	case SOAP_TYPE_PDFSignature_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PDFSignature_PointerTons1__MainAttributeType:
		return soap_in_PointerTons1__MainAttributeType(soap, NULL, NULL, "ns1:MainAttributeType");
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeSupplierType:
		return soap_in_PointerTons1__AttributeSupplierType(soap, NULL, NULL, "ns1:AttributeSupplierType");
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeType:
		return soap_in_PointerTons1__AttributeType(soap, NULL, NULL, "ns1:AttributeType");
	case SOAP_TYPE_PDFSignature_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeListType:
		return soap_in_PointerTons1__AttributeListType(soap, NULL, NULL, "ns1:AttributeListType");
	case SOAP_TYPE_PDFSignature_PointerTons1__PersonalDataType:
		return soap_in_PointerTons1__PersonalDataType(soap, NULL, NULL, "ns1:PersonalDataType");
	case SOAP_TYPE_PDFSignature_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PDFSignature__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PDFSignature_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:Status"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__Status;
			return soap_in_ns1__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SignResponse"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__SignResponse;
			return soap_in_ns1__SignResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubAttributeType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__SubAttributeType;
			return soap_in_ns1__SubAttributeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubAttributeListType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__SubAttributeListType;
			return soap_in_ns1__SubAttributeListType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LegalActListType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__LegalActListType;
			return soap_in_ns1__LegalActListType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MainAttributeType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__MainAttributeType;
			return soap_in_ns1__MainAttributeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AttributeSupplierType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType;
			return soap_in_ns1__AttributeSupplierType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AttributeType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__AttributeType;
			return soap_in_ns1__AttributeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AttributeListType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__AttributeListType;
			return soap_in_ns1__AttributeListType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PersonalDataType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__PersonalDataType;
			return soap_in_ns1__PersonalDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SignRequest"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__SignRequest;
			return soap_in_ns1__SignRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_PDFSignature_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_PDFSignature_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_PDFSignature_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_PDFSignature_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_PDFSignature_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_PDFSignature_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_PDFSignature_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SignatureOrientationEnumType"))
		{	*type = SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType;
			return soap_in_ns1__SignatureOrientationEnumType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_PDFSignature__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_PDFSignature_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_PDFSignature_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_PDFSignature_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_PDFSignature_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PDFSignature_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType:
		return soap_out_ns1__SignatureOrientationEnumType(soap, tag, id, (const enum ns1__SignatureOrientationEnumType *)ptr, "ns1:SignatureOrientationEnumType");
	case SOAP_TYPE_PDFSignature_ns1__Status:
		return ((ns1__Status *)ptr)->soap_out(soap, tag, id, "ns1:Status");
	case SOAP_TYPE_PDFSignature_ns1__SignResponse:
		return ((ns1__SignResponse *)ptr)->soap_out(soap, tag, id, "ns1:SignResponse");
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeType:
		return ((ns1__SubAttributeType *)ptr)->soap_out(soap, tag, id, "ns1:SubAttributeType");
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeListType:
		return ((ns1__SubAttributeListType *)ptr)->soap_out(soap, tag, id, "ns1:SubAttributeListType");
	case SOAP_TYPE_PDFSignature_ns1__LegalActListType:
		return ((ns1__LegalActListType *)ptr)->soap_out(soap, tag, id, "ns1:LegalActListType");
	case SOAP_TYPE_PDFSignature_ns1__MainAttributeType:
		return ((ns1__MainAttributeType *)ptr)->soap_out(soap, tag, id, "ns1:MainAttributeType");
	case SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType:
		return ((ns1__AttributeSupplierType *)ptr)->soap_out(soap, tag, id, "ns1:AttributeSupplierType");
	case SOAP_TYPE_PDFSignature_ns1__AttributeType:
		return ((ns1__AttributeType *)ptr)->soap_out(soap, tag, id, "ns1:AttributeType");
	case SOAP_TYPE_PDFSignature_ns1__AttributeListType:
		return ((ns1__AttributeListType *)ptr)->soap_out(soap, tag, id, "ns1:AttributeListType");
	case SOAP_TYPE_PDFSignature_ns1__PersonalDataType:
		return ((ns1__PersonalDataType *)ptr)->soap_out(soap, tag, id, "ns1:PersonalDataType");
	case SOAP_TYPE_PDFSignature_ns1__SignRequest:
		return ((ns1__SignRequest *)ptr)->soap_out(soap, tag, id, "ns1:SignRequest");
	case SOAP_TYPE_PDFSignature_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_PDFSignature_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PDFSignature_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PDFSignature_PointerTons1__SignRequest:
		return soap_out_PointerTons1__SignRequest(soap, tag, id, (ns1__SignRequest *const*)ptr, "ns1:SignRequest");
	case SOAP_TYPE_PDFSignature_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PDFSignature_PointerTons1__Status:
		return soap_out_PointerTons1__Status(soap, tag, id, (ns1__Status *const*)ptr, "ns1:Status");
	case SOAP_TYPE_PDFSignature_PointerTons1__SubAttributeType:
		return soap_out_PointerTons1__SubAttributeType(soap, tag, id, (ns1__SubAttributeType *const*)ptr, "ns1:SubAttributeType");
	case SOAP_TYPE_PDFSignature_PointerTons1__SubAttributeListType:
		return soap_out_PointerTons1__SubAttributeListType(soap, tag, id, (ns1__SubAttributeListType *const*)ptr, "ns1:SubAttributeListType");
	case SOAP_TYPE_PDFSignature_PointerTons1__LegalActListType:
		return soap_out_PointerTons1__LegalActListType(soap, tag, id, (ns1__LegalActListType *const*)ptr, "ns1:LegalActListType");
	case SOAP_TYPE_PDFSignature_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PDFSignature_PointerTons1__MainAttributeType:
		return soap_out_PointerTons1__MainAttributeType(soap, tag, id, (ns1__MainAttributeType *const*)ptr, "ns1:MainAttributeType");
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeSupplierType:
		return soap_out_PointerTons1__AttributeSupplierType(soap, tag, id, (ns1__AttributeSupplierType *const*)ptr, "ns1:AttributeSupplierType");
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeType:
		return soap_out_PointerTons1__AttributeType(soap, tag, id, (ns1__AttributeType *const*)ptr, "ns1:AttributeType");
	case SOAP_TYPE_PDFSignature_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeListType:
		return soap_out_PointerTons1__AttributeListType(soap, tag, id, (ns1__AttributeListType *const*)ptr, "ns1:AttributeListType");
	case SOAP_TYPE_PDFSignature_PointerTons1__PersonalDataType:
		return soap_out_PointerTons1__PersonalDataType(soap, tag, id, (ns1__PersonalDataType *const*)ptr, "ns1:PersonalDataType");
	case SOAP_TYPE_PDFSignature_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PDFSignature__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_PDFSignature_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_PDFSignature_ns1__Status:
		((ns1__Status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__SignResponse:
		((ns1__SignResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeType:
		((ns1__SubAttributeType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeListType:
		((ns1__SubAttributeListType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__LegalActListType:
		((ns1__LegalActListType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__MainAttributeType:
		((ns1__MainAttributeType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType:
		((ns1__AttributeSupplierType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeType:
		((ns1__AttributeType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeListType:
		((ns1__AttributeListType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__PersonalDataType:
		((ns1__PersonalDataType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_ns1__SignRequest:
		((ns1__SignRequest *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_PDFSignature_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_PDFSignature_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PDFSignature___ns1__Sign:
		soap_serialize___ns1__Sign(soap, (const struct __ns1__Sign *)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__SignRequest:
		soap_serialize_PointerTons1__SignRequest(soap, (ns1__SignRequest *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__Status:
		soap_serialize_PointerTons1__Status(soap, (ns1__Status *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__SubAttributeType:
		soap_serialize_PointerTons1__SubAttributeType(soap, (ns1__SubAttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__SubAttributeListType:
		soap_serialize_PointerTons1__SubAttributeListType(soap, (ns1__SubAttributeListType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__LegalActListType:
		soap_serialize_PointerTons1__LegalActListType(soap, (ns1__LegalActListType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__MainAttributeType:
		soap_serialize_PointerTons1__MainAttributeType(soap, (ns1__MainAttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeSupplierType:
		soap_serialize_PointerTons1__AttributeSupplierType(soap, (ns1__AttributeSupplierType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeType:
		soap_serialize_PointerTons1__AttributeType(soap, (ns1__AttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__AttributeListType:
		soap_serialize_PointerTons1__AttributeListType(soap, (ns1__AttributeListType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTons1__PersonalDataType:
		soap_serialize_PointerTons1__PersonalDataType(soap, (ns1__PersonalDataType *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PDFSignature__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PDFSignature_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 PDFSignature_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_PDFSignature_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__SignRequest:
		return (void*)soap_instantiate_ns1__SignRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__PersonalDataType:
		return (void*)soap_instantiate_ns1__PersonalDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__AttributeListType:
		return (void*)soap_instantiate_ns1__AttributeListType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__AttributeType:
		return (void*)soap_instantiate_ns1__AttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType:
		return (void*)soap_instantiate_ns1__AttributeSupplierType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__MainAttributeType:
		return (void*)soap_instantiate_ns1__MainAttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__LegalActListType:
		return (void*)soap_instantiate_ns1__LegalActListType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeListType:
		return (void*)soap_instantiate_ns1__SubAttributeListType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeType:
		return (void*)soap_instantiate_ns1__SubAttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__SignResponse:
		return (void*)soap_instantiate_ns1__SignResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_ns1__Status:
		return (void*)soap_instantiate_ns1__Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature___ns1__Sign:
		return (void*)soap_instantiate___ns1__Sign(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_PDFSignature_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__SubAttributeType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__SubAttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__AttributeType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__AttributeType(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 PDFSignature_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_PDFSignature_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__SignRequest:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__SignRequest*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__SignRequest*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__PersonalDataType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__PersonalDataType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__PersonalDataType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeListType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__AttributeListType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__AttributeListType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__AttributeType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__AttributeType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__AttributeSupplierType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__AttributeSupplierType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__MainAttributeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__MainAttributeType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__MainAttributeType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__LegalActListType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__LegalActListType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__LegalActListType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeListType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__SubAttributeListType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__SubAttributeListType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__SubAttributeType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__SubAttributeType*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__SignResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__SignResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__SignResponse*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_ns1__Status:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__Status*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__Status*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature___ns1__Sign:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Sign*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Sign*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_PDFSignature_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__SubAttributeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ns1__SubAttributeType *> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ns1__SubAttributeType *> *>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<std::string> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<std::string> *>(p->ptr));
		break;
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__AttributeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ns1__AttributeType *> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ns1__AttributeType *> *>(p->ptr));
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 PDFSignature_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 PDFSignature_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__SubAttributeType:
		if (t == SOAP_TYPE_PDFSignature_ns1__SubAttributeType)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__SubAttributeType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__SubAttributeType *> *)p)[index] = *(ns1__SubAttributeType **)q;
		}
		break;
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_PDFSignature_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__AttributeType:
		if (t == SOAP_TYPE_PDFSignature_ns1__AttributeType)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__AttributeType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__AttributeType *> *)p)[index] = *(ns1__AttributeType **)q;
		}
		break;
	case SOAP_TYPE_PDFSignature_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_PDFSignature_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__SignRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__SignRequest type=%d location=%p object=%p\n", t, p, q));
		*(ns1__SignRequest*)p = *(ns1__SignRequest*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__PersonalDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__PersonalDataType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__PersonalDataType*)p = *(ns1__PersonalDataType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeListType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__AttributeListType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__AttributeListType*)p = *(ns1__AttributeListType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__AttributeType*)p = *(ns1__AttributeType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__AttributeSupplierType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__AttributeSupplierType*)p = *(ns1__AttributeSupplierType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__MainAttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MainAttributeType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MainAttributeType*)p = *(ns1__MainAttributeType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__LegalActListType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__LegalActListType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__LegalActListType*)p = *(ns1__LegalActListType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeListType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__SubAttributeListType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__SubAttributeListType*)p = *(ns1__SubAttributeListType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__SubAttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__SubAttributeType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__SubAttributeType*)p = *(ns1__SubAttributeType*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__SignResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__SignResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__SignResponse*)p = *(ns1__SignResponse*)q;
		break;
	case SOAP_TYPE_PDFSignature_ns1__Status:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Status type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Status*)p = *(ns1__Status*)q;
		break;
	case SOAP_TYPE_PDFSignature___ns1__Sign:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Sign type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Sign*)p = *(struct __ns1__Sign*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_PDFSignature_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_PDFSignature_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_PDFSignature_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_PDFSignature_byte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag?tag:"byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_PDFSignature_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_PDFSignature_int);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag?tag:"int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_PDFSignature_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_PDFSignature_unsignedByte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_PDFSignature_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_PDFSignature_unsignedInt);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SignatureOrientationEnumType(struct soap *soap, enum ns1__SignatureOrientationEnumType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__SignatureOrientationEnumType
	*a = SOAP_DEFAULT_ns1__SignatureOrientationEnumType;
#else
	*a = (enum ns1__SignatureOrientationEnumType)0;
#endif
}

static const struct soap_code_map soap_codes_ns1__SignatureOrientationEnumType[] =
{	{ (LONG64)ns1__SignatureOrientationEnumType__LANDSCAPE, "LANDSCAPE" },
	{ (LONG64)ns1__SignatureOrientationEnumType__PORTRAIT, "PORTRAIT" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__SignatureOrientationEnumType2s(struct soap *soap, enum ns1__SignatureOrientationEnumType n)
{	const char *s = soap_code_str(soap_codes_ns1__SignatureOrientationEnumType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SignatureOrientationEnumType(struct soap *soap, const char *tag, int id, const enum ns1__SignatureOrientationEnumType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType), type) || soap_send(soap, soap_ns1__SignatureOrientationEnumType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__SignatureOrientationEnumType(struct soap *soap, const char *s, enum ns1__SignatureOrientationEnumType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns1__SignatureOrientationEnumType, s);
	if (map)
		*a = (enum ns1__SignatureOrientationEnumType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__SignatureOrientationEnumType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__SignatureOrientationEnumType * SOAP_FMAC4 soap_in_ns1__SignatureOrientationEnumType(struct soap *soap, const char *tag, enum ns1__SignatureOrientationEnumType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__SignatureOrientationEnumType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType, sizeof(enum ns1__SignatureOrientationEnumType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2ns1__SignatureOrientationEnumType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns1__SignatureOrientationEnumType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType, SOAP_TYPE_PDFSignature_ns1__SignatureOrientationEnumType, sizeof(enum ns1__SignatureOrientationEnumType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SignatureOrientationEnumType(struct soap *soap, const enum ns1__SignatureOrientationEnumType *a, const char *tag, const char *type)
{
	if (soap_out_ns1__SignatureOrientationEnumType(soap, tag?tag:"ns1:SignatureOrientationEnumType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__SignatureOrientationEnumType * SOAP_FMAC4 soap_get_ns1__SignatureOrientationEnumType(struct soap *soap, enum ns1__SignatureOrientationEnumType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SignatureOrientationEnumType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Status::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__Status::Code);
	soap_default_std__string(soap, &this->ns1__Status::Message);
	this->ns1__Status::Field = NULL;
	this->ns1__Status::FieldValue = NULL;
	/* transient soap skipped */
}

void ns1__Status::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__Status::Code, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__Status::Code);
	soap_embedded(soap, &this->ns1__Status::Message, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__Status::Message);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Status::Field);
	soap_serialize_PointerTostd__string(soap, &this->ns1__Status::FieldValue);
#endif
}

int ns1__Status::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Status(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Status(struct soap *soap, const char *tag, int id, const ns1__Status *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__Status), type))
		return soap->error;
	if (soap_out_std__string(soap, "Code", -1, &a->ns1__Status::Code, ""))
		return soap->error;
	if (soap_out_std__string(soap, "Message", -1, &a->ns1__Status::Message, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Field", -1, &a->ns1__Status::Field, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "FieldValue", -1, &a->ns1__Status::FieldValue, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Status::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Status(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_in_ns1__Status(struct soap *soap, const char *tag, ns1__Status *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__Status, sizeof(ns1__Status), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Code1 = 1;
	size_t soap_flag_Message1 = 1;
	size_t soap_flag_Field1 = 1;
	size_t soap_flag_FieldValue1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Code1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Code", &a->ns1__Status::Code, "xsd:string"))
				{	soap_flag_Code1--;
					continue;
				}
			if (soap_flag_Message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Message", &a->ns1__Status::Message, "xsd:string"))
				{	soap_flag_Message1--;
					continue;
				}
			if (soap_flag_Field1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Field", &a->ns1__Status::Field, "xsd:string"))
				{	soap_flag_Field1--;
					continue;
				}
			if (soap_flag_FieldValue1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "FieldValue", &a->ns1__Status::FieldValue, "xsd:string"))
				{	soap_flag_FieldValue1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Code1 > 0 || soap_flag_Message1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__Status, SOAP_TYPE_PDFSignature_ns1__Status, sizeof(ns1__Status), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Status * SOAP_FMAC2 soap_instantiate_ns1__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Status(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Status *p;
	size_t k = sizeof(ns1__Status);
	if (n < 0)
	{	p = SOAP_NEW(ns1__Status);
		if (p)
			((ns1__Status*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__Status, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__Status*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Status location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__Status, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__Status::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:Status", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Status::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Status(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_get_ns1__Status(struct soap *soap, ns1__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__SignResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__SignResponse::ProcessId);
	this->ns1__SignResponse::Status = NULL;
	this->ns1__SignResponse::SignedDocument = NULL;
	/* transient soap skipped */
}

void ns1__SignResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__SignResponse::ProcessId, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__SignResponse::ProcessId);
	soap_serialize_PointerTons1__Status(soap, &this->ns1__SignResponse::Status);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__SignResponse::SignedDocument);
#endif
}

int ns1__SignResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SignResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SignResponse(struct soap *soap, const char *tag, int id, const ns1__SignResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__SignResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "ProcessId", -1, &a->ns1__SignResponse::ProcessId, ""))
		return soap->error;
	if (!a->ns1__SignResponse::Status)
	{	if (soap_element_nil(soap, "Status"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__Status(soap, "Status", -1, &a->ns1__SignResponse::Status, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "SignedDocument", -1, &a->ns1__SignResponse::SignedDocument, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__SignResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SignResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SignResponse * SOAP_FMAC4 soap_in_ns1__SignResponse(struct soap *soap, const char *tag, ns1__SignResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SignResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__SignResponse, sizeof(ns1__SignResponse), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ProcessId1 = 1;
	size_t soap_flag_Status1 = 1;
	size_t soap_flag_SignedDocument1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ProcessId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ProcessId", &a->ns1__SignResponse::ProcessId, "xsd:string"))
				{	soap_flag_ProcessId1--;
					continue;
				}
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Status(soap, "Status", &a->ns1__SignResponse::Status, "ns1:Status"))
				{	soap_flag_Status1--;
					continue;
				}
			if (soap_flag_SignedDocument1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "SignedDocument", &a->ns1__SignResponse::SignedDocument, "xsd:base64Binary"))
				{	soap_flag_SignedDocument1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ProcessId1 > 0 || soap_flag_Status1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__SignResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__SignResponse, SOAP_TYPE_PDFSignature_ns1__SignResponse, sizeof(ns1__SignResponse), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__SignResponse * SOAP_FMAC2 soap_instantiate_ns1__SignResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SignResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__SignResponse *p;
	size_t k = sizeof(ns1__SignResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__SignResponse);
		if (p)
			((ns1__SignResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__SignResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__SignResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__SignResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__SignResponse, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__SignResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:SignResponse", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__SignResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SignResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SignResponse * SOAP_FMAC4 soap_get_ns1__SignResponse(struct soap *soap, ns1__SignResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SignResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__SubAttributeType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__SubAttributeType::AttributeID);
	this->ns1__SubAttributeType::Description = NULL;
	this->ns1__SubAttributeType::Value = NULL;
	this->ns1__SubAttributeType::LegalActList = NULL;
	this->ns1__SubAttributeType::Type = NULL;
	/* transient soap skipped */
}

void ns1__SubAttributeType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__SubAttributeType::AttributeID, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__SubAttributeType::AttributeID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__SubAttributeType::Description);
	soap_serialize_PointerTostd__string(soap, &this->ns1__SubAttributeType::Value);
	soap_serialize_PointerTons1__LegalActListType(soap, &this->ns1__SubAttributeType::LegalActList);
	soap_serialize_PointerTostd__string(soap, &this->ns1__SubAttributeType::Type);
#endif
}

int ns1__SubAttributeType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SubAttributeType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubAttributeType(struct soap *soap, const char *tag, int id, const ns1__SubAttributeType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__SubAttributeType), type))
		return soap->error;
	if (soap_out_std__string(soap, "AttributeID", -1, &a->ns1__SubAttributeType::AttributeID, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Description", -1, &a->ns1__SubAttributeType::Description, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Value", -1, &a->ns1__SubAttributeType::Value, ""))
		return soap->error;
	if (soap_out_PointerTons1__LegalActListType(soap, "LegalActList", -1, &a->ns1__SubAttributeType::LegalActList, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Type", -1, &a->ns1__SubAttributeType::Type, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__SubAttributeType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SubAttributeType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SubAttributeType * SOAP_FMAC4 soap_in_ns1__SubAttributeType(struct soap *soap, const char *tag, ns1__SubAttributeType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SubAttributeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__SubAttributeType, sizeof(ns1__SubAttributeType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_AttributeID1 = 1;
	size_t soap_flag_Description1 = 1;
	size_t soap_flag_Value1 = 1;
	size_t soap_flag_LegalActList1 = 1;
	size_t soap_flag_Type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AttributeID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "AttributeID", &a->ns1__SubAttributeType::AttributeID, "xsd:string"))
				{	soap_flag_AttributeID1--;
					continue;
				}
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Description", &a->ns1__SubAttributeType::Description, "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Value", &a->ns1__SubAttributeType::Value, "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap_flag_LegalActList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LegalActListType(soap, "LegalActList", &a->ns1__SubAttributeType::LegalActList, "ns1:LegalActListType"))
				{	soap_flag_LegalActList1--;
					continue;
				}
			if (soap_flag_Type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Type", &a->ns1__SubAttributeType::Type, "xsd:string"))
				{	soap_flag_Type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AttributeID1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__SubAttributeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__SubAttributeType, SOAP_TYPE_PDFSignature_ns1__SubAttributeType, sizeof(ns1__SubAttributeType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__SubAttributeType * SOAP_FMAC2 soap_instantiate_ns1__SubAttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubAttributeType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__SubAttributeType *p;
	size_t k = sizeof(ns1__SubAttributeType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__SubAttributeType);
		if (p)
			((ns1__SubAttributeType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__SubAttributeType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__SubAttributeType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__SubAttributeType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__SubAttributeType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__SubAttributeType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:SubAttributeType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__SubAttributeType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SubAttributeType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SubAttributeType * SOAP_FMAC4 soap_get_ns1__SubAttributeType(struct soap *soap, ns1__SubAttributeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubAttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__SubAttributeListType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__SubAttributeType(soap, &this->ns1__SubAttributeListType::SubAttribute);
	/* transient soap skipped */
}

void ns1__SubAttributeListType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__SubAttributeType(soap, &this->ns1__SubAttributeListType::SubAttribute);
#endif
}

int ns1__SubAttributeListType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SubAttributeListType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubAttributeListType(struct soap *soap, const char *tag, int id, const ns1__SubAttributeListType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__SubAttributeType(soap, "SubAttribute", -1, &a->ns1__SubAttributeListType::SubAttribute, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__SubAttributeListType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SubAttributeListType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SubAttributeListType * SOAP_FMAC4 soap_in_ns1__SubAttributeListType(struct soap *soap, const char *tag, ns1__SubAttributeListType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SubAttributeListType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType, sizeof(ns1__SubAttributeListType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__SubAttributeType(soap, "SubAttribute", &a->ns1__SubAttributeListType::SubAttribute, "ns1:SubAttributeType"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (a->ns1__SubAttributeListType::SubAttribute.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__SubAttributeListType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType, sizeof(ns1__SubAttributeListType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__SubAttributeListType * SOAP_FMAC2 soap_instantiate_ns1__SubAttributeListType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SubAttributeListType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__SubAttributeListType *p;
	size_t k = sizeof(ns1__SubAttributeListType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__SubAttributeListType);
		if (p)
			((ns1__SubAttributeListType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__SubAttributeListType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__SubAttributeListType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__SubAttributeListType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__SubAttributeListType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:SubAttributeListType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__SubAttributeListType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SubAttributeListType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SubAttributeListType * SOAP_FMAC4 soap_get_ns1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SubAttributeListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__LegalActListType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__LegalActListType::LegalAct);
	/* transient soap skipped */
}

void ns1__LegalActListType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__LegalActListType::LegalAct);
#endif
}

int ns1__LegalActListType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__LegalActListType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LegalActListType(struct soap *soap, const char *tag, int id, const ns1__LegalActListType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__LegalActListType), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "LegalAct", -1, &a->ns1__LegalActListType::LegalAct, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__LegalActListType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__LegalActListType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__LegalActListType * SOAP_FMAC4 soap_in_ns1__LegalActListType(struct soap *soap, const char *tag, ns1__LegalActListType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__LegalActListType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__LegalActListType, sizeof(ns1__LegalActListType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "LegalAct", &a->ns1__LegalActListType::LegalAct, "xsd:string"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (a->ns1__LegalActListType::LegalAct.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__LegalActListType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__LegalActListType, SOAP_TYPE_PDFSignature_ns1__LegalActListType, sizeof(ns1__LegalActListType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__LegalActListType * SOAP_FMAC2 soap_instantiate_ns1__LegalActListType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LegalActListType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__LegalActListType *p;
	size_t k = sizeof(ns1__LegalActListType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__LegalActListType);
		if (p)
			((ns1__LegalActListType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__LegalActListType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__LegalActListType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__LegalActListType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__LegalActListType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__LegalActListType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:LegalActListType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__LegalActListType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__LegalActListType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__LegalActListType * SOAP_FMAC4 soap_get_ns1__LegalActListType(struct soap *soap, ns1__LegalActListType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LegalActListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MainAttributeType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__MainAttributeType::AttributeID);
	this->ns1__MainAttributeType::Description = NULL;
	this->ns1__MainAttributeType::LegalActList = NULL;
	this->ns1__MainAttributeType::SubAttributeList = NULL;
	/* transient soap skipped */
}

void ns1__MainAttributeType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__MainAttributeType::AttributeID, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__MainAttributeType::AttributeID);
	soap_serialize_PointerTostd__string(soap, &this->ns1__MainAttributeType::Description);
	soap_serialize_PointerTons1__LegalActListType(soap, &this->ns1__MainAttributeType::LegalActList);
	soap_serialize_PointerTons1__SubAttributeListType(soap, &this->ns1__MainAttributeType::SubAttributeList);
#endif
}

int ns1__MainAttributeType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MainAttributeType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MainAttributeType(struct soap *soap, const char *tag, int id, const ns1__MainAttributeType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__MainAttributeType), type))
		return soap->error;
	if (soap_out_std__string(soap, "AttributeID", -1, &a->ns1__MainAttributeType::AttributeID, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Description", -1, &a->ns1__MainAttributeType::Description, ""))
		return soap->error;
	if (soap_out_PointerTons1__LegalActListType(soap, "LegalActList", -1, &a->ns1__MainAttributeType::LegalActList, ""))
		return soap->error;
	if (soap_out_PointerTons1__SubAttributeListType(soap, "SubAttributeList", -1, &a->ns1__MainAttributeType::SubAttributeList, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__MainAttributeType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__MainAttributeType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MainAttributeType * SOAP_FMAC4 soap_in_ns1__MainAttributeType(struct soap *soap, const char *tag, ns1__MainAttributeType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MainAttributeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__MainAttributeType, sizeof(ns1__MainAttributeType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_AttributeID1 = 1;
	size_t soap_flag_Description1 = 1;
	size_t soap_flag_LegalActList1 = 1;
	size_t soap_flag_SubAttributeList1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AttributeID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "AttributeID", &a->ns1__MainAttributeType::AttributeID, "xsd:string"))
				{	soap_flag_AttributeID1--;
					continue;
				}
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Description", &a->ns1__MainAttributeType::Description, "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_LegalActList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LegalActListType(soap, "LegalActList", &a->ns1__MainAttributeType::LegalActList, "ns1:LegalActListType"))
				{	soap_flag_LegalActList1--;
					continue;
				}
			if (soap_flag_SubAttributeList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__SubAttributeListType(soap, "SubAttributeList", &a->ns1__MainAttributeType::SubAttributeList, "ns1:SubAttributeListType"))
				{	soap_flag_SubAttributeList1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AttributeID1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__MainAttributeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__MainAttributeType, SOAP_TYPE_PDFSignature_ns1__MainAttributeType, sizeof(ns1__MainAttributeType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__MainAttributeType * SOAP_FMAC2 soap_instantiate_ns1__MainAttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MainAttributeType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__MainAttributeType *p;
	size_t k = sizeof(ns1__MainAttributeType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__MainAttributeType);
		if (p)
			((ns1__MainAttributeType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__MainAttributeType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__MainAttributeType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MainAttributeType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__MainAttributeType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__MainAttributeType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:MainAttributeType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MainAttributeType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MainAttributeType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MainAttributeType * SOAP_FMAC4 soap_get_ns1__MainAttributeType(struct soap *soap, ns1__MainAttributeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MainAttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__AttributeSupplierType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &this->ns1__AttributeSupplierType::Id);
	soap_default_std__string(soap, &this->ns1__AttributeSupplierType::Name);
	this->ns1__AttributeSupplierType::Type = NULL;
	/* transient soap skipped */
}

void ns1__AttributeSupplierType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyURI(soap, &this->ns1__AttributeSupplierType::Id);
	soap_embedded(soap, &this->ns1__AttributeSupplierType::Name, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__AttributeSupplierType::Name);
	soap_serialize_PointerTostd__string(soap, &this->ns1__AttributeSupplierType::Type);
#endif
}

int ns1__AttributeSupplierType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AttributeSupplierType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AttributeSupplierType(struct soap *soap, const char *tag, int id, const ns1__AttributeSupplierType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType), type))
		return soap->error;
	if (soap_out_xsd__anyURI(soap, "Id", -1, &a->ns1__AttributeSupplierType::Id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "Name", -1, &a->ns1__AttributeSupplierType::Name, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "Type", -1, &a->ns1__AttributeSupplierType::Type, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__AttributeSupplierType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AttributeSupplierType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AttributeSupplierType * SOAP_FMAC4 soap_in_ns1__AttributeSupplierType(struct soap *soap, const char *tag, ns1__AttributeSupplierType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AttributeSupplierType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType, sizeof(ns1__AttributeSupplierType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Type1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__anyURI(soap, "Id", &a->ns1__AttributeSupplierType::Id, "xsd:anyURI"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Name", &a->ns1__AttributeSupplierType::Name, "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "Type", &a->ns1__AttributeSupplierType::Type, "xsd:string"))
				{	soap_flag_Type1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Id1 > 0 || soap_flag_Name1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__AttributeSupplierType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType, sizeof(ns1__AttributeSupplierType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__AttributeSupplierType * SOAP_FMAC2 soap_instantiate_ns1__AttributeSupplierType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AttributeSupplierType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__AttributeSupplierType *p;
	size_t k = sizeof(ns1__AttributeSupplierType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__AttributeSupplierType);
		if (p)
			((ns1__AttributeSupplierType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__AttributeSupplierType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__AttributeSupplierType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__AttributeSupplierType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__AttributeSupplierType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:AttributeSupplierType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__AttributeSupplierType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AttributeSupplierType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AttributeSupplierType * SOAP_FMAC4 soap_get_ns1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AttributeSupplierType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__AttributeType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__AttributeType::AttributeSupplier = NULL;
	this->ns1__AttributeType::MainAttribute = NULL;
	/* transient soap skipped */
}

void ns1__AttributeType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__AttributeSupplierType(soap, &this->ns1__AttributeType::AttributeSupplier);
	soap_serialize_PointerTons1__MainAttributeType(soap, &this->ns1__AttributeType::MainAttribute);
#endif
}

int ns1__AttributeType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AttributeType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AttributeType(struct soap *soap, const char *tag, int id, const ns1__AttributeType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__AttributeType), type))
		return soap->error;
	if (!a->ns1__AttributeType::AttributeSupplier)
	{	if (soap_element_nil(soap, "AttributeSupplier"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__AttributeSupplierType(soap, "AttributeSupplier", -1, &a->ns1__AttributeType::AttributeSupplier, ""))
		return soap->error;
	if (!a->ns1__AttributeType::MainAttribute)
	{	if (soap_element_nil(soap, "MainAttribute"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__MainAttributeType(soap, "MainAttribute", -1, &a->ns1__AttributeType::MainAttribute, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__AttributeType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AttributeType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AttributeType * SOAP_FMAC4 soap_in_ns1__AttributeType(struct soap *soap, const char *tag, ns1__AttributeType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AttributeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__AttributeType, sizeof(ns1__AttributeType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_AttributeSupplier1 = 1;
	size_t soap_flag_MainAttribute1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AttributeSupplier1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__AttributeSupplierType(soap, "AttributeSupplier", &a->ns1__AttributeType::AttributeSupplier, "ns1:AttributeSupplierType"))
				{	soap_flag_AttributeSupplier1--;
					continue;
				}
			if (soap_flag_MainAttribute1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__MainAttributeType(soap, "MainAttribute", &a->ns1__AttributeType::MainAttribute, "ns1:MainAttributeType"))
				{	soap_flag_MainAttribute1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AttributeSupplier1 > 0 || soap_flag_MainAttribute1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__AttributeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__AttributeType, SOAP_TYPE_PDFSignature_ns1__AttributeType, sizeof(ns1__AttributeType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__AttributeType * SOAP_FMAC2 soap_instantiate_ns1__AttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AttributeType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__AttributeType *p;
	size_t k = sizeof(ns1__AttributeType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__AttributeType);
		if (p)
			((ns1__AttributeType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__AttributeType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__AttributeType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__AttributeType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__AttributeType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__AttributeType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:AttributeType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__AttributeType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AttributeType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AttributeType * SOAP_FMAC4 soap_get_ns1__AttributeType(struct soap *soap, ns1__AttributeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__AttributeListType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__AttributeType(soap, &this->ns1__AttributeListType::Attribute);
	/* transient soap skipped */
}

void ns1__AttributeListType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__AttributeType(soap, &this->ns1__AttributeListType::Attribute);
#endif
}

int ns1__AttributeListType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AttributeListType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AttributeListType(struct soap *soap, const char *tag, int id, const ns1__AttributeListType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__AttributeListType), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__AttributeType(soap, "Attribute", -1, &a->ns1__AttributeListType::Attribute, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__AttributeListType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AttributeListType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AttributeListType * SOAP_FMAC4 soap_in_ns1__AttributeListType(struct soap *soap, const char *tag, ns1__AttributeListType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AttributeListType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__AttributeListType, sizeof(ns1__AttributeListType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__AttributeType(soap, "Attribute", &a->ns1__AttributeListType::Attribute, "ns1:AttributeType"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (a->ns1__AttributeListType::Attribute.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__AttributeListType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__AttributeListType, SOAP_TYPE_PDFSignature_ns1__AttributeListType, sizeof(ns1__AttributeListType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__AttributeListType * SOAP_FMAC2 soap_instantiate_ns1__AttributeListType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AttributeListType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__AttributeListType *p;
	size_t k = sizeof(ns1__AttributeListType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__AttributeListType);
		if (p)
			((ns1__AttributeListType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__AttributeListType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__AttributeListType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__AttributeListType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__AttributeListType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__AttributeListType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:AttributeListType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__AttributeListType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AttributeListType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AttributeListType * SOAP_FMAC4 soap_get_ns1__AttributeListType(struct soap *soap, ns1__AttributeListType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AttributeListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__PersonalDataType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__PersonalDataType::Name);
	soap_default_std__string(soap, &this->ns1__PersonalDataType::NIC);
	/* transient soap skipped */
}

void ns1__PersonalDataType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__PersonalDataType::Name, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__PersonalDataType::Name);
	soap_embedded(soap, &this->ns1__PersonalDataType::NIC, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__PersonalDataType::NIC);
#endif
}

int ns1__PersonalDataType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__PersonalDataType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PersonalDataType(struct soap *soap, const char *tag, int id, const ns1__PersonalDataType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__PersonalDataType), type))
		return soap->error;
	if (soap_out_std__string(soap, "Name", -1, &a->ns1__PersonalDataType::Name, ""))
		return soap->error;
	if (soap_out_std__string(soap, "NIC", -1, &a->ns1__PersonalDataType::NIC, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__PersonalDataType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__PersonalDataType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__PersonalDataType * SOAP_FMAC4 soap_in_ns1__PersonalDataType(struct soap *soap, const char *tag, ns1__PersonalDataType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__PersonalDataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__PersonalDataType, sizeof(ns1__PersonalDataType), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_NIC1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Name", &a->ns1__PersonalDataType::Name, "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_NIC1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "NIC", &a->ns1__PersonalDataType::NIC, "xsd:string"))
				{	soap_flag_NIC1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Name1 > 0 || soap_flag_NIC1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__PersonalDataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__PersonalDataType, SOAP_TYPE_PDFSignature_ns1__PersonalDataType, sizeof(ns1__PersonalDataType), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__PersonalDataType * SOAP_FMAC2 soap_instantiate_ns1__PersonalDataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__PersonalDataType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__PersonalDataType *p;
	size_t k = sizeof(ns1__PersonalDataType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__PersonalDataType);
		if (p)
			((ns1__PersonalDataType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__PersonalDataType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__PersonalDataType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__PersonalDataType location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__PersonalDataType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__PersonalDataType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:PersonalDataType", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__PersonalDataType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__PersonalDataType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__PersonalDataType * SOAP_FMAC4 soap_get_ns1__PersonalDataType(struct soap *soap, ns1__PersonalDataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__PersonalDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__SignRequest::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__SignRequest::ProcessId);
	this->ns1__SignRequest::PersonalData = NULL;
	this->ns1__SignRequest::AttributeList = NULL;
	soap_default_std__string(soap, &this->ns1__SignRequest::SignatureFieldName);
	this->ns1__SignRequest::SignDocument.xsd__base64Binary::soap_default(soap);
	this->ns1__SignRequest::LTV = NULL;
	soap_default_int(soap, &this->ns1__SignRequest::Page);
	soap_default_int(soap, &this->ns1__SignRequest::X);
	soap_default_int(soap, &this->ns1__SignRequest::Y);
	soap_default_ns1__SignatureOrientationEnumType(soap, &this->ns1__SignRequest::Orientation);
	/* transient soap skipped */
}

void ns1__SignRequest::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__SignRequest::ProcessId, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__SignRequest::ProcessId);
	soap_serialize_PointerTons1__PersonalDataType(soap, &this->ns1__SignRequest::PersonalData);
	soap_serialize_PointerTons1__AttributeListType(soap, &this->ns1__SignRequest::AttributeList);
	soap_embedded(soap, &this->ns1__SignRequest::SignatureFieldName, SOAP_TYPE_PDFSignature_std__string);
	soap_serialize_std__string(soap, &this->ns1__SignRequest::SignatureFieldName);
	soap_embedded(soap, &this->ns1__SignRequest::SignDocument, SOAP_TYPE_PDFSignature_xsd__base64Binary);
	this->ns1__SignRequest::SignDocument.soap_serialize(soap);
	soap_serialize_PointerToint(soap, &this->ns1__SignRequest::LTV);
	soap_embedded(soap, &this->ns1__SignRequest::Page, SOAP_TYPE_PDFSignature_int);
	soap_embedded(soap, &this->ns1__SignRequest::X, SOAP_TYPE_PDFSignature_int);
	soap_embedded(soap, &this->ns1__SignRequest::Y, SOAP_TYPE_PDFSignature_int);
#endif
}

int ns1__SignRequest::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__SignRequest(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SignRequest(struct soap *soap, const char *tag, int id, const ns1__SignRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_ns1__SignRequest), type))
		return soap->error;
	if (soap_out_std__string(soap, "ProcessId", -1, &a->ns1__SignRequest::ProcessId, ""))
		return soap->error;
	if (!a->ns1__SignRequest::PersonalData)
	{	if (soap_element_nil(soap, "PersonalData"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__PersonalDataType(soap, "PersonalData", -1, &a->ns1__SignRequest::PersonalData, ""))
		return soap->error;
	if (!a->ns1__SignRequest::AttributeList)
	{	if (soap_element_nil(soap, "AttributeList"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__AttributeListType(soap, "AttributeList", -1, &a->ns1__SignRequest::AttributeList, ""))
		return soap->error;
	if (soap_out_std__string(soap, "SignatureFieldName", -1, &a->ns1__SignRequest::SignatureFieldName, ""))
		return soap->error;
	if ((a->ns1__SignRequest::SignDocument).soap_out(soap, "SignDocument", -1, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "LTV", -1, &a->ns1__SignRequest::LTV, ""))
		return soap->error;
	if (soap_out_int(soap, "Page", -1, &a->ns1__SignRequest::Page, ""))
		return soap->error;
	if (soap_out_int(soap, "X", -1, &a->ns1__SignRequest::X, ""))
		return soap->error;
	if (soap_out_int(soap, "Y", -1, &a->ns1__SignRequest::Y, ""))
		return soap->error;
	if (soap_out_ns1__SignatureOrientationEnumType(soap, "Orientation", -1, &a->ns1__SignRequest::Orientation, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__SignRequest::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__SignRequest(soap, tag, this, type);
}

SOAP_FMAC3 ns1__SignRequest * SOAP_FMAC4 soap_in_ns1__SignRequest(struct soap *soap, const char *tag, ns1__SignRequest *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__SignRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_ns1__SignRequest, sizeof(ns1__SignRequest), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ProcessId1 = 1;
	size_t soap_flag_PersonalData1 = 1;
	size_t soap_flag_AttributeList1 = 1;
	size_t soap_flag_SignatureFieldName1 = 1;
	size_t soap_flag_SignDocument1 = 1;
	size_t soap_flag_LTV1 = 1;
	size_t soap_flag_Page1 = 1;
	size_t soap_flag_X1 = 1;
	size_t soap_flag_Y1 = 1;
	size_t soap_flag_Orientation1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ProcessId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ProcessId", &a->ns1__SignRequest::ProcessId, "xsd:string"))
				{	soap_flag_ProcessId1--;
					continue;
				}
			if (soap_flag_PersonalData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__PersonalDataType(soap, "PersonalData", &a->ns1__SignRequest::PersonalData, "ns1:PersonalDataType"))
				{	soap_flag_PersonalData1--;
					continue;
				}
			if (soap_flag_AttributeList1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__AttributeListType(soap, "AttributeList", &a->ns1__SignRequest::AttributeList, "ns1:AttributeListType"))
				{	soap_flag_AttributeList1--;
					continue;
				}
			if (soap_flag_SignatureFieldName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "SignatureFieldName", &a->ns1__SignRequest::SignatureFieldName, "xsd:string"))
				{	soap_flag_SignatureFieldName1--;
					continue;
				}
			if (soap_flag_SignDocument1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->ns1__SignRequest::SignDocument).soap_in(soap, "SignDocument", "xsd:base64Binary"))
				{	soap_flag_SignDocument1--;
					continue;
				}
			if (soap_flag_LTV1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "LTV", &a->ns1__SignRequest::LTV, "xsd:int"))
				{	soap_flag_LTV1--;
					continue;
				}
			if (soap_flag_Page1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Page", &a->ns1__SignRequest::Page, "xsd:int"))
				{	soap_flag_Page1--;
					continue;
				}
			if (soap_flag_X1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "X", &a->ns1__SignRequest::X, "xsd:int"))
				{	soap_flag_X1--;
					continue;
				}
			if (soap_flag_Y1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Y", &a->ns1__SignRequest::Y, "xsd:int"))
				{	soap_flag_Y1--;
					continue;
				}
			if (soap_flag_Orientation1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__SignatureOrientationEnumType(soap, "Orientation", &a->ns1__SignRequest::Orientation, "ns1:SignatureOrientationEnumType"))
				{	soap_flag_Orientation1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ProcessId1 > 0 || soap_flag_PersonalData1 > 0 || soap_flag_AttributeList1 > 0 || soap_flag_SignatureFieldName1 > 0 || soap_flag_SignDocument1 > 0 || soap_flag_Page1 > 0 || soap_flag_X1 > 0 || soap_flag_Y1 > 0 || soap_flag_Orientation1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__SignRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_ns1__SignRequest, SOAP_TYPE_PDFSignature_ns1__SignRequest, sizeof(ns1__SignRequest), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__SignRequest * SOAP_FMAC2 soap_instantiate_ns1__SignRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__SignRequest(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__SignRequest *p;
	size_t k = sizeof(ns1__SignRequest);
	if (n < 0)
	{	p = SOAP_NEW(ns1__SignRequest);
		if (p)
			((ns1__SignRequest*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__SignRequest, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__SignRequest*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__SignRequest location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_ns1__SignRequest, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__SignRequest::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"ns1:SignRequest", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__SignRequest::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__SignRequest(soap, this, tag, type);
}

SOAP_FMAC3 ns1__SignRequest * SOAP_FMAC4 soap_get_ns1__SignRequest(struct soap *soap, ns1__SignRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__SignRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_PDFSignature_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_PDFSignature_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_PDFSignature_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase), 0, SOAP_TYPE_PDFSignature_xsd__anyURI, SOAP_TYPE_PDFSignature_xsd__anyURI, sizeof(std::string), 0, PDFSignature_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_PDFSignature_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_PDFSignature_std__string, sizeof(std::string), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_PDFSignature_std__string, sizeof(std::string), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase), 0, SOAP_TYPE_PDFSignature_std__string, SOAP_TYPE_PDFSignature_std__string, sizeof(std::string), 0, PDFSignature_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_std__string, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_PDFSignature_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_PDFSignature_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_PDFSignature_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, PDFSignature_instantiate, PDFSignature_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_xsd__base64Binary, SOAP_TYPE_PDFSignature_xsd__base64Binary, sizeof(xsd__base64Binary), 0, PDFSignature_finsert, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	if (n < 0)
	{	p = SOAP_NEW(xsd__base64Binary);
		if (p)
			((xsd__base64Binary*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__base64Binary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_xsd__base64Binary, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", -2, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_ENV__Fault::SOAP_ENV__Fault()
{
	soap_default_SOAP_ENV__Fault(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_SOAP_ENV__Fault, SOAP_TYPE_PDFSignature_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, PDFSignature_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_SOAP_ENV__Fault, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Reason::SOAP_ENV__Reason()
{
	soap_default_SOAP_ENV__Reason(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, PDFSignature_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Detail::SOAP_ENV__Detail()
{
	soap_default_SOAP_ENV__Detail(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, PDFSignature_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Code::SOAP_ENV__Code()
{
	soap_default_SOAP_ENV__Code(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_SOAP_ENV__Code, SOAP_TYPE_PDFSignature_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, PDFSignature_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_SOAP_ENV__Code, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_ENV__Header::SOAP_ENV__Header()
{
	soap_default_SOAP_ENV__Header(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PDFSignature_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_PDFSignature_SOAP_ENV__Header, SOAP_TYPE_PDFSignature_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, PDFSignature_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_SOAP_ENV__Header, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

__ns1__Sign::__ns1__Sign()
{
	soap_default___ns1__Sign(NULL, this);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Sign(struct soap *soap, struct __ns1__Sign *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SignRequest_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Sign(struct soap *soap, const struct __ns1__Sign *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__SignRequest(soap, &a->ns1__SignRequest_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Sign(struct soap *soap, const char *tag, int id, const struct __ns1__Sign *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__SignRequest(soap, "ns1:SignRequest", -1, &a->ns1__SignRequest_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Sign * SOAP_FMAC4 soap_in___ns1__Sign(struct soap *soap, const char *tag, struct __ns1__Sign *a, const char *type)
{
	size_t soap_flag_ns1__SignRequest_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Sign *)soap_id_enter(soap, "", a, SOAP_TYPE_PDFSignature___ns1__Sign, sizeof(struct __ns1__Sign), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Sign(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SignRequest_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__SignRequest(soap, "ns1:SignRequest", &a->ns1__SignRequest_, "ns1:SignRequest"))
				{	soap_flag_ns1__SignRequest_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Sign * SOAP_FMAC2 soap_instantiate___ns1__Sign(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Sign(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Sign *p;
	size_t k = sizeof(struct __ns1__Sign);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__Sign);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__Sign, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Sign location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature___ns1__Sign, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Sign(struct soap *soap, const struct __ns1__Sign *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Sign(soap, tag?tag:"-ns1:Sign", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Sign * SOAP_FMAC4 soap_get___ns1__Sign(struct soap *soap, struct __ns1__Sign *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Sign(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SignRequest(struct soap *soap, ns1__SignRequest *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__SignRequest))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SignRequest(struct soap *soap, const char *tag, int id, ns1__SignRequest *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__SignRequest, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SignRequest ** SOAP_FMAC4 soap_in_PointerTons1__SignRequest(struct soap *soap, const char *tag, ns1__SignRequest **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SignRequest **)soap_malloc(soap, sizeof(ns1__SignRequest *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SignRequest *)soap_instantiate_ns1__SignRequest(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__SignRequest **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__SignRequest, sizeof(ns1__SignRequest), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SignRequest(struct soap *soap, ns1__SignRequest *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__SignRequest(soap, tag?tag:"ns1:SignRequest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__SignRequest ** SOAP_FMAC4 soap_get_PointerTons1__SignRequest(struct soap *soap, ns1__SignRequest **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SignRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_PDFSignature_xsd__base64Binary, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_xsd__base64Binary, sizeof(xsd__base64Binary), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Status(struct soap *soap, ns1__Status *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__Status))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Status(struct soap *soap, const char *tag, int id, ns1__Status *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__Status, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_in_PointerTons1__Status(struct soap *soap, const char *tag, ns1__Status **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Status **)soap_malloc(soap, sizeof(ns1__Status *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Status *)soap_instantiate_ns1__Status(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Status **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__Status, sizeof(ns1__Status), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Status(struct soap *soap, ns1__Status *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Status(soap, tag?tag:"ns1:Status", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_get_PointerTons1__Status(struct soap *soap, ns1__Status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubAttributeType(struct soap *soap, ns1__SubAttributeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__SubAttributeType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubAttributeType(struct soap *soap, const char *tag, int id, ns1__SubAttributeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__SubAttributeType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SubAttributeType ** SOAP_FMAC4 soap_in_PointerTons1__SubAttributeType(struct soap *soap, const char *tag, ns1__SubAttributeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SubAttributeType **)soap_malloc(soap, sizeof(ns1__SubAttributeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SubAttributeType *)soap_instantiate_ns1__SubAttributeType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__SubAttributeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__SubAttributeType, sizeof(ns1__SubAttributeType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubAttributeType(struct soap *soap, ns1__SubAttributeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__SubAttributeType(soap, tag?tag:"ns1:SubAttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__SubAttributeType ** SOAP_FMAC4 soap_get_PointerTons1__SubAttributeType(struct soap *soap, ns1__SubAttributeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SubAttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubAttributeListType(struct soap *soap, const char *tag, int id, ns1__SubAttributeListType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__SubAttributeListType ** SOAP_FMAC4 soap_in_PointerTons1__SubAttributeListType(struct soap *soap, const char *tag, ns1__SubAttributeListType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__SubAttributeListType **)soap_malloc(soap, sizeof(ns1__SubAttributeListType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__SubAttributeListType *)soap_instantiate_ns1__SubAttributeListType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__SubAttributeListType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__SubAttributeListType, sizeof(ns1__SubAttributeListType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__SubAttributeListType(soap, tag?tag:"ns1:SubAttributeListType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__SubAttributeListType ** SOAP_FMAC4 soap_get_PointerTons1__SubAttributeListType(struct soap *soap, ns1__SubAttributeListType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__SubAttributeListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LegalActListType(struct soap *soap, ns1__LegalActListType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__LegalActListType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LegalActListType(struct soap *soap, const char *tag, int id, ns1__LegalActListType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__LegalActListType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__LegalActListType ** SOAP_FMAC4 soap_in_PointerTons1__LegalActListType(struct soap *soap, const char *tag, ns1__LegalActListType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__LegalActListType **)soap_malloc(soap, sizeof(ns1__LegalActListType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__LegalActListType *)soap_instantiate_ns1__LegalActListType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__LegalActListType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__LegalActListType, sizeof(ns1__LegalActListType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LegalActListType(struct soap *soap, ns1__LegalActListType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__LegalActListType(soap, tag?tag:"ns1:LegalActListType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__LegalActListType ** SOAP_FMAC4 soap_get_PointerTons1__LegalActListType(struct soap *soap, ns1__LegalActListType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__LegalActListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MainAttributeType(struct soap *soap, ns1__MainAttributeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__MainAttributeType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MainAttributeType(struct soap *soap, const char *tag, int id, ns1__MainAttributeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__MainAttributeType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__MainAttributeType ** SOAP_FMAC4 soap_in_PointerTons1__MainAttributeType(struct soap *soap, const char *tag, ns1__MainAttributeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MainAttributeType **)soap_malloc(soap, sizeof(ns1__MainAttributeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MainAttributeType *)soap_instantiate_ns1__MainAttributeType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MainAttributeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__MainAttributeType, sizeof(ns1__MainAttributeType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MainAttributeType(struct soap *soap, ns1__MainAttributeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MainAttributeType(soap, tag?tag:"ns1:MainAttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MainAttributeType ** SOAP_FMAC4 soap_get_PointerTons1__MainAttributeType(struct soap *soap, ns1__MainAttributeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MainAttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AttributeSupplierType(struct soap *soap, const char *tag, int id, ns1__AttributeSupplierType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AttributeSupplierType ** SOAP_FMAC4 soap_in_PointerTons1__AttributeSupplierType(struct soap *soap, const char *tag, ns1__AttributeSupplierType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AttributeSupplierType **)soap_malloc(soap, sizeof(ns1__AttributeSupplierType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AttributeSupplierType *)soap_instantiate_ns1__AttributeSupplierType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__AttributeSupplierType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__AttributeSupplierType, sizeof(ns1__AttributeSupplierType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__AttributeSupplierType(soap, tag?tag:"ns1:AttributeSupplierType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__AttributeSupplierType ** SOAP_FMAC4 soap_get_PointerTons1__AttributeSupplierType(struct soap *soap, ns1__AttributeSupplierType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AttributeSupplierType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AttributeType(struct soap *soap, ns1__AttributeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__AttributeType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AttributeType(struct soap *soap, const char *tag, int id, ns1__AttributeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__AttributeType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AttributeType ** SOAP_FMAC4 soap_in_PointerTons1__AttributeType(struct soap *soap, const char *tag, ns1__AttributeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AttributeType **)soap_malloc(soap, sizeof(ns1__AttributeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AttributeType *)soap_instantiate_ns1__AttributeType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__AttributeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__AttributeType, sizeof(ns1__AttributeType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AttributeType(struct soap *soap, ns1__AttributeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__AttributeType(soap, tag?tag:"ns1:AttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__AttributeType ** SOAP_FMAC4 soap_get_PointerTons1__AttributeType(struct soap *soap, ns1__AttributeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_PDFSignature_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag?tag:"int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AttributeListType(struct soap *soap, ns1__AttributeListType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__AttributeListType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AttributeListType(struct soap *soap, const char *tag, int id, ns1__AttributeListType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__AttributeListType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AttributeListType ** SOAP_FMAC4 soap_in_PointerTons1__AttributeListType(struct soap *soap, const char *tag, ns1__AttributeListType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AttributeListType **)soap_malloc(soap, sizeof(ns1__AttributeListType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AttributeListType *)soap_instantiate_ns1__AttributeListType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__AttributeListType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__AttributeListType, sizeof(ns1__AttributeListType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AttributeListType(struct soap *soap, ns1__AttributeListType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__AttributeListType(soap, tag?tag:"ns1:AttributeListType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__AttributeListType ** SOAP_FMAC4 soap_get_PointerTons1__AttributeListType(struct soap *soap, ns1__AttributeListType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AttributeListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PersonalDataType(struct soap *soap, ns1__PersonalDataType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PDFSignature_ns1__PersonalDataType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PersonalDataType(struct soap *soap, const char *tag, int id, ns1__PersonalDataType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_ns1__PersonalDataType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__PersonalDataType ** SOAP_FMAC4 soap_in_PointerTons1__PersonalDataType(struct soap *soap, const char *tag, ns1__PersonalDataType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PersonalDataType **)soap_malloc(soap, sizeof(ns1__PersonalDataType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__PersonalDataType *)soap_instantiate_ns1__PersonalDataType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__PersonalDataType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_ns1__PersonalDataType, sizeof(ns1__PersonalDataType), 0, PDFSignature_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PersonalDataType(struct soap *soap, ns1__PersonalDataType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__PersonalDataType(soap, tag?tag:"ns1:PersonalDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__PersonalDataType ** SOAP_FMAC4 soap_get_PointerTons1__PersonalDataType(struct soap *soap, ns1__PersonalDataType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__PersonalDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_PDFSignature_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PDFSignature_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PDFSignature_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_PDFSignature__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_PDFSignature__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_PDFSignature__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag?tag:"QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_PDFSignature_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_PDFSignature_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_PDFSignature_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag?tag:"string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap *soap, std::vector<ns1__SubAttributeType *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap *soap, const std::vector<ns1__SubAttributeType *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__SubAttributeType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__SubAttributeType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap *soap, const char *tag, int id, const std::vector<ns1__SubAttributeType *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__SubAttributeType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__SubAttributeType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__SubAttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap *soap, const char *tag, std::vector<ns1__SubAttributeType *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__SubAttributeType(soap)))
			return NULL;
		ns1__SubAttributeType *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_PDFSignature_ns1__SubAttributeType, SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__SubAttributeType, sizeof(ns1__SubAttributeType), 1, PDFSignature_finsert, PDFSignature_fbase))
				break;
			if (!soap_in_PointerTons1__SubAttributeType(soap, tag, NULL, "ns1:SubAttributeType"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__SubAttributeType(soap, tag, &n, "ns1:SubAttributeType"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__SubAttributeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SubAttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__SubAttributeType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__SubAttributeType *> *p;
	size_t k = sizeof(std::vector<ns1__SubAttributeType *> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<ns1__SubAttributeType *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<ns1__SubAttributeType *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__SubAttributeType *>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__SubAttributeType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap)))
			return NULL;
		std::string n;
		soap_default_std__string(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_PDFSignature_std__string, SOAP_TYPE_PDFSignature_std__vectorTemplateOfstd__string, sizeof(std::string), 0, PDFSignature_finsert, PDFSignature_fbase))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::string));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_std__vectorTemplateOfstd__string, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__AttributeType(struct soap *soap, std::vector<ns1__AttributeType *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__AttributeType(struct soap *soap, const std::vector<ns1__AttributeType *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__AttributeType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__AttributeType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__AttributeType(struct soap *soap, const char *tag, int id, const std::vector<ns1__AttributeType *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__AttributeType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__AttributeType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__AttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__AttributeType(struct soap *soap, const char *tag, std::vector<ns1__AttributeType *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__AttributeType(soap)))
			return NULL;
		ns1__AttributeType *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_PDFSignature_ns1__AttributeType, SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__AttributeType, sizeof(ns1__AttributeType), 1, PDFSignature_finsert, PDFSignature_fbase))
				break;
			if (!soap_in_PointerTons1__AttributeType(soap, tag, NULL, "ns1:AttributeType"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__AttributeType(soap, tag, &n, "ns1:AttributeType"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__AttributeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__AttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__AttributeType(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__AttributeType *> *p;
	size_t k = sizeof(std::vector<ns1__AttributeType *> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<ns1__AttributeType *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<ns1__AttributeType *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__AttributeType *>  location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_PDFSignature_std__vectorTemplateOfPointerTons1__AttributeType, n, PDFSignature_fdelete);
	if (size)
		*size = k;
	return p;
}

} // namespace PDFSignature


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of PDFSignatureC.cpp */
