/* PDFSignaturePDFSignatureSoapBindingProxy.cpp
   Generated by gSOAP 2.8.28 from SCAP-PDFSignature.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "PDFSignatureSoapBindingProxy.h"

namespace PDFSignature {

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	PDFSignatureSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy(const PDFSignatureSoapBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	PDFSignatureSoapBindingProxy_init(_soap->imode, _soap->omode);
}

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy(const char *url)
{	this->soap = soap_new();
	this->soap_own = true;
	PDFSignatureSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PDFSignatureSoapBindingProxy_init(iomode, iomode);
}

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PDFSignatureSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	PDFSignatureSoapBindingProxy_init(imode, omode);
}

PDFSignatureSoapBindingProxy::~PDFSignatureSoapBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void PDFSignatureSoapBindingProxy::PDFSignatureSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://www.cartaodecidadao.pt/ccc/sccc/services/PDFSignature", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
PDFSignatureSoapBindingProxy *PDFSignatureSoapBindingProxy::copy()
{	PDFSignatureSoapBindingProxy *dup = SOAP_NEW_COPY(PDFSignatureSoapBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

PDFSignatureSoapBindingProxy& PDFSignatureSoapBindingProxy::operator=(const PDFSignatureSoapBindingProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void PDFSignatureSoapBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PDFSignatureSoapBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	PDFSignatureSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void PDFSignatureSoapBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *PDFSignatureSoapBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *PDFSignatureSoapBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *PDFSignatureSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *PDFSignatureSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int PDFSignatureSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int PDFSignatureSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void PDFSignatureSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PDFSignatureSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PDFSignatureSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int PDFSignatureSoapBindingProxy::Sign(const char *endpoint, const char *soap_action, ns1__SignRequest *ns1__SignRequest_, ns1__SignResponse &ns1__SignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Sign soap_tmp___ns1__Sign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://preprod.scap.autenticacao.gov.pt/PADES/PDFSignature";
	if (soap_action == NULL)
		soap_action = "http://www.cartaodecidadao.pt/services/ccc/PDFSignature/Operations/Sign";
	soap_tmp___ns1__Sign.ns1__SignRequest_ = ns1__SignRequest_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Sign(soap, &soap_tmp___ns1__Sign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Sign(soap, &soap_tmp___ns1__Sign, "-ns1:Sign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Sign(soap, &soap_tmp___ns1__Sign, "-ns1:Sign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__SignResponse_)
		return soap_closesock(soap);
	ns1__SignResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SignResponse_.soap_get(soap, "ns1:SignResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace PDFSignature

/* End of client proxy code */
