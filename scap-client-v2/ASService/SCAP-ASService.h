// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* SCAP-ASService.h
   Generated by wsdl2h 2.8.28 from AttributeSupplierService.wsdl and typemap.dat
   2016-10-10 16:17:48 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on SCAP-ASService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "wsse.h"
#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)
#import "ds.h"	// ds = <http://www.w3.org/2000/09/xmldsig#>

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"
ns2 = "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"
ns3 = "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"
ns4 = "http://www.cartaodecidadao.pt/ccc/commons/messages/Types"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"
//gsoap ns1   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"
//gsoap ns2   schema namespace:	http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"
//gsoap ns3   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"http://www.cartaodecidadao.pt/ccc/commons/messages/Types"
//gsoap ns4   schema namespace:	http://www.cartaodecidadao.pt/ccc/commons/messages/Types
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

// Imported XSD type ""http://www.w3.org/2000/09/xmldsig#":SignatureType" defined by ds__SignatureType.
/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:date".
typedef std::string xsd__date;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns2__AttributeSupplierResponseType.
class ns2__AttributeSupplierResponseType;

//  Forward declaration of class ns3__AttributeType.
class ns3__AttributeType;

//  Forward declaration of class ns3__AttributeSupplierType.
class ns3__AttributeSupplierType;

//  Forward declaration of class ns3__PersonalDataType.
class ns3__PersonalDataType;

//  Forward declaration of class ns3__ExtraIDListType.
class ns3__ExtraIDListType;

//  Forward declaration of class ns3__ExtraIDType.
class ns3__ExtraIDType;

//  Forward declaration of class ns3__MainAttributeType.
class ns3__MainAttributeType;

//  Forward declaration of class ns3__LegalActListType.
class ns3__LegalActListType;

//  Forward declaration of class ns3__SubAttributeListType.
class ns3__SubAttributeListType;

//  Forward declaration of class ns3__SubAttributeType.
class ns3__SubAttributeType;

//  Forward declaration of class ns3__ResponseCodeStatusType.
class ns3__ResponseCodeStatusType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ProcessIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 40.
typedef std::string ns4__ProcessIDType: 40;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NameType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ValidityType is a simpleType restriction of XSD type xs:date.
///
typedef xsd__date ns4__ValidityType;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DateType is a simpleType restriction of XSD type xs:date.
///
typedef xsd__date ns4__DateType;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NICType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NICType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NIPCType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__NIPCType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":CompanyNameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__CompanyNameType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ExtraIDValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__ExtraIDValueType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__AttributeIDType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":LegalActType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 2048.
typedef std::string ns4__LegalActType: 2048;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":SubAttributeValueType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__SubAttributeValueType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 255.
typedef std::string ns4__DescriptionType: 255;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 5.
typedef std::string ns4__ResponseCodeType: 5;

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeMessage is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 1024.
typedef std::string ns4__ResponseCodeMessage: 1024;


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponseType is a complexType.
///
/// class ns2__AttributeSupplierResponseType operations:
/// - ns2__AttributeSupplierResponseType* soap_new_ns2__AttributeSupplierResponseType(soap*) allocate
/// - ns2__AttributeSupplierResponseType* soap_new_ns2__AttributeSupplierResponseType(soap*, int num) allocate array
/// - ns2__AttributeSupplierResponseType* soap_new_req_ns2__AttributeSupplierResponseType(soap*, ...) allocate, set required members
/// - ns2__AttributeSupplierResponseType* soap_new_set_ns2__AttributeSupplierResponseType(soap*, ...) allocate, set all public members
/// - ns2__AttributeSupplierResponseType::soap_default(soap*) reset members to default
/// - int soap_read_ns2__AttributeSupplierResponseType(soap*, ns2__AttributeSupplierResponseType*) deserialize from a stream
/// - int soap_write_ns2__AttributeSupplierResponseType(soap*, ns2__AttributeSupplierResponseType*) serialize to a stream
/// - ns2__AttributeSupplierResponseType* ns2__AttributeSupplierResponseType::soap_dup(soap*) returns deep copy of ns2__AttributeSupplierResponseType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__AttributeSupplierResponseType::soap_del() deep deletes ns2__AttributeSupplierResponseType data members, use only after ns2__AttributeSupplierResponseType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__AttributeSupplierResponseType
{ public:
/// Vector of ns3__AttributeSupplierType* of length 0..unbounded.
    std::vector<ns3__AttributeSupplierType*> AttributeSupplier              0;
/// Element "ErrorMessage" of XSD type xs:string.
    std::string*                         ErrorMessage                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeType is a complexType.
///
/// class ns3__AttributeType operations:
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*) allocate
/// - ns3__AttributeType* soap_new_ns3__AttributeType(soap*, int num) allocate array
/// - ns3__AttributeType* soap_new_req_ns3__AttributeType(soap*, ...) allocate, set required members
/// - ns3__AttributeType* soap_new_set_ns3__AttributeType(soap*, ...) allocate, set all public members
/// - ns3__AttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__AttributeType(soap*, ns3__AttributeType*) deserialize from a stream
/// - int soap_write_ns3__AttributeType(soap*, ns3__AttributeType*) serialize to a stream
/// - ns3__AttributeType* ns3__AttributeType::soap_dup(soap*) returns deep copy of ns3__AttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeType::soap_del() deep deletes ns3__AttributeType data members, use only after ns3__AttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeType
{ public:
/// Element "AttributeSupplier" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType.
    ns3__AttributeSupplierType*          AttributeSupplier              1;	///< Required element.
/// Element "Date" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DateType.
    ns4__DateType                        Date                           1;	///< Required element.
/// Element "Validity" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ValidityType.
    ns4__ValidityType                    Validity                       1;	///< Required element.
/// Element "PersonalData" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType.
    ns3__PersonalDataType*               PersonalData                   1;	///< Required element.
/// Element "MainAttribute" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":MainAttributeType.
    ns3__MainAttributeType*              MainAttribute                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeSupplierType is a complexType.
///
/// class ns3__AttributeSupplierType operations:
/// - ns3__AttributeSupplierType* soap_new_ns3__AttributeSupplierType(soap*) allocate
/// - ns3__AttributeSupplierType* soap_new_ns3__AttributeSupplierType(soap*, int num) allocate array
/// - ns3__AttributeSupplierType* soap_new_req_ns3__AttributeSupplierType(soap*, ...) allocate, set required members
/// - ns3__AttributeSupplierType* soap_new_set_ns3__AttributeSupplierType(soap*, ...) allocate, set all public members
/// - ns3__AttributeSupplierType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__AttributeSupplierType(soap*, ns3__AttributeSupplierType*) deserialize from a stream
/// - int soap_write_ns3__AttributeSupplierType(soap*, ns3__AttributeSupplierType*) serialize to a stream
/// - ns3__AttributeSupplierType* ns3__AttributeSupplierType::soap_dup(soap*) returns deep copy of ns3__AttributeSupplierType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__AttributeSupplierType::soap_del() deep deletes ns3__AttributeSupplierType data members, use only after ns3__AttributeSupplierType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__AttributeSupplierType
{ public:
/// Element "Id" of XSD type xs:anyURI.
    xsd__anyURI                          Id                             1;	///< Required element.
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":PersonalDataType is a complexType.
///
/// class ns3__PersonalDataType operations:
/// - ns3__PersonalDataType* soap_new_ns3__PersonalDataType(soap*) allocate
/// - ns3__PersonalDataType* soap_new_ns3__PersonalDataType(soap*, int num) allocate array
/// - ns3__PersonalDataType* soap_new_req_ns3__PersonalDataType(soap*, ...) allocate, set required members
/// - ns3__PersonalDataType* soap_new_set_ns3__PersonalDataType(soap*, ...) allocate, set all public members
/// - ns3__PersonalDataType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__PersonalDataType(soap*, ns3__PersonalDataType*) deserialize from a stream
/// - int soap_write_ns3__PersonalDataType(soap*, ns3__PersonalDataType*) serialize to a stream
/// - ns3__PersonalDataType* ns3__PersonalDataType::soap_dup(soap*) returns deep copy of ns3__PersonalDataType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__PersonalDataType::soap_del() deep deletes ns3__PersonalDataType data members, use only after ns3__PersonalDataType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__PersonalDataType
{ public:
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// Element "NIC" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NICType.
    ns4__NICType                         NIC                            1;	///< Required element.
/// Element "ExtraIDList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDListType.
    ns3__ExtraIDListType*                ExtraIDList                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDListType is a complexType.
///
/// class ns3__ExtraIDListType operations:
/// - ns3__ExtraIDListType* soap_new_ns3__ExtraIDListType(soap*) allocate
/// - ns3__ExtraIDListType* soap_new_ns3__ExtraIDListType(soap*, int num) allocate array
/// - ns3__ExtraIDListType* soap_new_req_ns3__ExtraIDListType(soap*, ...) allocate, set required members
/// - ns3__ExtraIDListType* soap_new_set_ns3__ExtraIDListType(soap*, ...) allocate, set all public members
/// - ns3__ExtraIDListType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__ExtraIDListType(soap*, ns3__ExtraIDListType*) deserialize from a stream
/// - int soap_write_ns3__ExtraIDListType(soap*, ns3__ExtraIDListType*) serialize to a stream
/// - ns3__ExtraIDListType* ns3__ExtraIDListType::soap_dup(soap*) returns deep copy of ns3__ExtraIDListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExtraIDListType::soap_del() deep deletes ns3__ExtraIDListType data members, use only after ns3__ExtraIDListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExtraIDListType
{ public:
/// Vector of ns3__ExtraIDType* of length 1..unbounded.
    std::vector<ns3__ExtraIDType*      > ExtraID                        1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ExtraIDType is a complexType.
///
/// class ns3__ExtraIDType operations:
/// - ns3__ExtraIDType* soap_new_ns3__ExtraIDType(soap*) allocate
/// - ns3__ExtraIDType* soap_new_ns3__ExtraIDType(soap*, int num) allocate array
/// - ns3__ExtraIDType* soap_new_req_ns3__ExtraIDType(soap*, ...) allocate, set required members
/// - ns3__ExtraIDType* soap_new_set_ns3__ExtraIDType(soap*, ...) allocate, set all public members
/// - ns3__ExtraIDType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__ExtraIDType(soap*, ns3__ExtraIDType*) deserialize from a stream
/// - int soap_write_ns3__ExtraIDType(soap*, ns3__ExtraIDType*) serialize to a stream
/// - ns3__ExtraIDType* ns3__ExtraIDType::soap_dup(soap*) returns deep copy of ns3__ExtraIDType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ExtraIDType::soap_del() deep deletes ns3__ExtraIDType data members, use only after ns3__ExtraIDType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ExtraIDType
{ public:
/// Element "Name" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":NameType.
    ns4__NameType                        Name                           1;	///< Required element.
/// Element "Value" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ExtraIDValueType.
    ns4__ExtraIDValueType                Value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":MainAttributeType is a complexType.
///
/// class ns3__MainAttributeType operations:
/// - ns3__MainAttributeType* soap_new_ns3__MainAttributeType(soap*) allocate
/// - ns3__MainAttributeType* soap_new_ns3__MainAttributeType(soap*, int num) allocate array
/// - ns3__MainAttributeType* soap_new_req_ns3__MainAttributeType(soap*, ...) allocate, set required members
/// - ns3__MainAttributeType* soap_new_set_ns3__MainAttributeType(soap*, ...) allocate, set all public members
/// - ns3__MainAttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__MainAttributeType(soap*, ns3__MainAttributeType*) deserialize from a stream
/// - int soap_write_ns3__MainAttributeType(soap*, ns3__MainAttributeType*) serialize to a stream
/// - ns3__MainAttributeType* ns3__MainAttributeType::soap_dup(soap*) returns deep copy of ns3__MainAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MainAttributeType::soap_del() deep deletes ns3__MainAttributeType data members, use only after ns3__MainAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__MainAttributeType
{ public:
/// Element "AttributeID" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType.
    ns4__AttributeIDType                 AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType.
    ns4__DescriptionType*                Description                    0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType.
    ns3__LegalActListType*               LegalActList                   0;	///< Optional element.
/// Element "SubAttributeList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeListType.
    ns3__SubAttributeListType*           SubAttributeList               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType is a complexType.
///
/// class ns3__LegalActListType operations:
/// - ns3__LegalActListType* soap_new_ns3__LegalActListType(soap*) allocate
/// - ns3__LegalActListType* soap_new_ns3__LegalActListType(soap*, int num) allocate array
/// - ns3__LegalActListType* soap_new_req_ns3__LegalActListType(soap*, ...) allocate, set required members
/// - ns3__LegalActListType* soap_new_set_ns3__LegalActListType(soap*, ...) allocate, set all public members
/// - ns3__LegalActListType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__LegalActListType(soap*, ns3__LegalActListType*) deserialize from a stream
/// - int soap_write_ns3__LegalActListType(soap*, ns3__LegalActListType*) serialize to a stream
/// - ns3__LegalActListType* ns3__LegalActListType::soap_dup(soap*) returns deep copy of ns3__LegalActListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__LegalActListType::soap_del() deep deletes ns3__LegalActListType data members, use only after ns3__LegalActListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__LegalActListType
{ public:
/// Vector of ns4__LegalActType of length 1..unbounded.
    std::vector<ns4__LegalActType      > LegalAct                       1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeListType is a complexType.
///
/// class ns3__SubAttributeListType operations:
/// - ns3__SubAttributeListType* soap_new_ns3__SubAttributeListType(soap*) allocate
/// - ns3__SubAttributeListType* soap_new_ns3__SubAttributeListType(soap*, int num) allocate array
/// - ns3__SubAttributeListType* soap_new_req_ns3__SubAttributeListType(soap*, ...) allocate, set required members
/// - ns3__SubAttributeListType* soap_new_set_ns3__SubAttributeListType(soap*, ...) allocate, set all public members
/// - ns3__SubAttributeListType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__SubAttributeListType(soap*, ns3__SubAttributeListType*) deserialize from a stream
/// - int soap_write_ns3__SubAttributeListType(soap*, ns3__SubAttributeListType*) serialize to a stream
/// - ns3__SubAttributeListType* ns3__SubAttributeListType::soap_dup(soap*) returns deep copy of ns3__SubAttributeListType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubAttributeListType::soap_del() deep deletes ns3__SubAttributeListType data members, use only after ns3__SubAttributeListType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubAttributeListType
{ public:
/// Vector of ns3__SubAttributeType* of length 1..unbounded.
    std::vector<ns3__SubAttributeType* > SubAttribute                   1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SubAttributeType is a complexType.
///
/// class ns3__SubAttributeType operations:
/// - ns3__SubAttributeType* soap_new_ns3__SubAttributeType(soap*) allocate
/// - ns3__SubAttributeType* soap_new_ns3__SubAttributeType(soap*, int num) allocate array
/// - ns3__SubAttributeType* soap_new_req_ns3__SubAttributeType(soap*, ...) allocate, set required members
/// - ns3__SubAttributeType* soap_new_set_ns3__SubAttributeType(soap*, ...) allocate, set all public members
/// - ns3__SubAttributeType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__SubAttributeType(soap*, ns3__SubAttributeType*) deserialize from a stream
/// - int soap_write_ns3__SubAttributeType(soap*, ns3__SubAttributeType*) serialize to a stream
/// - ns3__SubAttributeType* ns3__SubAttributeType::soap_dup(soap*) returns deep copy of ns3__SubAttributeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__SubAttributeType::soap_del() deep deletes ns3__SubAttributeType data members, use only after ns3__SubAttributeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__SubAttributeType
{ public:
/// Element "AttributeID" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":AttributeIDType.
    ns4__AttributeIDType                 AttributeID                    1;	///< Required element.
/// Element "Description" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":DescriptionType.
    ns4__DescriptionType*                Description                    0;	///< Optional element.
/// Element "Value" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":SubAttributeValueType.
    ns4__SubAttributeValueType*          Value                          0;	///< Optional element.
/// Element "LegalActList" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":LegalActListType.
    ns3__LegalActListType*               LegalActList                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":ResponseCodeStatusType is a complexType.
///
/// class ns3__ResponseCodeStatusType operations:
/// - ns3__ResponseCodeStatusType* soap_new_ns3__ResponseCodeStatusType(soap*) allocate
/// - ns3__ResponseCodeStatusType* soap_new_ns3__ResponseCodeStatusType(soap*, int num) allocate array
/// - ns3__ResponseCodeStatusType* soap_new_req_ns3__ResponseCodeStatusType(soap*, ...) allocate, set required members
/// - ns3__ResponseCodeStatusType* soap_new_set_ns3__ResponseCodeStatusType(soap*, ...) allocate, set all public members
/// - ns3__ResponseCodeStatusType::soap_default(soap*) reset members to default
/// - int soap_read_ns3__ResponseCodeStatusType(soap*, ns3__ResponseCodeStatusType*) deserialize from a stream
/// - int soap_write_ns3__ResponseCodeStatusType(soap*, ns3__ResponseCodeStatusType*) serialize to a stream
/// - ns3__ResponseCodeStatusType* ns3__ResponseCodeStatusType::soap_dup(soap*) returns deep copy of ns3__ResponseCodeStatusType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ResponseCodeStatusType::soap_del() deep deletes ns3__ResponseCodeStatusType data members, use only after ns3__ResponseCodeStatusType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns3__ResponseCodeStatusType
{ public:
/// Element "Code" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeType.
    ns4__ResponseCodeType                Code                           1;	///< Required element.
/// Element "Message" of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Types":ResponseCodeMessage.
    ns4__ResponseCodeMessage*            Message                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponse of XSD type "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService":AttributeSupplierResponseType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":Attribute of XSD type "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":AttributeType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute":SignatureAttribute of XSD type "http://www.w3.org/2000/09/xmldsig#":SignatureType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.cartaodecidadao.pt/ccc/commons/messages/Types                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	AttributeSupplierBinding 
//gsoap ns1  service type:	AttributeSupplierService 
//gsoap ns1  service port:	http://localhost:8080/DSS/ASService 
//gsoap ns1  service namespace:	http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage AttributeSupplierService Definitions

@section AttributeSupplierService_bindings Service Bindings

  - @ref AttributeSupplierBinding

@section AttributeSupplierService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AttributeSupplierBinding Binding "AttributeSupplierBinding"

@section AttributeSupplierBinding_operations Operations of Binding "AttributeSupplierBinding"

  - @ref __ns1__AttributeSuppliers

@section AttributeSupplierBinding_ports Endpoints of Binding "AttributeSupplierBinding"

  - http://localhost:8080/DSS/ASService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AttributeSupplierBinding                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AttributeSuppliers                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AttributeSuppliers" of service binding "AttributeSupplierBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList"

  - Addressing input action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList"

  - Addressing output action: "http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AttributeSuppliers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    ns2__AttributeSupplierResponseType &ns2__AttributeSupplierResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AttributeSuppliers(
    struct soap *soap,
    // input parameters:
    // output parameters:
    ns2__AttributeSupplierResponseType &ns2__AttributeSupplierResponse
  );
@endcode

C++ proxy class (defined in soapAttributeSupplierBindingProxy.h):
@code
  class AttributeSupplierBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAttributeSupplierBindingService.h):
@code
  class AttributeSupplierBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AttributeSuppliers SOAP
//gsoap ns1  service method-style:	AttributeSuppliers document
//gsoap ns1  service method-encoding:	AttributeSuppliers literal
//gsoap ns1  service method-input-action:	AttributeSuppliers http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierList
//gsoap ns1  service method-output-action:	AttributeSuppliers http://www.cartaodecidadao.pt/CCC/Attribute/AttributeSupplier/services/AttributeSupplierService/AttributeSupplierListResponse
int __ns1__AttributeSuppliers(
    ns2__AttributeSupplierResponseType &ns2__AttributeSupplierResponse	///< Output parameter
);

/**

@page AttributeSupplierBinding Binding "AttributeSupplierBinding"

@section AttributeSupplierBinding_policy_enablers Policy Enablers of Binding "AttributeSupplierBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/services/AttributeSupplierService"

@section ns2 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/sccc/messages/AttributeSupplierService"

  - <ns2:AttributeSupplierResponse> (use wsdl2h option -g to auto-generate type _ns2__AttributeSupplierResponse)

@section ns3 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/Attribute"

  - <ns3:Attribute> (use wsdl2h option -g to auto-generate type _ns3__Attribute)

  - <ns3:SignatureAttribute> (use wsdl2h option -g to auto-generate type _ns3__SignatureAttribute)

@section ns4 Top-level root elements of schema "http://www.cartaodecidadao.pt/ccc/commons/messages/Types"

*/

/* End of SCAP-ASService.h */
