/* soapH.h
   Generated by gSOAP 2.8.28 from SCAP-ASService.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( ((data) ? (soap_default_byte(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( ((data) ? (soap_default_int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ULONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_ULONG64
#define soap_write_ULONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ULONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_ULONG64
#define soap_read_ULONG64(soap, data) ( ((data) ? (soap_default_ULONG64(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ULONG64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__FaultCodeType
#define SOAP_TYPE_wsc__FaultCodeType (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap*, const char*, int, const enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap*, enum wsc__FaultCodeType);
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap*, const enum wsc__FaultCodeType *, const char*, const char*);

#ifndef soap_write_wsc__FaultCodeType
#define soap_write_wsc__FaultCodeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_wsc__FaultCodeType(soap, data, "wsc:FaultCodeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *, const char*, const char*);

#ifndef soap_read_wsc__FaultCodeType
#define soap_read_wsc__FaultCodeType(soap, data) ( ((data) ? (soap_default_wsc__FaultCodeType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsc__FaultCodeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap*, const char*, int, const enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap*, enum wsse__FaultcodeEnum);
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap*, const enum wsse__FaultcodeEnum *, const char*, const char*);

#ifndef soap_write_wsse__FaultcodeEnum
#define soap_write_wsse__FaultcodeEnum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_wsse__FaultcodeEnum(soap, data, "wsse:FaultcodeEnum", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *, const char*, const char*);

#ifndef soap_read_wsse__FaultcodeEnum
#define soap_read_wsse__FaultcodeEnum(soap, data) ( ((data) ? (soap_default_wsse__FaultcodeEnum(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsse__FaultcodeEnum(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap*, const char*, int, const enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap*, enum wsu__tTimestampFault);
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap*, const enum wsu__tTimestampFault *, const char*, const char*);

#ifndef soap_write_wsu__tTimestampFault
#define soap_write_wsu__tTimestampFault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_wsu__tTimestampFault(soap, data, "wsu:tTimestampFault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *, const char*, const char*);

#ifndef soap_read_wsu__tTimestampFault
#define soap_read_wsu__tTimestampFault(soap, data) ( ((data) ? (soap_default_wsu__tTimestampFault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsu__tTimestampFault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__ResponseCodeMessage
#define SOAP_TYPE_ns4__ResponseCodeMessage (132)
#endif

#define soap_default_ns4__ResponseCodeMessage(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ResponseCodeMessage(struct soap*, const std::string *);

#define soap_ns4__ResponseCodeMessage2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ResponseCodeMessage(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ResponseCodeMessage soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ResponseCodeMessage(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__ResponseCodeMessage soap_instantiate_std__string


#define soap_new_ns4__ResponseCodeMessage soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ResponseCodeMessage(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__ResponseCodeMessage
#define soap_write_ns4__ResponseCodeMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__ResponseCodeMessage(soap, data), 0) || soap_put_ns4__ResponseCodeMessage(soap, data, "ns4:ResponseCodeMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ResponseCodeMessage(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__ResponseCodeMessage
#define soap_read_ns4__ResponseCodeMessage(soap, data) ( ((data) ? (soap_default_ns4__ResponseCodeMessage(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__ResponseCodeMessage(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__ResponseCodeType
#define SOAP_TYPE_ns4__ResponseCodeType (131)
#endif

#define soap_default_ns4__ResponseCodeType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ResponseCodeType(struct soap*, const std::string *);

#define soap_ns4__ResponseCodeType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ResponseCodeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ResponseCodeType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ResponseCodeType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__ResponseCodeType soap_instantiate_std__string


#define soap_new_ns4__ResponseCodeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ResponseCodeType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__ResponseCodeType
#define soap_write_ns4__ResponseCodeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__ResponseCodeType(soap, data), 0) || soap_put_ns4__ResponseCodeType(soap, data, "ns4:ResponseCodeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ResponseCodeType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__ResponseCodeType
#define soap_read_ns4__ResponseCodeType(soap, data) ( ((data) ? (soap_default_ns4__ResponseCodeType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__ResponseCodeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__DescriptionType
#define SOAP_TYPE_ns4__DescriptionType (130)
#endif

#define soap_default_ns4__DescriptionType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__DescriptionType(struct soap*, const std::string *);

#define soap_ns4__DescriptionType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__DescriptionType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__DescriptionType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__DescriptionType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__DescriptionType soap_instantiate_std__string


#define soap_new_ns4__DescriptionType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__DescriptionType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__DescriptionType
#define soap_write_ns4__DescriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__DescriptionType(soap, data), 0) || soap_put_ns4__DescriptionType(soap, data, "ns4:DescriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__DescriptionType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__DescriptionType
#define soap_read_ns4__DescriptionType(soap, data) ( ((data) ? (soap_default_ns4__DescriptionType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__DescriptionType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__SubAttributeValueType
#define SOAP_TYPE_ns4__SubAttributeValueType (129)
#endif

#define soap_default_ns4__SubAttributeValueType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SubAttributeValueType(struct soap*, const std::string *);

#define soap_ns4__SubAttributeValueType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SubAttributeValueType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__SubAttributeValueType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__SubAttributeValueType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__SubAttributeValueType soap_instantiate_std__string


#define soap_new_ns4__SubAttributeValueType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SubAttributeValueType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__SubAttributeValueType
#define soap_write_ns4__SubAttributeValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__SubAttributeValueType(soap, data), 0) || soap_put_ns4__SubAttributeValueType(soap, data, "ns4:SubAttributeValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__SubAttributeValueType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__SubAttributeValueType
#define soap_read_ns4__SubAttributeValueType(soap, data) ( ((data) ? (soap_default_ns4__SubAttributeValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__SubAttributeValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__LegalActType
#define SOAP_TYPE_ns4__LegalActType (128)
#endif

#define soap_default_ns4__LegalActType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__LegalActType(struct soap*, const std::string *);

#define soap_ns4__LegalActType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__LegalActType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__LegalActType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__LegalActType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__LegalActType soap_instantiate_std__string


#define soap_new_ns4__LegalActType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__LegalActType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__LegalActType
#define soap_write_ns4__LegalActType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__LegalActType(soap, data), 0) || soap_put_ns4__LegalActType(soap, data, "ns4:LegalActType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__LegalActType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__LegalActType
#define soap_read_ns4__LegalActType(soap, data) ( ((data) ? (soap_default_ns4__LegalActType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__LegalActType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__AttributeIDType
#define SOAP_TYPE_ns4__AttributeIDType (127)
#endif

#define soap_default_ns4__AttributeIDType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__AttributeIDType(struct soap*, const std::string *);

#define soap_ns4__AttributeIDType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__AttributeIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__AttributeIDType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__AttributeIDType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__AttributeIDType soap_instantiate_std__string


#define soap_new_ns4__AttributeIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__AttributeIDType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__AttributeIDType
#define soap_write_ns4__AttributeIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__AttributeIDType(soap, data), 0) || soap_put_ns4__AttributeIDType(soap, data, "ns4:AttributeIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__AttributeIDType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__AttributeIDType
#define soap_read_ns4__AttributeIDType(soap, data) ( ((data) ? (soap_default_ns4__AttributeIDType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__AttributeIDType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__ExtraIDValueType
#define SOAP_TYPE_ns4__ExtraIDValueType (126)
#endif

#define soap_default_ns4__ExtraIDValueType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ExtraIDValueType(struct soap*, const std::string *);

#define soap_ns4__ExtraIDValueType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ExtraIDValueType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ExtraIDValueType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ExtraIDValueType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__ExtraIDValueType soap_instantiate_std__string


#define soap_new_ns4__ExtraIDValueType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ExtraIDValueType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__ExtraIDValueType
#define soap_write_ns4__ExtraIDValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__ExtraIDValueType(soap, data), 0) || soap_put_ns4__ExtraIDValueType(soap, data, "ns4:ExtraIDValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ExtraIDValueType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__ExtraIDValueType
#define soap_read_ns4__ExtraIDValueType(soap, data) ( ((data) ? (soap_default_ns4__ExtraIDValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__ExtraIDValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__CompanyNameType
#define SOAP_TYPE_ns4__CompanyNameType (125)
#endif

#define soap_default_ns4__CompanyNameType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__CompanyNameType(struct soap*, const std::string *);

#define soap_ns4__CompanyNameType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CompanyNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__CompanyNameType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__CompanyNameType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__CompanyNameType soap_instantiate_std__string


#define soap_new_ns4__CompanyNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__CompanyNameType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__CompanyNameType
#define soap_write_ns4__CompanyNameType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__CompanyNameType(soap, data), 0) || soap_put_ns4__CompanyNameType(soap, data, "ns4:CompanyNameType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__CompanyNameType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__CompanyNameType
#define soap_read_ns4__CompanyNameType(soap, data) ( ((data) ? (soap_default_ns4__CompanyNameType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__CompanyNameType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__NIPCType
#define SOAP_TYPE_ns4__NIPCType (124)
#endif

#define soap_default_ns4__NIPCType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NIPCType(struct soap*, const std::string *);

#define soap_ns4__NIPCType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NIPCType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__NIPCType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__NIPCType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__NIPCType soap_instantiate_std__string


#define soap_new_ns4__NIPCType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NIPCType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__NIPCType
#define soap_write_ns4__NIPCType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__NIPCType(soap, data), 0) || soap_put_ns4__NIPCType(soap, data, "ns4:NIPCType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__NIPCType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__NIPCType
#define soap_read_ns4__NIPCType(soap, data) ( ((data) ? (soap_default_ns4__NIPCType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__NIPCType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__NICType
#define SOAP_TYPE_ns4__NICType (123)
#endif

#define soap_default_ns4__NICType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NICType(struct soap*, const std::string *);

#define soap_ns4__NICType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NICType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__NICType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__NICType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__NICType soap_instantiate_std__string


#define soap_new_ns4__NICType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NICType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__NICType
#define soap_write_ns4__NICType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__NICType(soap, data), 0) || soap_put_ns4__NICType(soap, data, "ns4:NICType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__NICType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__NICType
#define soap_read_ns4__NICType(soap, data) ( ((data) ? (soap_default_ns4__NICType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__NICType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* ns4__DateType is a typedef synonym for xsd__date */

#ifndef SOAP_TYPE_ns4__DateType
#define SOAP_TYPE_ns4__DateType (122)
#endif

#define soap_default_ns4__DateType(soap, a) soap_default_xsd__date(soap, a)


#define soap_serialize_ns4__DateType soap_serialize_xsd__date


#define soap_ns4__DateType2s soap_xsd__date2s


#define soap_out_ns4__DateType soap_out_xsd__date


#define soap_s2ns4__DateType soap_s2xsd__date


#define soap_in_ns4__DateType soap_in_xsd__date


#define soap_instantiate_ns4__DateType soap_instantiate_xsd__date


#define soap_new_ns4__DateType soap_new_xsd__date


#define soap_put_ns4__DateType soap_put_xsd__date


#define soap_write_ns4__DateType soap_write_xsd__date


#define soap_get_ns4__DateType soap_get_xsd__date


#define soap_read_ns4__DateType soap_read_xsd__date

/* ns4__ValidityType is a typedef synonym for xsd__date */

#ifndef SOAP_TYPE_ns4__ValidityType
#define SOAP_TYPE_ns4__ValidityType (121)
#endif

#define soap_default_ns4__ValidityType(soap, a) soap_default_xsd__date(soap, a)


#define soap_serialize_ns4__ValidityType soap_serialize_xsd__date


#define soap_ns4__ValidityType2s soap_xsd__date2s


#define soap_out_ns4__ValidityType soap_out_xsd__date


#define soap_s2ns4__ValidityType soap_s2xsd__date


#define soap_in_ns4__ValidityType soap_in_xsd__date


#define soap_instantiate_ns4__ValidityType soap_instantiate_xsd__date


#define soap_new_ns4__ValidityType soap_new_xsd__date


#define soap_put_ns4__ValidityType soap_put_xsd__date


#define soap_write_ns4__ValidityType soap_write_xsd__date


#define soap_get_ns4__ValidityType soap_get_xsd__date


#define soap_read_ns4__ValidityType soap_read_xsd__date


#ifndef SOAP_TYPE_ns4__NameType
#define SOAP_TYPE_ns4__NameType (120)
#endif

#define soap_default_ns4__NameType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NameType(struct soap*, const std::string *);

#define soap_ns4__NameType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__NameType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__NameType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__NameType soap_instantiate_std__string


#define soap_new_ns4__NameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NameType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__NameType
#define soap_write_ns4__NameType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__NameType(soap, data), 0) || soap_put_ns4__NameType(soap, data, "ns4:NameType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__NameType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__NameType
#define soap_read_ns4__NameType(soap, data) ( ((data) ? (soap_default_ns4__NameType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__NameType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns4__ProcessIDType
#define SOAP_TYPE_ns4__ProcessIDType (119)
#endif

#define soap_default_ns4__ProcessIDType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ProcessIDType(struct soap*, const std::string *);

#define soap_ns4__ProcessIDType2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ProcessIDType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns4__ProcessIDType soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns4__ProcessIDType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns4__ProcessIDType soap_instantiate_std__string


#define soap_new_ns4__ProcessIDType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ProcessIDType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns4__ProcessIDType
#define soap_write_ns4__ProcessIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns4__ProcessIDType(soap, data), 0) || soap_put_ns4__ProcessIDType(soap, data, "ns4:ProcessIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns4__ProcessIDType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns4__ProcessIDType
#define soap_read_ns4__ProcessIDType(soap, data) ( ((data) ? (soap_default_ns4__ProcessIDType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns4__ProcessIDType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__ResponseCodeStatusType
#define SOAP_TYPE_ns3__ResponseCodeStatusType (118)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ResponseCodeStatusType(struct soap*, const char*, int, const ns3__ResponseCodeStatusType *, const char*);
SOAP_FMAC3 ns3__ResponseCodeStatusType * SOAP_FMAC4 soap_in_ns3__ResponseCodeStatusType(struct soap*, const char*, ns3__ResponseCodeStatusType *, const char*);
SOAP_FMAC1 ns3__ResponseCodeStatusType * SOAP_FMAC2 soap_instantiate_ns3__ResponseCodeStatusType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ResponseCodeStatusType * soap_new_ns3__ResponseCodeStatusType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ResponseCodeStatusType(soap, n, NULL, NULL, NULL); }

inline ns3__ResponseCodeStatusType * soap_new_req_ns3__ResponseCodeStatusType(
	struct soap *soap,
	const std::string& Code)
{	ns3__ResponseCodeStatusType *_p = soap_new_ns3__ResponseCodeStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ResponseCodeStatusType::Code = Code;
	}
	return _p;
}

inline ns3__ResponseCodeStatusType * soap_new_set_ns3__ResponseCodeStatusType(
	struct soap *soap,
	const std::string& Code,
	std::string *Message)
{	ns3__ResponseCodeStatusType *_p = soap_new_ns3__ResponseCodeStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ResponseCodeStatusType::Code = Code;
		_p->ns3__ResponseCodeStatusType::Message = Message;
	}
	return _p;
}

#ifndef soap_write_ns3__ResponseCodeStatusType
#define soap_write_ns3__ResponseCodeStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ResponseCodeStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ResponseCodeStatusType * SOAP_FMAC4 soap_get_ns3__ResponseCodeStatusType(struct soap*, ns3__ResponseCodeStatusType *, const char*, const char*);

#ifndef soap_read_ns3__ResponseCodeStatusType
#define soap_read_ns3__ResponseCodeStatusType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__ResponseCodeStatusType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__SubAttributeType
#define SOAP_TYPE_ns3__SubAttributeType (117)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubAttributeType(struct soap*, const char*, int, const ns3__SubAttributeType *, const char*);
SOAP_FMAC3 ns3__SubAttributeType * SOAP_FMAC4 soap_in_ns3__SubAttributeType(struct soap*, const char*, ns3__SubAttributeType *, const char*);
SOAP_FMAC1 ns3__SubAttributeType * SOAP_FMAC2 soap_instantiate_ns3__SubAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubAttributeType * soap_new_ns3__SubAttributeType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__SubAttributeType(soap, n, NULL, NULL, NULL); }

inline ns3__SubAttributeType * soap_new_req_ns3__SubAttributeType(
	struct soap *soap,
	const std::string& AttributeID)
{	ns3__SubAttributeType *_p = soap_new_ns3__SubAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline ns3__SubAttributeType * soap_new_set_ns3__SubAttributeType(
	struct soap *soap,
	const std::string& AttributeID,
	std::string *Description,
	std::string *Value,
	ns3__LegalActListType *LegalActList)
{	ns3__SubAttributeType *_p = soap_new_ns3__SubAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeType::AttributeID = AttributeID;
		_p->ns3__SubAttributeType::Description = Description;
		_p->ns3__SubAttributeType::Value = Value;
		_p->ns3__SubAttributeType::LegalActList = LegalActList;
	}
	return _p;
}

#ifndef soap_write_ns3__SubAttributeType
#define soap_write_ns3__SubAttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubAttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubAttributeType * SOAP_FMAC4 soap_get_ns3__SubAttributeType(struct soap*, ns3__SubAttributeType *, const char*, const char*);

#ifndef soap_read_ns3__SubAttributeType
#define soap_read_ns3__SubAttributeType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__SubAttributeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__SubAttributeListType
#define SOAP_TYPE_ns3__SubAttributeListType (116)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SubAttributeListType(struct soap*, const char*, int, const ns3__SubAttributeListType *, const char*);
SOAP_FMAC3 ns3__SubAttributeListType * SOAP_FMAC4 soap_in_ns3__SubAttributeListType(struct soap*, const char*, ns3__SubAttributeListType *, const char*);
SOAP_FMAC1 ns3__SubAttributeListType * SOAP_FMAC2 soap_instantiate_ns3__SubAttributeListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SubAttributeListType * soap_new_ns3__SubAttributeListType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__SubAttributeListType(soap, n, NULL, NULL, NULL); }

inline ns3__SubAttributeListType * soap_new_req_ns3__SubAttributeListType(
	struct soap *soap,
	const std::vector<ns3__SubAttributeType *> & SubAttribute)
{	ns3__SubAttributeListType *_p = soap_new_ns3__SubAttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeListType::SubAttribute = SubAttribute;
	}
	return _p;
}

inline ns3__SubAttributeListType * soap_new_set_ns3__SubAttributeListType(
	struct soap *soap,
	const std::vector<ns3__SubAttributeType *> & SubAttribute)
{	ns3__SubAttributeListType *_p = soap_new_ns3__SubAttributeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__SubAttributeListType::SubAttribute = SubAttribute;
	}
	return _p;
}

#ifndef soap_write_ns3__SubAttributeListType
#define soap_write_ns3__SubAttributeListType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:SubAttributeListType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubAttributeListType * SOAP_FMAC4 soap_get_ns3__SubAttributeListType(struct soap*, ns3__SubAttributeListType *, const char*, const char*);

#ifndef soap_read_ns3__SubAttributeListType
#define soap_read_ns3__SubAttributeListType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__SubAttributeListType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__LegalActListType
#define SOAP_TYPE_ns3__LegalActListType (115)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LegalActListType(struct soap*, const char*, int, const ns3__LegalActListType *, const char*);
SOAP_FMAC3 ns3__LegalActListType * SOAP_FMAC4 soap_in_ns3__LegalActListType(struct soap*, const char*, ns3__LegalActListType *, const char*);
SOAP_FMAC1 ns3__LegalActListType * SOAP_FMAC2 soap_instantiate_ns3__LegalActListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__LegalActListType * soap_new_ns3__LegalActListType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__LegalActListType(soap, n, NULL, NULL, NULL); }

inline ns3__LegalActListType * soap_new_req_ns3__LegalActListType(
	struct soap *soap,
	const std::vector<std::string> & LegalAct)
{	ns3__LegalActListType *_p = soap_new_ns3__LegalActListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__LegalActListType::LegalAct = LegalAct;
	}
	return _p;
}

inline ns3__LegalActListType * soap_new_set_ns3__LegalActListType(
	struct soap *soap,
	const std::vector<std::string> & LegalAct)
{	ns3__LegalActListType *_p = soap_new_ns3__LegalActListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__LegalActListType::LegalAct = LegalAct;
	}
	return _p;
}

#ifndef soap_write_ns3__LegalActListType
#define soap_write_ns3__LegalActListType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:LegalActListType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__LegalActListType * SOAP_FMAC4 soap_get_ns3__LegalActListType(struct soap*, ns3__LegalActListType *, const char*, const char*);

#ifndef soap_read_ns3__LegalActListType
#define soap_read_ns3__LegalActListType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__LegalActListType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__MainAttributeType
#define SOAP_TYPE_ns3__MainAttributeType (114)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MainAttributeType(struct soap*, const char*, int, const ns3__MainAttributeType *, const char*);
SOAP_FMAC3 ns3__MainAttributeType * SOAP_FMAC4 soap_in_ns3__MainAttributeType(struct soap*, const char*, ns3__MainAttributeType *, const char*);
SOAP_FMAC1 ns3__MainAttributeType * SOAP_FMAC2 soap_instantiate_ns3__MainAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MainAttributeType * soap_new_ns3__MainAttributeType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__MainAttributeType(soap, n, NULL, NULL, NULL); }

inline ns3__MainAttributeType * soap_new_req_ns3__MainAttributeType(
	struct soap *soap,
	const std::string& AttributeID)
{	ns3__MainAttributeType *_p = soap_new_ns3__MainAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MainAttributeType::AttributeID = AttributeID;
	}
	return _p;
}

inline ns3__MainAttributeType * soap_new_set_ns3__MainAttributeType(
	struct soap *soap,
	const std::string& AttributeID,
	std::string *Description,
	ns3__LegalActListType *LegalActList,
	ns3__SubAttributeListType *SubAttributeList)
{	ns3__MainAttributeType *_p = soap_new_ns3__MainAttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MainAttributeType::AttributeID = AttributeID;
		_p->ns3__MainAttributeType::Description = Description;
		_p->ns3__MainAttributeType::LegalActList = LegalActList;
		_p->ns3__MainAttributeType::SubAttributeList = SubAttributeList;
	}
	return _p;
}

#ifndef soap_write_ns3__MainAttributeType
#define soap_write_ns3__MainAttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:MainAttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MainAttributeType * SOAP_FMAC4 soap_get_ns3__MainAttributeType(struct soap*, ns3__MainAttributeType *, const char*, const char*);

#ifndef soap_read_ns3__MainAttributeType
#define soap_read_ns3__MainAttributeType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__MainAttributeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__ExtraIDType
#define SOAP_TYPE_ns3__ExtraIDType (113)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExtraIDType(struct soap*, const char*, int, const ns3__ExtraIDType *, const char*);
SOAP_FMAC3 ns3__ExtraIDType * SOAP_FMAC4 soap_in_ns3__ExtraIDType(struct soap*, const char*, ns3__ExtraIDType *, const char*);
SOAP_FMAC1 ns3__ExtraIDType * SOAP_FMAC2 soap_instantiate_ns3__ExtraIDType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExtraIDType * soap_new_ns3__ExtraIDType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ExtraIDType(soap, n, NULL, NULL, NULL); }

inline ns3__ExtraIDType * soap_new_req_ns3__ExtraIDType(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{	ns3__ExtraIDType *_p = soap_new_ns3__ExtraIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDType::Name = Name;
		_p->ns3__ExtraIDType::Value = Value;
	}
	return _p;
}

inline ns3__ExtraIDType * soap_new_set_ns3__ExtraIDType(
	struct soap *soap,
	const std::string& Name,
	const std::string& Value)
{	ns3__ExtraIDType *_p = soap_new_ns3__ExtraIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDType::Name = Name;
		_p->ns3__ExtraIDType::Value = Value;
	}
	return _p;
}

#ifndef soap_write_ns3__ExtraIDType
#define soap_write_ns3__ExtraIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ExtraIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ExtraIDType * SOAP_FMAC4 soap_get_ns3__ExtraIDType(struct soap*, ns3__ExtraIDType *, const char*, const char*);

#ifndef soap_read_ns3__ExtraIDType
#define soap_read_ns3__ExtraIDType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__ExtraIDType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__ExtraIDListType
#define SOAP_TYPE_ns3__ExtraIDListType (112)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ExtraIDListType(struct soap*, const char*, int, const ns3__ExtraIDListType *, const char*);
SOAP_FMAC3 ns3__ExtraIDListType * SOAP_FMAC4 soap_in_ns3__ExtraIDListType(struct soap*, const char*, ns3__ExtraIDListType *, const char*);
SOAP_FMAC1 ns3__ExtraIDListType * SOAP_FMAC2 soap_instantiate_ns3__ExtraIDListType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ExtraIDListType * soap_new_ns3__ExtraIDListType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ExtraIDListType(soap, n, NULL, NULL, NULL); }

inline ns3__ExtraIDListType * soap_new_req_ns3__ExtraIDListType(
	struct soap *soap,
	const std::vector<ns3__ExtraIDType *> & ExtraID)
{	ns3__ExtraIDListType *_p = soap_new_ns3__ExtraIDListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDListType::ExtraID = ExtraID;
	}
	return _p;
}

inline ns3__ExtraIDListType * soap_new_set_ns3__ExtraIDListType(
	struct soap *soap,
	const std::vector<ns3__ExtraIDType *> & ExtraID)
{	ns3__ExtraIDListType *_p = soap_new_ns3__ExtraIDListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ExtraIDListType::ExtraID = ExtraID;
	}
	return _p;
}

#ifndef soap_write_ns3__ExtraIDListType
#define soap_write_ns3__ExtraIDListType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:ExtraIDListType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ExtraIDListType * SOAP_FMAC4 soap_get_ns3__ExtraIDListType(struct soap*, ns3__ExtraIDListType *, const char*, const char*);

#ifndef soap_read_ns3__ExtraIDListType
#define soap_read_ns3__ExtraIDListType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__ExtraIDListType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__PersonalDataType
#define SOAP_TYPE_ns3__PersonalDataType (111)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PersonalDataType(struct soap*, const char*, int, const ns3__PersonalDataType *, const char*);
SOAP_FMAC3 ns3__PersonalDataType * SOAP_FMAC4 soap_in_ns3__PersonalDataType(struct soap*, const char*, ns3__PersonalDataType *, const char*);
SOAP_FMAC1 ns3__PersonalDataType * SOAP_FMAC2 soap_instantiate_ns3__PersonalDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PersonalDataType * soap_new_ns3__PersonalDataType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__PersonalDataType(soap, n, NULL, NULL, NULL); }

inline ns3__PersonalDataType * soap_new_req_ns3__PersonalDataType(
	struct soap *soap,
	const std::string& Name,
	const std::string& NIC)
{	ns3__PersonalDataType *_p = soap_new_ns3__PersonalDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PersonalDataType::Name = Name;
		_p->ns3__PersonalDataType::NIC = NIC;
	}
	return _p;
}

inline ns3__PersonalDataType * soap_new_set_ns3__PersonalDataType(
	struct soap *soap,
	const std::string& Name,
	const std::string& NIC,
	ns3__ExtraIDListType *ExtraIDList)
{	ns3__PersonalDataType *_p = soap_new_ns3__PersonalDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PersonalDataType::Name = Name;
		_p->ns3__PersonalDataType::NIC = NIC;
		_p->ns3__PersonalDataType::ExtraIDList = ExtraIDList;
	}
	return _p;
}

#ifndef soap_write_ns3__PersonalDataType
#define soap_write_ns3__PersonalDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:PersonalDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PersonalDataType * SOAP_FMAC4 soap_get_ns3__PersonalDataType(struct soap*, ns3__PersonalDataType *, const char*, const char*);

#ifndef soap_read_ns3__PersonalDataType
#define soap_read_ns3__PersonalDataType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__PersonalDataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__AttributeSupplierType
#define SOAP_TYPE_ns3__AttributeSupplierType (110)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AttributeSupplierType(struct soap*, const char*, int, const ns3__AttributeSupplierType *, const char*);
SOAP_FMAC3 ns3__AttributeSupplierType * SOAP_FMAC4 soap_in_ns3__AttributeSupplierType(struct soap*, const char*, ns3__AttributeSupplierType *, const char*);
SOAP_FMAC1 ns3__AttributeSupplierType * SOAP_FMAC2 soap_instantiate_ns3__AttributeSupplierType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AttributeSupplierType * soap_new_ns3__AttributeSupplierType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__AttributeSupplierType(soap, n, NULL, NULL, NULL); }

inline ns3__AttributeSupplierType * soap_new_req_ns3__AttributeSupplierType(
	struct soap *soap,
	const std::string& Id,
	const std::string& Name)
{	ns3__AttributeSupplierType *_p = soap_new_ns3__AttributeSupplierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeSupplierType::Id = Id;
		_p->ns3__AttributeSupplierType::Name = Name;
	}
	return _p;
}

inline ns3__AttributeSupplierType * soap_new_set_ns3__AttributeSupplierType(
	struct soap *soap,
	const std::string& Id,
	const std::string& Name)
{	ns3__AttributeSupplierType *_p = soap_new_ns3__AttributeSupplierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeSupplierType::Id = Id;
		_p->ns3__AttributeSupplierType::Name = Name;
	}
	return _p;
}

#ifndef soap_write_ns3__AttributeSupplierType
#define soap_write_ns3__AttributeSupplierType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:AttributeSupplierType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__AttributeSupplierType * SOAP_FMAC4 soap_get_ns3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType *, const char*, const char*);

#ifndef soap_read_ns3__AttributeSupplierType
#define soap_read_ns3__AttributeSupplierType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__AttributeSupplierType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns3__AttributeType
#define SOAP_TYPE_ns3__AttributeType (109)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AttributeType(struct soap*, const char*, int, const ns3__AttributeType *, const char*);
SOAP_FMAC3 ns3__AttributeType * SOAP_FMAC4 soap_in_ns3__AttributeType(struct soap*, const char*, ns3__AttributeType *, const char*);
SOAP_FMAC1 ns3__AttributeType * SOAP_FMAC2 soap_instantiate_ns3__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AttributeType * soap_new_ns3__AttributeType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__AttributeType(soap, n, NULL, NULL, NULL); }

inline ns3__AttributeType * soap_new_req_ns3__AttributeType(
	struct soap *soap,
	ns3__AttributeSupplierType *AttributeSupplier,
	const std::string& Date,
	const std::string& Validity,
	ns3__PersonalDataType *PersonalData,
	ns3__MainAttributeType *MainAttribute)
{	ns3__AttributeType *_p = soap_new_ns3__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeType::AttributeSupplier = AttributeSupplier;
		_p->ns3__AttributeType::Date = Date;
		_p->ns3__AttributeType::Validity = Validity;
		_p->ns3__AttributeType::PersonalData = PersonalData;
		_p->ns3__AttributeType::MainAttribute = MainAttribute;
	}
	return _p;
}

inline ns3__AttributeType * soap_new_set_ns3__AttributeType(
	struct soap *soap,
	ns3__AttributeSupplierType *AttributeSupplier,
	const std::string& Date,
	const std::string& Validity,
	ns3__PersonalDataType *PersonalData,
	ns3__MainAttributeType *MainAttribute)
{	ns3__AttributeType *_p = soap_new_ns3__AttributeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AttributeType::AttributeSupplier = AttributeSupplier;
		_p->ns3__AttributeType::Date = Date;
		_p->ns3__AttributeType::Validity = Validity;
		_p->ns3__AttributeType::PersonalData = PersonalData;
		_p->ns3__AttributeType::MainAttribute = MainAttribute;
	}
	return _p;
}

#ifndef soap_write_ns3__AttributeType
#define soap_write_ns3__AttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns3:AttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__AttributeType * SOAP_FMAC4 soap_get_ns3__AttributeType(struct soap*, ns3__AttributeType *, const char*, const char*);

#ifndef soap_read_ns3__AttributeType
#define soap_read_ns3__AttributeType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__AttributeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__AttributeSupplierResponseType
#define SOAP_TYPE_ns2__AttributeSupplierResponseType (108)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AttributeSupplierResponseType(struct soap*, const char*, int, const ns2__AttributeSupplierResponseType *, const char*);
SOAP_FMAC3 ns2__AttributeSupplierResponseType * SOAP_FMAC4 soap_in_ns2__AttributeSupplierResponseType(struct soap*, const char*, ns2__AttributeSupplierResponseType *, const char*);
SOAP_FMAC1 ns2__AttributeSupplierResponseType * SOAP_FMAC2 soap_instantiate_ns2__AttributeSupplierResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AttributeSupplierResponseType * soap_new_ns2__AttributeSupplierResponseType(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AttributeSupplierResponseType(soap, n, NULL, NULL, NULL); }

inline ns2__AttributeSupplierResponseType * soap_new_req_ns2__AttributeSupplierResponseType(
	struct soap *soap)
{	ns2__AttributeSupplierResponseType *_p = soap_new_ns2__AttributeSupplierResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__AttributeSupplierResponseType * soap_new_set_ns2__AttributeSupplierResponseType(
	struct soap *soap,
	const std::vector<ns3__AttributeSupplierType *> & AttributeSupplier,
	std::string *ErrorMessage)
{	ns2__AttributeSupplierResponseType *_p = soap_new_ns2__AttributeSupplierResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__AttributeSupplierResponseType::AttributeSupplier = AttributeSupplier;
		_p->ns2__AttributeSupplierResponseType::ErrorMessage = ErrorMessage;
	}
	return _p;
}

#ifndef soap_write_ns2__AttributeSupplierResponseType
#define soap_write_ns2__AttributeSupplierResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns2:AttributeSupplierResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__AttributeSupplierResponseType * SOAP_FMAC4 soap_get_ns2__AttributeSupplierResponseType(struct soap*, ns2__AttributeSupplierResponseType *, const char*, const char*);

#ifndef soap_read_ns2__AttributeSupplierResponseType
#define soap_read_ns2__AttributeSupplierResponseType(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__AttributeSupplierResponseType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (107)
#endif

#define soap_default_xsd__date(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, const std::string *);

#define soap_xsd__date2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__date soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__date soap_instantiate_std__string


#define soap_new_xsd__date soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__date
#define soap_write_xsd__date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__date(soap, data), 0) || soap_put_xsd__date(soap, data, "xsd:date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__date
#define soap_read_xsd__date(soap, data) ( ((data) ? (soap_default_xsd__date(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__date(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (106)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data), 0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( ((data) ? (soap_default_xsd__anyURI(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( ((data) ? (soap_default_std__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_std__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE___ns1__AttributeSuppliers
#define SOAP_TYPE___ns1__AttributeSuppliers (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AttributeSuppliers(struct soap*, struct __ns1__AttributeSuppliers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AttributeSuppliers(struct soap*, const struct __ns1__AttributeSuppliers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AttributeSuppliers(struct soap*, const char*, int, const struct __ns1__AttributeSuppliers *, const char*);
SOAP_FMAC3 struct __ns1__AttributeSuppliers * SOAP_FMAC4 soap_in___ns1__AttributeSuppliers(struct soap*, const char*, struct __ns1__AttributeSuppliers *, const char*);
SOAP_FMAC1 struct __ns1__AttributeSuppliers * SOAP_FMAC2 soap_instantiate___ns1__AttributeSuppliers(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AttributeSuppliers * soap_new___ns1__AttributeSuppliers(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AttributeSuppliers(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AttributeSuppliers * soap_new_req___ns1__AttributeSuppliers(
	struct soap *soap)
{	struct __ns1__AttributeSuppliers *_p = soap_new___ns1__AttributeSuppliers(soap);
	if (_p)
	{	soap_default___ns1__AttributeSuppliers(soap, _p);
	}
	return _p;
}

inline struct __ns1__AttributeSuppliers * soap_new_set___ns1__AttributeSuppliers(
	struct soap *soap)
{	struct __ns1__AttributeSuppliers *_p = soap_new___ns1__AttributeSuppliers(soap);
	if (_p)
	{	soap_default___ns1__AttributeSuppliers(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AttributeSuppliers(struct soap*, const struct __ns1__AttributeSuppliers *, const char*, const char*);

#ifndef soap_write___ns1__AttributeSuppliers
#define soap_write___ns1__AttributeSuppliers(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AttributeSuppliers(soap, data), 0) || soap_put___ns1__AttributeSuppliers(soap, data, "-ns1:AttributeSuppliers", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AttributeSuppliers * SOAP_FMAC4 soap_get___ns1__AttributeSuppliers(struct soap*, struct __ns1__AttributeSuppliers *, const char*, const char*);

#ifndef soap_read___ns1__AttributeSuppliers
#define soap_read___ns1__AttributeSuppliers(soap, data) ( ((data) ? (soap_default___ns1__AttributeSuppliers(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__AttributeSuppliers(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	struct _wsse__Security *wsse__Security)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsse__Security = wsse__Security;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap*, struct _wsse__Security *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap*, const struct _wsse__Security *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap*, const char*, int, const struct _wsse__Security *, const char*);
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap*, const char*, struct _wsse__Security *, const char*);
SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Security * soap_new__wsse__Security(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Security(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Security * soap_new_req__wsse__Security(
	struct soap *soap)
{	struct _wsse__Security *_p = soap_new__wsse__Security(soap);
	if (_p)
	{	soap_default__wsse__Security(soap, _p);
	}
	return _p;
}

inline struct _wsse__Security * soap_new_set__wsse__Security(
	struct soap *soap,
	struct _wsu__Timestamp *wsu__Timestamp,
	struct _wsse__UsernameToken *UsernameToken,
	struct _wsse__BinarySecurityToken *BinarySecurityToken,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	struct _xenc__ReferenceList *xenc__ReferenceList,
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken,
	struct ds__SignatureType *ds__Signature,
	char *SOAP_ENV__actor,
	char *SOAP_ENV__role)
{	struct _wsse__Security *_p = soap_new__wsse__Security(soap);
	if (_p)
	{	soap_default__wsse__Security(soap, _p);
		_p->wsu__Timestamp = wsu__Timestamp;
		_p->UsernameToken = UsernameToken;
		_p->BinarySecurityToken = BinarySecurityToken;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->xenc__ReferenceList = xenc__ReferenceList;
		_p->wsc__SecurityContextToken = wsc__SecurityContextToken;
		_p->ds__Signature = ds__Signature;
		_p->SOAP_ENV__actor = SOAP_ENV__actor;
		_p->SOAP_ENV__role = SOAP_ENV__role;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap*, const struct _wsse__Security *, const char*, const char*);

#ifndef soap_write__wsse__Security
#define soap_write__wsse__Security(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Security(soap, data), 0) || soap_put__wsse__Security(soap, data, "wsse:Security", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap*, struct _wsse__Security *, const char*, const char*);

#ifndef soap_read__wsse__Security
#define soap_read__wsse__Security(soap, data) ( ((data) ? (soap_default__wsse__Security(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__Security(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, int, const struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n = -1) { return soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, n, NULL, NULL, NULL); }

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_req___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType)
{	struct __wsc__DerivedKeyTokenType_sequence *_p = soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
	}
	return _p;
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_set___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType,
	ULONG64 *Length)
{	struct __wsc__DerivedKeyTokenType_sequence *_p = soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
		_p->Length = Length;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

#ifndef soap_write___wsc__DerivedKeyTokenType_sequence
#define soap_write___wsc__DerivedKeyTokenType_sequence(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, data), 0) || soap_put___wsc__DerivedKeyTokenType_sequence(soap, data, "-wsc:DerivedKeyTokenType-sequence", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

#ifndef soap_read___wsc__DerivedKeyTokenType_sequence
#define soap_read___wsc__DerivedKeyTokenType_sequence(soap, data) ( ((data) ? (soap_default___wsc__DerivedKeyTokenType_sequence(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___wsc__DerivedKeyTokenType_sequence(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__PropertiesType
#define SOAP_TYPE_wsc__PropertiesType (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap*, const char*, int, const struct wsc__PropertiesType *, const char*);
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType *, const char*);
SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__PropertiesType * soap_new_wsc__PropertiesType(struct soap *soap, int n = -1) { return soap_instantiate_wsc__PropertiesType(soap, n, NULL, NULL, NULL); }

inline struct wsc__PropertiesType * soap_new_req_wsc__PropertiesType(
	struct soap *soap)
{	struct wsc__PropertiesType *_p = soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}

inline struct wsc__PropertiesType * soap_new_set_wsc__PropertiesType(
	struct soap *soap)
{	struct wsc__PropertiesType *_p = soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *, const char*, const char*);

#ifndef soap_write_wsc__PropertiesType
#define soap_write_wsc__PropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__PropertiesType(soap, data), 0) || soap_put_wsc__PropertiesType(soap, data, "wsc:PropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *, const char*, const char*);

#ifndef soap_read_wsc__PropertiesType
#define soap_read_wsc__PropertiesType(soap, data) ( ((data) ? (soap_default_wsc__PropertiesType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsc__PropertiesType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType
#define SOAP_TYPE_wsc__DerivedKeyTokenType (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap*, const char*, int, const struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap*, const char*, struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__DerivedKeyTokenType * soap_new_wsc__DerivedKeyTokenType(struct soap *soap, int n = -1) { return soap_instantiate_wsc__DerivedKeyTokenType(soap, n, NULL, NULL, NULL); }

inline struct wsc__DerivedKeyTokenType * soap_new_req_wsc__DerivedKeyTokenType(
	struct soap *soap)
{	struct wsc__DerivedKeyTokenType *_p = soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	soap_default_wsc__DerivedKeyTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__DerivedKeyTokenType * soap_new_set_wsc__DerivedKeyTokenType(
	struct soap *soap,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	struct wsc__PropertiesType *Properties,
	struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence,
	char *Label,
	char *Nonce,
	char *wsu__Id,
	char *Algorithm)
{	struct wsc__DerivedKeyTokenType *_p = soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	soap_default_wsc__DerivedKeyTokenType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Properties = Properties;
		_p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence;
		_p->Label = Label;
		_p->Nonce = Nonce;
		_p->wsu__Id = wsu__Id;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *, const char*, const char*);

#ifndef soap_write_wsc__DerivedKeyTokenType
#define soap_write_wsc__DerivedKeyTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__DerivedKeyTokenType(soap, data), 0) || soap_put_wsc__DerivedKeyTokenType(soap, data, "wsc:DerivedKeyTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *, const char*, const char*);

#ifndef soap_read_wsc__DerivedKeyTokenType
#define soap_read_wsc__DerivedKeyTokenType(soap, data) ( ((data) ? (soap_default_wsc__DerivedKeyTokenType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsc__DerivedKeyTokenType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__SecurityContextTokenType
#define SOAP_TYPE_wsc__SecurityContextTokenType (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap*, const char*, int, const struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__SecurityContextTokenType * soap_new_wsc__SecurityContextTokenType(struct soap *soap, int n = -1) { return soap_instantiate_wsc__SecurityContextTokenType(soap, n, NULL, NULL, NULL); }

inline struct wsc__SecurityContextTokenType * soap_new_req_wsc__SecurityContextTokenType(
	struct soap *soap)
{	struct wsc__SecurityContextTokenType *_p = soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	soap_default_wsc__SecurityContextTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__SecurityContextTokenType * soap_new_set_wsc__SecurityContextTokenType(
	struct soap *soap,
	char *wsu__Id,
	char *Identifier,
	char *Instance)
{	struct wsc__SecurityContextTokenType *_p = soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	soap_default_wsc__SecurityContextTokenType(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Identifier = Identifier;
		_p->Instance = Instance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *, const char*, const char*);

#ifndef soap_write_wsc__SecurityContextTokenType
#define soap_write_wsc__SecurityContextTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__SecurityContextTokenType(soap, data), 0) || soap_put_wsc__SecurityContextTokenType(soap, data, "wsc:SecurityContextTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *, const char*, const char*);

#ifndef soap_read_wsc__SecurityContextTokenType
#define soap_read_wsc__SecurityContextTokenType(soap, data) ( ((data) ? (soap_default_wsc__SecurityContextTokenType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsc__SecurityContextTokenType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE___xenc__union_ReferenceList
#define SOAP_TYPE___xenc__union_ReferenceList (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap*, const char*, int, const struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct __xenc__union_ReferenceList * soap_new___xenc__union_ReferenceList(struct soap *soap, int n = -1) { return soap_instantiate___xenc__union_ReferenceList(soap, n, NULL, NULL, NULL); }

inline struct __xenc__union_ReferenceList * soap_new_req___xenc__union_ReferenceList(
	struct soap *soap)
{	struct __xenc__union_ReferenceList *_p = soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	soap_default___xenc__union_ReferenceList(soap, _p);
	}
	return _p;
}

inline struct __xenc__union_ReferenceList * soap_new_set___xenc__union_ReferenceList(
	struct soap *soap,
	struct xenc__ReferenceType *DataReference,
	struct xenc__ReferenceType *KeyReference)
{	struct __xenc__union_ReferenceList *_p = soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	soap_default___xenc__union_ReferenceList(soap, _p);
		_p->DataReference = DataReference;
		_p->KeyReference = KeyReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *, const char*, const char*);

#ifndef soap_write___xenc__union_ReferenceList
#define soap_write___xenc__union_ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___xenc__union_ReferenceList(soap, data), 0) || soap_put___xenc__union_ReferenceList(soap, data, "-xenc:union-ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *, const char*, const char*);

#ifndef soap_read___xenc__union_ReferenceList
#define soap_read___xenc__union_ReferenceList(soap, data) ( ((data) ? (soap_default___xenc__union_ReferenceList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___xenc__union_ReferenceList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__xenc__ReferenceList
#define SOAP_TYPE__xenc__ReferenceList (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap*, const char*, int, const struct _xenc__ReferenceList *, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList *, const char*);
SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct _xenc__ReferenceList * soap_new__xenc__ReferenceList(struct soap *soap, int n = -1) { return soap_instantiate__xenc__ReferenceList(soap, n, NULL, NULL, NULL); }

inline struct _xenc__ReferenceList * soap_new_req__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{	struct _xenc__ReferenceList *_p = soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}

inline struct _xenc__ReferenceList * soap_new_set__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{	struct _xenc__ReferenceList *_p = soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *, const char*, const char*);

#ifndef soap_write__xenc__ReferenceList
#define soap_write__xenc__ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__xenc__ReferenceList(soap, data), 0) || soap_put__xenc__ReferenceList(soap, data, "xenc:ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *, const char*, const char*);

#ifndef soap_read__xenc__ReferenceList
#define soap_read__xenc__ReferenceList(soap, data) ( ((data) ? (soap_default__xenc__ReferenceList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__xenc__ReferenceList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__EncryptionPropertyType
#define SOAP_TYPE_xenc__EncryptionPropertyType (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap*, const char*, int, const struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertyType * soap_new_xenc__EncryptionPropertyType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptionPropertyType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptionPropertyType * soap_new_req_xenc__EncryptionPropertyType(
	struct soap *soap)
{	struct xenc__EncryptionPropertyType *_p = soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertyType(soap, _p);
	}
	return _p;
}

inline struct xenc__EncryptionPropertyType * soap_new_set_xenc__EncryptionPropertyType(
	struct soap *soap,
	char *Target,
	char *Id)
{	struct xenc__EncryptionPropertyType *_p = soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertyType(soap, _p);
		_p->Target = Target;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptionPropertyType
#define soap_write_xenc__EncryptionPropertyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptionPropertyType(soap, data), 0) || soap_put_xenc__EncryptionPropertyType(soap, data, "xenc:EncryptionPropertyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptionPropertyType
#define soap_read_xenc__EncryptionPropertyType(soap, data) ( ((data) ? (soap_default_xenc__EncryptionPropertyType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__EncryptionPropertyType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType
#define SOAP_TYPE_xenc__EncryptionPropertiesType (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap*, const char*, int, const struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertiesType * soap_new_xenc__EncryptionPropertiesType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptionPropertiesType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptionPropertiesType * soap_new_req_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty)
{	struct xenc__EncryptionPropertiesType *_p = soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
	}
	return _p;
}

inline struct xenc__EncryptionPropertiesType * soap_new_set_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty,
	char *Id)
{	struct xenc__EncryptionPropertiesType *_p = soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptionPropertiesType
#define soap_write_xenc__EncryptionPropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptionPropertiesType(soap, data), 0) || soap_put_xenc__EncryptionPropertiesType(soap, data, "xenc:EncryptionPropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptionPropertiesType
#define soap_read_xenc__EncryptionPropertiesType(soap, data) ( ((data) ? (soap_default_xenc__EncryptionPropertiesType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__EncryptionPropertiesType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__ReferenceType
#define SOAP_TYPE_xenc__ReferenceType (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap*, const char*, int, const struct xenc__ReferenceType *, const char*);
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType *, const char*);
SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__ReferenceType * soap_new_xenc__ReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__ReferenceType(soap, n, NULL, NULL, NULL); }

inline struct xenc__ReferenceType * soap_new_req_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{	struct xenc__ReferenceType *_p = soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__ReferenceType * soap_new_set_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{	struct xenc__ReferenceType *_p = soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *, const char*, const char*);

#ifndef soap_write_xenc__ReferenceType
#define soap_write_xenc__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__ReferenceType(soap, data), 0) || soap_put_xenc__ReferenceType(soap, data, "xenc:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *, const char*, const char*);

#ifndef soap_read_xenc__ReferenceType
#define soap_read_xenc__ReferenceType(soap, data) ( ((data) ? (soap_default_xenc__ReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__ReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__AgreementMethodType
#define SOAP_TYPE_xenc__AgreementMethodType (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap*, const char*, int, const struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap*, const char*, struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__AgreementMethodType * soap_new_xenc__AgreementMethodType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__AgreementMethodType(soap, n, NULL, NULL, NULL); }

inline struct xenc__AgreementMethodType * soap_new_req_xenc__AgreementMethodType(
	struct soap *soap,
	char *Algorithm)
{	struct xenc__AgreementMethodType *_p = soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	soap_default_xenc__AgreementMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__AgreementMethodType * soap_new_set_xenc__AgreementMethodType(
	struct soap *soap,
	char *KA_Nonce,
	struct ds__KeyInfoType *OriginatorKeyInfo,
	struct ds__KeyInfoType *RecipientKeyInfo,
	char *Algorithm,
	char *__mixed)
{	struct xenc__AgreementMethodType *_p = soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	soap_default_xenc__AgreementMethodType(soap, _p);
		_p->KA_Nonce = KA_Nonce;
		_p->OriginatorKeyInfo = OriginatorKeyInfo;
		_p->RecipientKeyInfo = RecipientKeyInfo;
		_p->Algorithm = Algorithm;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *, const char*, const char*);

#ifndef soap_write_xenc__AgreementMethodType
#define soap_write_xenc__AgreementMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__AgreementMethodType(soap, data), 0) || soap_put_xenc__AgreementMethodType(soap, data, "xenc:AgreementMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *, const char*, const char*);

#ifndef soap_read_xenc__AgreementMethodType
#define soap_read_xenc__AgreementMethodType(soap, data) ( ((data) ? (soap_default_xenc__AgreementMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__AgreementMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__EncryptedKeyType
#define SOAP_TYPE_xenc__EncryptedKeyType (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap*, const char*, int, const struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedKeyType * soap_new_xenc__EncryptedKeyType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptedKeyType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptedKeyType * soap_new_req_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{	struct xenc__EncryptedKeyType *_p = soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedKeyType * soap_new_set_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding,
	struct _xenc__ReferenceList *ReferenceList,
	char *CarriedKeyName,
	char *Recipient)
{	struct xenc__EncryptedKeyType *_p = soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
		_p->ReferenceList = ReferenceList;
		_p->CarriedKeyName = CarriedKeyName;
		_p->Recipient = Recipient;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptedKeyType
#define soap_write_xenc__EncryptedKeyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptedKeyType(soap, data), 0) || soap_put_xenc__EncryptedKeyType(soap, data, "xenc:EncryptedKeyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptedKeyType
#define soap_read_xenc__EncryptedKeyType(soap, data) ( ((data) ? (soap_default_xenc__EncryptedKeyType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__EncryptedKeyType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__EncryptedDataType
#define SOAP_TYPE_xenc__EncryptedDataType (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap*, const char*, int, const struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap*, const char*, struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedDataType * soap_new_xenc__EncryptedDataType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptedDataType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptedDataType * soap_new_req_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{	struct xenc__EncryptedDataType *_p = soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedDataType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedDataType * soap_new_set_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{	struct xenc__EncryptedDataType *_p = soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedDataType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptedDataType
#define soap_write_xenc__EncryptedDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptedDataType(soap, data), 0) || soap_put_xenc__EncryptedDataType(soap, data, "xenc:EncryptedDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptedDataType
#define soap_read_xenc__EncryptedDataType(soap, data) ( ((data) ? (soap_default_xenc__EncryptedDataType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__EncryptedDataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__TransformsType
#define SOAP_TYPE_xenc__TransformsType (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap*, struct xenc__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap*, const char*, int, const struct xenc__TransformsType *, const char*);
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType *, const char*);
SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__TransformsType * soap_new_xenc__TransformsType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__TransformsType(soap, n, NULL, NULL, NULL); }

inline struct xenc__TransformsType * soap_new_req_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{	struct xenc__TransformsType *_p = soap_new_xenc__TransformsType(soap);
	if (_p)
	{	soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}

inline struct xenc__TransformsType * soap_new_set_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{	struct xenc__TransformsType *_p = soap_new_xenc__TransformsType(soap);
	if (_p)
	{	soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *, const char*, const char*);

#ifndef soap_write_xenc__TransformsType
#define soap_write_xenc__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__TransformsType(soap, data), 0) || soap_put_xenc__TransformsType(soap, data, "xenc:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap*, struct xenc__TransformsType *, const char*, const char*);

#ifndef soap_read_xenc__TransformsType
#define soap_read_xenc__TransformsType(soap, data) ( ((data) ? (soap_default_xenc__TransformsType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__TransformsType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__CipherReferenceType
#define SOAP_TYPE_xenc__CipherReferenceType (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap*, const char*, int, const struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherReferenceType * soap_new_xenc__CipherReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__CipherReferenceType(soap, n, NULL, NULL, NULL); }

inline struct xenc__CipherReferenceType * soap_new_req_xenc__CipherReferenceType(
	struct soap *soap,
	char *URI)
{	struct xenc__CipherReferenceType *_p = soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	soap_default_xenc__CipherReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__CipherReferenceType * soap_new_set_xenc__CipherReferenceType(
	struct soap *soap,
	struct xenc__TransformsType *Transforms,
	char *URI)
{	struct xenc__CipherReferenceType *_p = soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	soap_default_xenc__CipherReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *, const char*, const char*);

#ifndef soap_write_xenc__CipherReferenceType
#define soap_write_xenc__CipherReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__CipherReferenceType(soap, data), 0) || soap_put_xenc__CipherReferenceType(soap, data, "xenc:CipherReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *, const char*, const char*);

#ifndef soap_read_xenc__CipherReferenceType
#define soap_read_xenc__CipherReferenceType(soap, data) ( ((data) ? (soap_default_xenc__CipherReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__CipherReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__CipherDataType
#define SOAP_TYPE_xenc__CipherDataType (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap*, const char*, int, const struct xenc__CipherDataType *, const char*);
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType *, const char*);
SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherDataType * soap_new_xenc__CipherDataType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__CipherDataType(soap, n, NULL, NULL, NULL); }

inline struct xenc__CipherDataType * soap_new_req_xenc__CipherDataType(
	struct soap *soap)
{	struct xenc__CipherDataType *_p = soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	soap_default_xenc__CipherDataType(soap, _p);
	}
	return _p;
}

inline struct xenc__CipherDataType * soap_new_set_xenc__CipherDataType(
	struct soap *soap,
	char *CipherValue,
	struct xenc__CipherReferenceType *CipherReference)
{	struct xenc__CipherDataType *_p = soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	soap_default_xenc__CipherDataType(soap, _p);
		_p->CipherValue = CipherValue;
		_p->CipherReference = CipherReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *, const char*, const char*);

#ifndef soap_write_xenc__CipherDataType
#define soap_write_xenc__CipherDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__CipherDataType(soap, data), 0) || soap_put_xenc__CipherDataType(soap, data, "xenc:CipherDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *, const char*, const char*);

#ifndef soap_read_xenc__CipherDataType
#define soap_read_xenc__CipherDataType(soap, data) ( ((data) ? (soap_default_xenc__CipherDataType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__CipherDataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__EncryptionMethodType
#define SOAP_TYPE_xenc__EncryptionMethodType (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap*, const char*, int, const struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionMethodType * soap_new_xenc__EncryptionMethodType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptionMethodType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptionMethodType * soap_new_req_xenc__EncryptionMethodType(
	struct soap *soap,
	char *Algorithm)
{	struct xenc__EncryptionMethodType *_p = soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__EncryptionMethodType * soap_new_set_xenc__EncryptionMethodType(
	struct soap *soap,
	int *KeySize,
	char *OAEPparams,
	char *Algorithm,
	struct ds__DigestMethodType *ds__DigestMethod,
	char *__mixed)
{	struct xenc__EncryptionMethodType *_p = soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->KeySize = KeySize;
		_p->OAEPparams = OAEPparams;
		_p->Algorithm = Algorithm;
		_p->ds__DigestMethod = ds__DigestMethod;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptionMethodType
#define soap_write_xenc__EncryptionMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptionMethodType(soap, data), 0) || soap_put_xenc__EncryptionMethodType(soap, data, "xenc:EncryptionMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptionMethodType
#define soap_read_xenc__EncryptionMethodType(soap, data) ( ((data) ? (soap_default_xenc__EncryptionMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__EncryptionMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xenc__EncryptedType
#define SOAP_TYPE_xenc__EncryptedType (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap*, const char*, int, const struct xenc__EncryptedType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap*, const char*, struct xenc__EncryptedType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedType * soap_new_xenc__EncryptedType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptedType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptedType * soap_new_req_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{	struct xenc__EncryptedType *_p = soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedType * soap_new_set_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{	struct xenc__EncryptedType *_p = soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptedType
#define soap_write_xenc__EncryptedType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptedType(soap, data), 0) || soap_put_xenc__EncryptedType(soap, data, "xenc:EncryptedType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptedType
#define soap_read_xenc__EncryptedType(soap, data) ( ((data) ? (soap_default_xenc__EncryptedType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xenc__EncryptedType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap*, const char*, int, const struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RSAKeyValueType * soap_new_ds__RSAKeyValueType(struct soap *soap, int n = -1) { return soap_instantiate_ds__RSAKeyValueType(soap, n, NULL, NULL, NULL); }

inline struct ds__RSAKeyValueType * soap_new_req_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{	struct ds__RSAKeyValueType *_p = soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}

inline struct ds__RSAKeyValueType * soap_new_set_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{	struct ds__RSAKeyValueType *_p = soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *, const char*, const char*);

#ifndef soap_write_ds__RSAKeyValueType
#define soap_write_ds__RSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__RSAKeyValueType(soap, data), 0) || soap_put_ds__RSAKeyValueType(soap, data, "ds:RSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *, const char*, const char*);

#ifndef soap_read_ds__RSAKeyValueType
#define soap_read_ds__RSAKeyValueType(soap, data) ( ((data) ? (soap_default_ds__RSAKeyValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__RSAKeyValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap*, const char*, int, const struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DSAKeyValueType * soap_new_ds__DSAKeyValueType(struct soap *soap, int n = -1) { return soap_instantiate_ds__DSAKeyValueType(soap, n, NULL, NULL, NULL); }

inline struct ds__DSAKeyValueType * soap_new_req_ds__DSAKeyValueType(
	struct soap *soap,
	char *Y,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{	struct ds__DSAKeyValueType *_p = soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__DSAKeyValueType(soap, _p);
		_p->Y = Y;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}

inline struct ds__DSAKeyValueType * soap_new_set_ds__DSAKeyValueType(
	struct soap *soap,
	char *G,
	char *Y,
	char *J,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{	struct ds__DSAKeyValueType *_p = soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__DSAKeyValueType(soap, _p);
		_p->G = G;
		_p->Y = Y;
		_p->J = J;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *, const char*, const char*);

#ifndef soap_write_ds__DSAKeyValueType
#define soap_write_ds__DSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__DSAKeyValueType(soap, data), 0) || soap_put_ds__DSAKeyValueType(soap, data, "ds:DSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *, const char*, const char*);

#ifndef soap_read_ds__DSAKeyValueType
#define soap_read_ds__DSAKeyValueType(soap, data) ( ((data) ? (soap_default_ds__DSAKeyValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__DSAKeyValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap*, const char*, int, const struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509IssuerSerialType * soap_new_ds__X509IssuerSerialType(struct soap *soap, int n = -1) { return soap_instantiate_ds__X509IssuerSerialType(soap, n, NULL, NULL, NULL); }

inline struct ds__X509IssuerSerialType * soap_new_req_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{	struct ds__X509IssuerSerialType *_p = soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}

inline struct ds__X509IssuerSerialType * soap_new_set_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{	struct ds__X509IssuerSerialType *_p = soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *, const char*, const char*);

#ifndef soap_write_ds__X509IssuerSerialType
#define soap_write_ds__X509IssuerSerialType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__X509IssuerSerialType(soap, data), 0) || soap_put_ds__X509IssuerSerialType(soap, data, "ds:X509IssuerSerialType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *, const char*, const char*);

#ifndef soap_read_ds__X509IssuerSerialType
#define soap_read_ds__X509IssuerSerialType(soap, data) ( ((data) ? (soap_default_ds__X509IssuerSerialType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__X509IssuerSerialType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* _ds__KeyInfo is a typedef synonym for ds__KeyInfoType */

#ifndef SOAP_TYPE__ds__KeyInfo
#define SOAP_TYPE__ds__KeyInfo (44)
#endif

#define soap_default__ds__KeyInfo(soap, a) soap_default_ds__KeyInfoType(soap, a)


#define soap_serialize__ds__KeyInfo soap_serialize_ds__KeyInfoType


#define soap__ds__KeyInfo2s soap_ds__KeyInfoType2s


#define soap_out__ds__KeyInfo soap_out_ds__KeyInfoType


#define soap_s2_ds__KeyInfo soap_s2ds__KeyInfoType


#define soap_in__ds__KeyInfo soap_in_ds__KeyInfoType


#define soap_instantiate__ds__KeyInfo soap_instantiate_ds__KeyInfoType


#define soap_new__ds__KeyInfo soap_new_ds__KeyInfoType


#define soap_new_req__ds__KeyInfo soap_new_req_ds__KeyInfoType


#define soap_new_set__ds__KeyInfo soap_new_set_ds__KeyInfoType


#define soap_put__ds__KeyInfo soap_put_ds__KeyInfoType


#define soap_write__ds__KeyInfo soap_write_ds__KeyInfoType


#define soap_get__ds__KeyInfo soap_get_ds__KeyInfoType


#define soap_read__ds__KeyInfo soap_read_ds__KeyInfoType


#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap*, const char*, int, const struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RetrievalMethodType * soap_new_ds__RetrievalMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__RetrievalMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__RetrievalMethodType * soap_new_req_ds__RetrievalMethodType(
	struct soap *soap)
{	struct ds__RetrievalMethodType *_p = soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	soap_default_ds__RetrievalMethodType(soap, _p);
	}
	return _p;
}

inline struct ds__RetrievalMethodType * soap_new_set_ds__RetrievalMethodType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	char *URI,
	char *Type)
{	struct ds__RetrievalMethodType *_p = soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	soap_default_ds__RetrievalMethodType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *, const char*, const char*);

#ifndef soap_write_ds__RetrievalMethodType
#define soap_write_ds__RetrievalMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__RetrievalMethodType(soap, data), 0) || soap_put_ds__RetrievalMethodType(soap, data, "ds:RetrievalMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *, const char*, const char*);

#ifndef soap_read_ds__RetrievalMethodType
#define soap_read_ds__RetrievalMethodType(soap, data) ( ((data) ? (soap_default_ds__RetrievalMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__RetrievalMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap*, struct ds__KeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap*, const char*, int, const struct ds__KeyValueType *, const char*);
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap*, const char*, struct ds__KeyValueType *, const char*);
SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyValueType * soap_new_ds__KeyValueType(struct soap *soap, int n = -1) { return soap_instantiate_ds__KeyValueType(soap, n, NULL, NULL, NULL); }

inline struct ds__KeyValueType * soap_new_req_ds__KeyValueType(
	struct soap *soap)
{	struct ds__KeyValueType *_p = soap_new_ds__KeyValueType(soap);
	if (_p)
	{	soap_default_ds__KeyValueType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyValueType * soap_new_set_ds__KeyValueType(
	struct soap *soap,
	struct ds__DSAKeyValueType *DSAKeyValue,
	struct ds__RSAKeyValueType *RSAKeyValue)
{	struct ds__KeyValueType *_p = soap_new_ds__KeyValueType(soap);
	if (_p)
	{	soap_default_ds__KeyValueType(soap, _p);
		_p->DSAKeyValue = DSAKeyValue;
		_p->RSAKeyValue = RSAKeyValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *, const char*, const char*);

#ifndef soap_write_ds__KeyValueType
#define soap_write_ds__KeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__KeyValueType(soap, data), 0) || soap_put_ds__KeyValueType(soap, data, "ds:KeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap*, struct ds__KeyValueType *, const char*, const char*);

#ifndef soap_read_ds__KeyValueType
#define soap_read_ds__KeyValueType(soap, data) ( ((data) ? (soap_default_ds__KeyValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__KeyValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap*, const char*, int, const struct ds__DigestMethodType *, const char*);
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType *, const char*);
SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DigestMethodType * soap_new_ds__DigestMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__DigestMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__DigestMethodType * soap_new_req_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{	struct ds__DigestMethodType *_p = soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__DigestMethodType * soap_new_set_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{	struct ds__DigestMethodType *_p = soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *, const char*, const char*);

#ifndef soap_write_ds__DigestMethodType
#define soap_write_ds__DigestMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__DigestMethodType(soap, data), 0) || soap_put_ds__DigestMethodType(soap, data, "ds:DigestMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *, const char*, const char*);

#ifndef soap_read_ds__DigestMethodType
#define soap_read_ds__DigestMethodType(soap, data) ( ((data) ? (soap_default_ds__DigestMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__DigestMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* _ds__Transform is a typedef synonym for ds__TransformType */

#ifndef SOAP_TYPE__ds__Transform
#define SOAP_TYPE__ds__Transform (37)
#endif

#define soap_default__ds__Transform(soap, a) soap_default_ds__TransformType(soap, a)


#define soap_serialize__ds__Transform soap_serialize_ds__TransformType


#define soap__ds__Transform2s soap_ds__TransformType2s


#define soap_out__ds__Transform soap_out_ds__TransformType


#define soap_s2_ds__Transform soap_s2ds__TransformType


#define soap_in__ds__Transform soap_in_ds__TransformType


#define soap_instantiate__ds__Transform soap_instantiate_ds__TransformType


#define soap_new__ds__Transform soap_new_ds__TransformType


#define soap_new_req__ds__Transform soap_new_req_ds__TransformType


#define soap_new_set__ds__Transform soap_new_set_ds__TransformType


#define soap_put__ds__Transform soap_put_ds__TransformType


#define soap_write__ds__Transform soap_write_ds__TransformType


#define soap_get__ds__Transform soap_get_ds__TransformType


#define soap_read__ds__Transform soap_read_ds__TransformType


#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap*, struct ds__TransformType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap*, const char*, int, const struct ds__TransformType *, const char*);
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap*, const char*, struct ds__TransformType *, const char*);
SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformType * soap_new_ds__TransformType(struct soap *soap, int n = -1) { return soap_instantiate_ds__TransformType(soap, n, NULL, NULL, NULL); }

inline struct ds__TransformType * soap_new_req_ds__TransformType(
	struct soap *soap)
{	struct ds__TransformType *_p = soap_new_ds__TransformType(soap);
	if (_p)
	{	soap_default_ds__TransformType(soap, _p);
	}
	return _p;
}

inline struct ds__TransformType * soap_new_set_ds__TransformType(
	struct soap *soap,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces,
	char *__any,
	char *Algorithm)
{	struct ds__TransformType *_p = soap_new_ds__TransformType(soap);
	if (_p)
	{	soap_default_ds__TransformType(soap, _p);
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
		_p->__any = __any;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap*, const struct ds__TransformType *, const char*, const char*);

#ifndef soap_write_ds__TransformType
#define soap_write_ds__TransformType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__TransformType(soap, data), 0) || soap_put_ds__TransformType(soap, data, "ds:TransformType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap*, struct ds__TransformType *, const char*, const char*);

#ifndef soap_read_ds__TransformType
#define soap_read_ds__TransformType(soap, data) ( ((data) ? (soap_default_ds__TransformType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__TransformType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap*, const char*, int, const struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);

inline struct _c14n__InclusiveNamespaces * soap_new__c14n__InclusiveNamespaces(struct soap *soap, int n = -1) { return soap_instantiate__c14n__InclusiveNamespaces(soap, n, NULL, NULL, NULL); }

inline struct _c14n__InclusiveNamespaces * soap_new_req__c14n__InclusiveNamespaces(
	struct soap *soap)
{	struct _c14n__InclusiveNamespaces *_p = soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	soap_default__c14n__InclusiveNamespaces(soap, _p);
	}
	return _p;
}

inline struct _c14n__InclusiveNamespaces * soap_new_set__c14n__InclusiveNamespaces(
	struct soap *soap,
	char *PrefixList)
{	struct _c14n__InclusiveNamespaces *_p = soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	soap_default__c14n__InclusiveNamespaces(soap, _p);
		_p->PrefixList = PrefixList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *, const char*, const char*);

#ifndef soap_write__c14n__InclusiveNamespaces
#define soap_write__c14n__InclusiveNamespaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__c14n__InclusiveNamespaces(soap, data), 0) || soap_put__c14n__InclusiveNamespaces(soap, data, "c14n:InclusiveNamespaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *, const char*, const char*);

#ifndef soap_read__c14n__InclusiveNamespaces
#define soap_read__c14n__InclusiveNamespaces(soap, data) ( ((data) ? (soap_default__c14n__InclusiveNamespaces(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__c14n__InclusiveNamespaces(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap*, struct ds__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap*, const struct ds__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap*, const char*, int, const struct ds__TransformsType *, const char*);
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap*, const char*, struct ds__TransformsType *, const char*);
SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformsType * soap_new_ds__TransformsType(struct soap *soap, int n = -1) { return soap_instantiate_ds__TransformsType(soap, n, NULL, NULL, NULL); }

inline struct ds__TransformsType * soap_new_req_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{	struct ds__TransformsType *_p = soap_new_ds__TransformsType(soap);
	if (_p)
	{	soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}

inline struct ds__TransformsType * soap_new_set_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{	struct ds__TransformsType *_p = soap_new_ds__TransformsType(soap);
	if (_p)
	{	soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap*, const struct ds__TransformsType *, const char*, const char*);

#ifndef soap_write_ds__TransformsType
#define soap_write_ds__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__TransformsType(soap, data), 0) || soap_put_ds__TransformsType(soap, data, "ds:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap*, struct ds__TransformsType *, const char*, const char*);

#ifndef soap_read_ds__TransformsType
#define soap_read_ds__TransformsType(soap, data) ( ((data) ? (soap_default_ds__TransformsType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__TransformsType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap*, struct ds__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap*, const char*, int, const struct ds__ReferenceType *, const char*);
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap*, const char*, struct ds__ReferenceType *, const char*);
SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__ReferenceType * soap_new_ds__ReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_ds__ReferenceType(soap, n, NULL, NULL, NULL); }

inline struct ds__ReferenceType * soap_new_req_ds__ReferenceType(
	struct soap *soap,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue)
{	struct ds__ReferenceType *_p = soap_new_ds__ReferenceType(soap);
	if (_p)
	{	soap_default_ds__ReferenceType(soap, _p);
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
	}
	return _p;
}

inline struct ds__ReferenceType * soap_new_set_ds__ReferenceType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue,
	char *Id,
	char *URI,
	char *Type)
{	struct ds__ReferenceType *_p = soap_new_ds__ReferenceType(soap);
	if (_p)
	{	soap_default_ds__ReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
		_p->Id = Id;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *, const char*, const char*);

#ifndef soap_write_ds__ReferenceType
#define soap_write_ds__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__ReferenceType(soap, data), 0) || soap_put_ds__ReferenceType(soap, data, "ds:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap*, struct ds__ReferenceType *, const char*, const char*);

#ifndef soap_read_ds__ReferenceType
#define soap_read_ds__ReferenceType(soap, data) ( ((data) ? (soap_default_ds__ReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__ReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap*, const char*, int, const struct ds__SignatureMethodType *, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType *, const char*);
SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureMethodType * soap_new_ds__SignatureMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__SignatureMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__SignatureMethodType * soap_new_req_ds__SignatureMethodType(
	struct soap *soap,
	char *Algorithm)
{	struct ds__SignatureMethodType *_p = soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	soap_default_ds__SignatureMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__SignatureMethodType * soap_new_set_ds__SignatureMethodType(
	struct soap *soap,
	int *HMACOutputLength,
	char *Algorithm)
{	struct ds__SignatureMethodType *_p = soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	soap_default_ds__SignatureMethodType(soap, _p);
		_p->HMACOutputLength = HMACOutputLength;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *, const char*, const char*);

#ifndef soap_write_ds__SignatureMethodType
#define soap_write_ds__SignatureMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__SignatureMethodType(soap, data), 0) || soap_put_ds__SignatureMethodType(soap, data, "ds:SignatureMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *, const char*, const char*);

#ifndef soap_read_ds__SignatureMethodType
#define soap_read_ds__SignatureMethodType(soap, data) ( ((data) ? (soap_default_ds__SignatureMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__SignatureMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap*, const char*, int, const struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__CanonicalizationMethodType * soap_new_ds__CanonicalizationMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__CanonicalizationMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__CanonicalizationMethodType * soap_new_req_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm)
{	struct ds__CanonicalizationMethodType *_p = soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__CanonicalizationMethodType * soap_new_set_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces)
{	struct ds__CanonicalizationMethodType *_p = soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *, const char*, const char*);

#ifndef soap_write_ds__CanonicalizationMethodType
#define soap_write_ds__CanonicalizationMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__CanonicalizationMethodType(soap, data), 0) || soap_put_ds__CanonicalizationMethodType(soap, data, "ds:CanonicalizationMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *, const char*, const char*);

#ifndef soap_read_ds__CanonicalizationMethodType
#define soap_read_ds__CanonicalizationMethodType(soap, data) ( ((data) ? (soap_default_ds__CanonicalizationMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__CanonicalizationMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

/* _ds__Signature is a typedef synonym for ds__SignatureType */

#ifndef SOAP_TYPE__ds__Signature
#define SOAP_TYPE__ds__Signature (29)
#endif

#define soap_default__ds__Signature(soap, a) soap_default_ds__SignatureType(soap, a)


#define soap_serialize__ds__Signature soap_serialize_ds__SignatureType


#define soap__ds__Signature2s soap_ds__SignatureType2s


#define soap_out__ds__Signature soap_out_ds__SignatureType


#define soap_s2_ds__Signature soap_s2ds__SignatureType


#define soap_in__ds__Signature soap_in_ds__SignatureType


#define soap_instantiate__ds__Signature soap_instantiate_ds__SignatureType


#define soap_new__ds__Signature soap_new_ds__SignatureType


#define soap_new_req__ds__Signature soap_new_req_ds__SignatureType


#define soap_new_set__ds__Signature soap_new_set_ds__SignatureType


#define soap_put__ds__Signature soap_put_ds__SignatureType


#define soap_write__ds__Signature soap_write_ds__SignatureType


#define soap_get__ds__Signature soap_get_ds__SignatureType


#define soap_read__ds__Signature soap_read_ds__SignatureType


#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap*, const char*, int, const struct ds__KeyInfoType *, const char*);
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType *, const char*);
SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyInfoType * soap_new_ds__KeyInfoType(struct soap *soap, int n = -1) { return soap_instantiate_ds__KeyInfoType(soap, n, NULL, NULL, NULL); }

inline struct ds__KeyInfoType * soap_new_req_ds__KeyInfoType(
	struct soap *soap)
{	struct ds__KeyInfoType *_p = soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	soap_default_ds__KeyInfoType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyInfoType * soap_new_set_ds__KeyInfoType(
	struct soap *soap,
	char *KeyName,
	struct ds__KeyValueType *KeyValue,
	struct ds__RetrievalMethodType *RetrievalMethod,
	struct ds__X509DataType *X509Data,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	char *Id)
{	struct ds__KeyInfoType *_p = soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	soap_default_ds__KeyInfoType(soap, _p);
		_p->KeyName = KeyName;
		_p->KeyValue = KeyValue;
		_p->RetrievalMethod = RetrievalMethod;
		_p->X509Data = X509Data;
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

#ifndef soap_write_ds__KeyInfoType
#define soap_write_ds__KeyInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__KeyInfoType(soap, data), 0) || soap_put_ds__KeyInfoType(soap, data, "ds:KeyInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *, const char*, const char*);

#ifndef soap_read_ds__KeyInfoType
#define soap_read_ds__KeyInfoType(soap, data) ( ((data) ? (soap_default_ds__KeyInfoType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__KeyInfoType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap*, const char*, int, const struct ds__SignedInfoType *, const char*);
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType *, const char*);
SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignedInfoType * soap_new_ds__SignedInfoType(struct soap *soap, int n = -1) { return soap_instantiate_ds__SignedInfoType(soap, n, NULL, NULL, NULL); }

inline struct ds__SignedInfoType * soap_new_req_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference)
{	struct ds__SignedInfoType *_p = soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
	}
	return _p;
}

inline struct ds__SignedInfoType * soap_new_set_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference,
	char *Id)
{	struct ds__SignedInfoType *_p = soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *, const char*, const char*);

#ifndef soap_write_ds__SignedInfoType
#define soap_write_ds__SignedInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__SignedInfoType(soap, data), 0) || soap_put_ds__SignedInfoType(soap, data, "ds:SignedInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *, const char*, const char*);

#ifndef soap_read_ds__SignedInfoType
#define soap_read_ds__SignedInfoType(soap, data) ( ((data) ? (soap_default_ds__SignedInfoType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__SignedInfoType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap*, struct ds__SignatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap*, const char*, int, const struct ds__SignatureType *, const char*);
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap*, const char*, struct ds__SignatureType *, const char*);
SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureType * soap_new_ds__SignatureType(struct soap *soap, int n = -1) { return soap_instantiate_ds__SignatureType(soap, n, NULL, NULL, NULL); }

inline struct ds__SignatureType * soap_new_req_ds__SignatureType(
	struct soap *soap)
{	struct ds__SignatureType *_p = soap_new_ds__SignatureType(soap);
	if (_p)
	{	soap_default_ds__SignatureType(soap, _p);
	}
	return _p;
}

inline struct ds__SignatureType * soap_new_set_ds__SignatureType(
	struct soap *soap,
	struct ds__SignedInfoType *SignedInfo,
	char *SignatureValue,
	struct ds__KeyInfoType *KeyInfo,
	char *Id)
{	struct ds__SignatureType *_p = soap_new_ds__SignatureType(soap);
	if (_p)
	{	soap_default_ds__SignatureType(soap, _p);
		_p->SignedInfo = SignedInfo;
		_p->SignatureValue = SignatureValue;
		_p->KeyInfo = KeyInfo;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap*, const struct ds__SignatureType *, const char*, const char*);

#ifndef soap_write_ds__SignatureType
#define soap_write_ds__SignatureType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__SignatureType(soap, data), 0) || soap_put_ds__SignatureType(soap, data, "ds:SignatureType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap*, struct ds__SignatureType *, const char*, const char*);

#ifndef soap_read_ds__SignatureType
#define soap_read_ds__SignatureType(soap, data) ( ((data) ? (soap_default_ds__SignatureType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__SignatureType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap*, struct ds__X509DataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap*, const struct ds__X509DataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap*, const char*, int, const struct ds__X509DataType *, const char*);
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap*, const char*, struct ds__X509DataType *, const char*);
SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509DataType * soap_new_ds__X509DataType(struct soap *soap, int n = -1) { return soap_instantiate_ds__X509DataType(soap, n, NULL, NULL, NULL); }

inline struct ds__X509DataType * soap_new_req_ds__X509DataType(
	struct soap *soap)
{	struct ds__X509DataType *_p = soap_new_ds__X509DataType(soap);
	if (_p)
	{	soap_default_ds__X509DataType(soap, _p);
	}
	return _p;
}

inline struct ds__X509DataType * soap_new_set_ds__X509DataType(
	struct soap *soap,
	struct ds__X509IssuerSerialType *X509IssuerSerial,
	char *X509SKI,
	char *X509SubjectName,
	char *X509Certificate,
	char *X509CRL)
{	struct ds__X509DataType *_p = soap_new_ds__X509DataType(soap);
	if (_p)
	{	soap_default_ds__X509DataType(soap, _p);
		_p->X509IssuerSerial = X509IssuerSerial;
		_p->X509SKI = X509SKI;
		_p->X509SubjectName = X509SubjectName;
		_p->X509Certificate = X509Certificate;
		_p->X509CRL = X509CRL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap*, const struct ds__X509DataType *, const char*, const char*);

#ifndef soap_write_ds__X509DataType
#define soap_write_ds__X509DataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__X509DataType(soap, data), 0) || soap_put_ds__X509DataType(soap, data, "ds:X509DataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap*, struct ds__X509DataType *, const char*, const char*);

#ifndef soap_read_ds__X509DataType
#define soap_read_ds__X509DataType(soap, data) ( ((data) ? (soap_default_ds__X509DataType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ds__X509DataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap*, const char*, int, const struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__SecurityTokenReference * soap_new__wsse__SecurityTokenReference(struct soap *soap, int n = -1) { return soap_instantiate__wsse__SecurityTokenReference(soap, n, NULL, NULL, NULL); }

inline struct _wsse__SecurityTokenReference * soap_new_req__wsse__SecurityTokenReference(
	struct soap *soap)
{	struct _wsse__SecurityTokenReference *_p = soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	soap_default__wsse__SecurityTokenReference(soap, _p);
	}
	return _p;
}

inline struct _wsse__SecurityTokenReference * soap_new_set__wsse__SecurityTokenReference(
	struct soap *soap,
	struct _wsse__Reference *Reference,
	struct _wsse__KeyIdentifier *KeyIdentifier,
	struct _wsse__Embedded *Embedded,
	struct ds__X509DataType *ds__X509Data,
	char *wsu__Id,
	char *wsc__Instance,
	char *Usage)
{	struct _wsse__SecurityTokenReference *_p = soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	soap_default__wsse__SecurityTokenReference(soap, _p);
		_p->Reference = Reference;
		_p->KeyIdentifier = KeyIdentifier;
		_p->Embedded = Embedded;
		_p->ds__X509Data = ds__X509Data;
		_p->wsu__Id = wsu__Id;
		_p->wsc__Instance = wsc__Instance;
		_p->Usage = Usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *, const char*, const char*);

#ifndef soap_write__wsse__SecurityTokenReference
#define soap_write__wsse__SecurityTokenReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__SecurityTokenReference(soap, data), 0) || soap_put__wsse__SecurityTokenReference(soap, data, "wsse:SecurityTokenReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *, const char*, const char*);

#ifndef soap_read__wsse__SecurityTokenReference
#define soap_read__wsse__SecurityTokenReference(soap, data) ( ((data) ? (soap_default__wsse__SecurityTokenReference(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__SecurityTokenReference(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap*, const char*, int, const struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__KeyIdentifier * soap_new__wsse__KeyIdentifier(struct soap *soap, int n = -1) { return soap_instantiate__wsse__KeyIdentifier(soap, n, NULL, NULL, NULL); }

inline struct _wsse__KeyIdentifier * soap_new_req__wsse__KeyIdentifier(
	struct soap *soap)
{	struct _wsse__KeyIdentifier *_p = soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	soap_default__wsse__KeyIdentifier(soap, _p);
	}
	return _p;
}

inline struct _wsse__KeyIdentifier * soap_new_set__wsse__KeyIdentifier(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{	struct _wsse__KeyIdentifier *_p = soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	soap_default__wsse__KeyIdentifier(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *, const char*, const char*);

#ifndef soap_write__wsse__KeyIdentifier
#define soap_write__wsse__KeyIdentifier(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__KeyIdentifier(soap, data), 0) || soap_put__wsse__KeyIdentifier(soap, data, "wsse:KeyIdentifier", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *, const char*, const char*);

#ifndef soap_read__wsse__KeyIdentifier
#define soap_read__wsse__KeyIdentifier(soap, data) ( ((data) ? (soap_default__wsse__KeyIdentifier(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__KeyIdentifier(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap*, struct _wsse__Embedded *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap*, const struct _wsse__Embedded *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap*, const char*, int, const struct _wsse__Embedded *, const char*);
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded *, const char*);
SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Embedded * soap_new__wsse__Embedded(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Embedded(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Embedded * soap_new_req__wsse__Embedded(
	struct soap *soap)
{	struct _wsse__Embedded *_p = soap_new__wsse__Embedded(soap);
	if (_p)
	{	soap_default__wsse__Embedded(soap, _p);
	}
	return _p;
}

inline struct _wsse__Embedded * soap_new_set__wsse__Embedded(
	struct soap *soap,
	char *wsu__Id,
	char *ValueType)
{	struct _wsse__Embedded *_p = soap_new__wsse__Embedded(soap);
	if (_p)
	{	soap_default__wsse__Embedded(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap*, const struct _wsse__Embedded *, const char*, const char*);

#ifndef soap_write__wsse__Embedded
#define soap_write__wsse__Embedded(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Embedded(soap, data), 0) || soap_put__wsse__Embedded(soap, data, "wsse:Embedded", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap*, struct _wsse__Embedded *, const char*, const char*);

#ifndef soap_read__wsse__Embedded
#define soap_read__wsse__Embedded(soap, data) ( ((data) ? (soap_default__wsse__Embedded(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__Embedded(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap*, struct _wsse__Reference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap*, const struct _wsse__Reference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap*, const char*, int, const struct _wsse__Reference *, const char*);
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap*, const char*, struct _wsse__Reference *, const char*);
SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Reference * soap_new__wsse__Reference(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Reference(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Reference * soap_new_req__wsse__Reference(
	struct soap *soap)
{	struct _wsse__Reference *_p = soap_new__wsse__Reference(soap);
	if (_p)
	{	soap_default__wsse__Reference(soap, _p);
	}
	return _p;
}

inline struct _wsse__Reference * soap_new_set__wsse__Reference(
	struct soap *soap,
	char *URI,
	char *ValueType)
{	struct _wsse__Reference *_p = soap_new__wsse__Reference(soap);
	if (_p)
	{	soap_default__wsse__Reference(soap, _p);
		_p->URI = URI;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap*, const struct _wsse__Reference *, const char*, const char*);

#ifndef soap_write__wsse__Reference
#define soap_write__wsse__Reference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Reference(soap, data), 0) || soap_put__wsse__Reference(soap, data, "wsse:Reference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap*, struct _wsse__Reference *, const char*, const char*);

#ifndef soap_read__wsse__Reference
#define soap_read__wsse__Reference(soap, data) ( ((data) ? (soap_default__wsse__Reference(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__Reference(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap*, const char*, int, const struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__BinarySecurityToken * soap_new__wsse__BinarySecurityToken(struct soap *soap, int n = -1) { return soap_instantiate__wsse__BinarySecurityToken(soap, n, NULL, NULL, NULL); }

inline struct _wsse__BinarySecurityToken * soap_new_req__wsse__BinarySecurityToken(
	struct soap *soap)
{	struct _wsse__BinarySecurityToken *_p = soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	soap_default__wsse__BinarySecurityToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__BinarySecurityToken * soap_new_set__wsse__BinarySecurityToken(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{	struct _wsse__BinarySecurityToken *_p = soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	soap_default__wsse__BinarySecurityToken(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *, const char*, const char*);

#ifndef soap_write__wsse__BinarySecurityToken
#define soap_write__wsse__BinarySecurityToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__BinarySecurityToken(soap, data), 0) || soap_put__wsse__BinarySecurityToken(soap, data, "wsse:BinarySecurityToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *, const char*, const char*);

#ifndef soap_read__wsse__BinarySecurityToken
#define soap_read__wsse__BinarySecurityToken(soap, data) ( ((data) ? (soap_default__wsse__BinarySecurityToken(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__BinarySecurityToken(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap*, struct _wsse__Password *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap*, const struct _wsse__Password *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap*, const char*, int, const struct _wsse__Password *, const char*);
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap*, const char*, struct _wsse__Password *, const char*);
SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Password * soap_new__wsse__Password(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Password(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Password * soap_new_req__wsse__Password(
	struct soap *soap)
{	struct _wsse__Password *_p = soap_new__wsse__Password(soap);
	if (_p)
	{	soap_default__wsse__Password(soap, _p);
	}
	return _p;
}

inline struct _wsse__Password * soap_new_set__wsse__Password(
	struct soap *soap,
	char *__item,
	char *Type)
{	struct _wsse__Password *_p = soap_new__wsse__Password(soap);
	if (_p)
	{	soap_default__wsse__Password(soap, _p);
		_p->__item = __item;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap*, const struct _wsse__Password *, const char*, const char*);

#ifndef soap_write__wsse__Password
#define soap_write__wsse__Password(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Password(soap, data), 0) || soap_put__wsse__Password(soap, data, "wsse:Password", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap*, struct _wsse__Password *, const char*, const char*);

#ifndef soap_read__wsse__Password
#define soap_read__wsse__Password(soap, data) ( ((data) ? (soap_default__wsse__Password(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__Password(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap*, const char*, int, const struct _wsse__UsernameToken *, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken *, const char*);
SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__UsernameToken * soap_new__wsse__UsernameToken(struct soap *soap, int n = -1) { return soap_instantiate__wsse__UsernameToken(soap, n, NULL, NULL, NULL); }

inline struct _wsse__UsernameToken * soap_new_req__wsse__UsernameToken(
	struct soap *soap)
{	struct _wsse__UsernameToken *_p = soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	soap_default__wsse__UsernameToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__UsernameToken * soap_new_set__wsse__UsernameToken(
	struct soap *soap,
	char *Username,
	struct _wsse__Password *Password,
	char *Nonce,
	char *wsu__Created,
	char *wsu__Id)
{	struct _wsse__UsernameToken *_p = soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	soap_default__wsse__UsernameToken(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Nonce = Nonce;
		_p->wsu__Created = wsu__Created;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *, const char*, const char*);

#ifndef soap_write__wsse__UsernameToken
#define soap_write__wsse__UsernameToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__UsernameToken(soap, data), 0) || soap_put__wsse__UsernameToken(soap, data, "wsse:UsernameToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *, const char*, const char*);

#ifndef soap_read__wsse__UsernameToken
#define soap_read__wsse__UsernameToken(soap, data) ( ((data) ? (soap_default__wsse__UsernameToken(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsse__UsernameToken(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap*, const char*, int, const struct _wsu__Timestamp *, const char*);
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp *, const char*);
SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsu__Timestamp * soap_new__wsu__Timestamp(struct soap *soap, int n = -1) { return soap_instantiate__wsu__Timestamp(soap, n, NULL, NULL, NULL); }

inline struct _wsu__Timestamp * soap_new_req__wsu__Timestamp(
	struct soap *soap)
{	struct _wsu__Timestamp *_p = soap_new__wsu__Timestamp(soap);
	if (_p)
	{	soap_default__wsu__Timestamp(soap, _p);
	}
	return _p;
}

inline struct _wsu__Timestamp * soap_new_set__wsu__Timestamp(
	struct soap *soap,
	char *wsu__Id,
	char *Created,
	char *Expires)
{	struct _wsu__Timestamp *_p = soap_new__wsu__Timestamp(soap);
	if (_p)
	{	soap_default__wsu__Timestamp(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Created = Created;
		_p->Expires = Expires;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *, const char*, const char*);

#ifndef soap_write__wsu__Timestamp
#define soap_write__wsu__Timestamp(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsu__Timestamp(soap, data), 0) || soap_put__wsu__Timestamp(soap, data, "wsu:Timestamp", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *, const char*, const char*);

#ifndef soap_read__wsu__Timestamp
#define soap_read__wsu__Timestamp(soap, data) ( ((data) ? (soap_default__wsu__Timestamp(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__wsu__Timestamp(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap*, int*, union _wsc__union_DerivedKeyTokenType *);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons4__ResponseCodeMessage
#define SOAP_TYPE_PointerTons4__ResponseCodeMessage (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ResponseCodeMessage(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ResponseCodeMessage(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__ResponseCodeMessage(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ResponseCodeMessage(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__ResponseCodeMessage
#define soap_write_PointerTons4__ResponseCodeMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons4__ResponseCodeMessage(soap, data), 0) || soap_put_PointerTons4__ResponseCodeMessage(soap, data, "ns4:ResponseCodeMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__ResponseCodeMessage(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons4__ResponseCodeMessage
#define soap_read_PointerTons4__ResponseCodeMessage(soap, data) ( ((data) ? (soap_default_PointerTons4__ResponseCodeMessage(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons4__ResponseCodeMessage(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__SubAttributeValueType
#define SOAP_TYPE_PointerTons4__SubAttributeValueType (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__SubAttributeValueType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__SubAttributeValueType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__SubAttributeValueType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__SubAttributeValueType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__SubAttributeValueType
#define soap_write_PointerTons4__SubAttributeValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons4__SubAttributeValueType(soap, data), 0) || soap_put_PointerTons4__SubAttributeValueType(soap, data, "ns4:SubAttributeValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__SubAttributeValueType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons4__SubAttributeValueType
#define soap_read_PointerTons4__SubAttributeValueType(soap, data) ( ((data) ? (soap_default_PointerTons4__SubAttributeValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons4__SubAttributeValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__SubAttributeType
#define SOAP_TYPE_PointerTons3__SubAttributeType (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubAttributeType(struct soap*, ns3__SubAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubAttributeType(struct soap*, const char *, int, ns3__SubAttributeType *const*, const char *);
SOAP_FMAC3 ns3__SubAttributeType ** SOAP_FMAC4 soap_in_PointerTons3__SubAttributeType(struct soap*, const char*, ns3__SubAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubAttributeType(struct soap*, ns3__SubAttributeType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__SubAttributeType
#define soap_write_PointerTons3__SubAttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__SubAttributeType(soap, data), 0) || soap_put_PointerTons3__SubAttributeType(soap, data, "ns3:SubAttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubAttributeType ** SOAP_FMAC4 soap_get_PointerTons3__SubAttributeType(struct soap*, ns3__SubAttributeType **, const char*, const char*);

#ifndef soap_read_PointerTons3__SubAttributeType
#define soap_read_PointerTons3__SubAttributeType(soap, data) ( ((data) ? (soap_default_PointerTons3__SubAttributeType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__SubAttributeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__SubAttributeListType
#define SOAP_TYPE_PointerTons3__SubAttributeListType (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SubAttributeListType(struct soap*, ns3__SubAttributeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SubAttributeListType(struct soap*, const char *, int, ns3__SubAttributeListType *const*, const char *);
SOAP_FMAC3 ns3__SubAttributeListType ** SOAP_FMAC4 soap_in_PointerTons3__SubAttributeListType(struct soap*, const char*, ns3__SubAttributeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SubAttributeListType(struct soap*, ns3__SubAttributeListType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__SubAttributeListType
#define soap_write_PointerTons3__SubAttributeListType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__SubAttributeListType(soap, data), 0) || soap_put_PointerTons3__SubAttributeListType(soap, data, "ns3:SubAttributeListType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SubAttributeListType ** SOAP_FMAC4 soap_get_PointerTons3__SubAttributeListType(struct soap*, ns3__SubAttributeListType **, const char*, const char*);

#ifndef soap_read_PointerTons3__SubAttributeListType
#define soap_read_PointerTons3__SubAttributeListType(soap, data) ( ((data) ? (soap_default_PointerTons3__SubAttributeListType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__SubAttributeListType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__LegalActListType
#define SOAP_TYPE_PointerTons3__LegalActListType (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__LegalActListType(struct soap*, ns3__LegalActListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__LegalActListType(struct soap*, const char *, int, ns3__LegalActListType *const*, const char *);
SOAP_FMAC3 ns3__LegalActListType ** SOAP_FMAC4 soap_in_PointerTons3__LegalActListType(struct soap*, const char*, ns3__LegalActListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__LegalActListType(struct soap*, ns3__LegalActListType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__LegalActListType
#define soap_write_PointerTons3__LegalActListType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__LegalActListType(soap, data), 0) || soap_put_PointerTons3__LegalActListType(soap, data, "ns3:LegalActListType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__LegalActListType ** SOAP_FMAC4 soap_get_PointerTons3__LegalActListType(struct soap*, ns3__LegalActListType **, const char*, const char*);

#ifndef soap_read_PointerTons3__LegalActListType
#define soap_read_PointerTons3__LegalActListType(soap, data) ( ((data) ? (soap_default_PointerTons3__LegalActListType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__LegalActListType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__DescriptionType
#define SOAP_TYPE_PointerTons4__DescriptionType (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__DescriptionType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__DescriptionType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons4__DescriptionType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__DescriptionType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__DescriptionType
#define soap_write_PointerTons4__DescriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons4__DescriptionType(soap, data), 0) || soap_put_PointerTons4__DescriptionType(soap, data, "ns4:DescriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons4__DescriptionType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons4__DescriptionType
#define soap_read_PointerTons4__DescriptionType(soap, data) ( ((data) ? (soap_default_PointerTons4__DescriptionType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons4__DescriptionType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__ExtraIDType
#define SOAP_TYPE_PointerTons3__ExtraIDType (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExtraIDType(struct soap*, ns3__ExtraIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExtraIDType(struct soap*, const char *, int, ns3__ExtraIDType *const*, const char *);
SOAP_FMAC3 ns3__ExtraIDType ** SOAP_FMAC4 soap_in_PointerTons3__ExtraIDType(struct soap*, const char*, ns3__ExtraIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExtraIDType(struct soap*, ns3__ExtraIDType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__ExtraIDType
#define soap_write_PointerTons3__ExtraIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__ExtraIDType(soap, data), 0) || soap_put_PointerTons3__ExtraIDType(soap, data, "ns3:ExtraIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ExtraIDType ** SOAP_FMAC4 soap_get_PointerTons3__ExtraIDType(struct soap*, ns3__ExtraIDType **, const char*, const char*);

#ifndef soap_read_PointerTons3__ExtraIDType
#define soap_read_PointerTons3__ExtraIDType(soap, data) ( ((data) ? (soap_default_PointerTons3__ExtraIDType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__ExtraIDType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__ExtraIDListType
#define SOAP_TYPE_PointerTons3__ExtraIDListType (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ExtraIDListType(struct soap*, ns3__ExtraIDListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ExtraIDListType(struct soap*, const char *, int, ns3__ExtraIDListType *const*, const char *);
SOAP_FMAC3 ns3__ExtraIDListType ** SOAP_FMAC4 soap_in_PointerTons3__ExtraIDListType(struct soap*, const char*, ns3__ExtraIDListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ExtraIDListType(struct soap*, ns3__ExtraIDListType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__ExtraIDListType
#define soap_write_PointerTons3__ExtraIDListType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__ExtraIDListType(soap, data), 0) || soap_put_PointerTons3__ExtraIDListType(soap, data, "ns3:ExtraIDListType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ExtraIDListType ** SOAP_FMAC4 soap_get_PointerTons3__ExtraIDListType(struct soap*, ns3__ExtraIDListType **, const char*, const char*);

#ifndef soap_read_PointerTons3__ExtraIDListType
#define soap_read_PointerTons3__ExtraIDListType(soap, data) ( ((data) ? (soap_default_PointerTons3__ExtraIDListType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__ExtraIDListType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__MainAttributeType
#define SOAP_TYPE_PointerTons3__MainAttributeType (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MainAttributeType(struct soap*, ns3__MainAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MainAttributeType(struct soap*, const char *, int, ns3__MainAttributeType *const*, const char *);
SOAP_FMAC3 ns3__MainAttributeType ** SOAP_FMAC4 soap_in_PointerTons3__MainAttributeType(struct soap*, const char*, ns3__MainAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MainAttributeType(struct soap*, ns3__MainAttributeType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__MainAttributeType
#define soap_write_PointerTons3__MainAttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__MainAttributeType(soap, data), 0) || soap_put_PointerTons3__MainAttributeType(soap, data, "ns3:MainAttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MainAttributeType ** SOAP_FMAC4 soap_get_PointerTons3__MainAttributeType(struct soap*, ns3__MainAttributeType **, const char*, const char*);

#ifndef soap_read_PointerTons3__MainAttributeType
#define soap_read_PointerTons3__MainAttributeType(soap, data) ( ((data) ? (soap_default_PointerTons3__MainAttributeType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__MainAttributeType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__PersonalDataType
#define SOAP_TYPE_PointerTons3__PersonalDataType (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PersonalDataType(struct soap*, ns3__PersonalDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PersonalDataType(struct soap*, const char *, int, ns3__PersonalDataType *const*, const char *);
SOAP_FMAC3 ns3__PersonalDataType ** SOAP_FMAC4 soap_in_PointerTons3__PersonalDataType(struct soap*, const char*, ns3__PersonalDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PersonalDataType(struct soap*, ns3__PersonalDataType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__PersonalDataType
#define soap_write_PointerTons3__PersonalDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__PersonalDataType(soap, data), 0) || soap_put_PointerTons3__PersonalDataType(soap, data, "ns3:PersonalDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PersonalDataType ** SOAP_FMAC4 soap_get_PointerTons3__PersonalDataType(struct soap*, ns3__PersonalDataType **, const char*, const char*);

#ifndef soap_read_PointerTons3__PersonalDataType
#define soap_read_PointerTons3__PersonalDataType(soap, data) ( ((data) ? (soap_default_PointerTons3__PersonalDataType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__PersonalDataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( ((data) ? (soap_default_PointerTostd__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons3__AttributeSupplierType
#define SOAP_TYPE_PointerTons3__AttributeSupplierType (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AttributeSupplierType(struct soap*, const char *, int, ns3__AttributeSupplierType *const*, const char *);
SOAP_FMAC3 ns3__AttributeSupplierType ** SOAP_FMAC4 soap_in_PointerTons3__AttributeSupplierType(struct soap*, const char*, ns3__AttributeSupplierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__AttributeSupplierType
#define soap_write_PointerTons3__AttributeSupplierType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons3__AttributeSupplierType(soap, data), 0) || soap_put_PointerTons3__AttributeSupplierType(soap, data, "ns3:AttributeSupplierType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__AttributeSupplierType ** SOAP_FMAC4 soap_get_PointerTons3__AttributeSupplierType(struct soap*, ns3__AttributeSupplierType **, const char*, const char*);

#ifndef soap_read_PointerTons3__AttributeSupplierType
#define soap_read_PointerTons3__AttributeSupplierType(soap, data) ( ((data) ? (soap_default_PointerTons3__AttributeSupplierType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTons3__AttributeSupplierType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Security
#define SOAP_TYPE_PointerTo_wsse__Security (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Security(struct soap*, const char *, int, struct _wsse__Security *const*, const char *);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_in_PointerTo_wsse__Security(struct soap*, const char*, struct _wsse__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Security
#define soap_write_PointerTo_wsse__Security(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Security(soap, data), 0) || soap_put_PointerTo_wsse__Security(soap, data, "wsse:Security", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_get_PointerTo_wsse__Security(struct soap*, struct _wsse__Security **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Security
#define soap_read_PointerTo_wsse__Security(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__Security(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Security(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__SignatureType
#define SOAP_TYPE_PointerTods__SignatureType (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__SignatureType
#define soap_write_PointerTods__SignatureType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__SignatureType(soap, data), 0) || soap_put_PointerTods__SignatureType(soap, data, "ds:SignatureType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap*, struct ds__SignatureType **, const char*, const char*);

#ifndef soap_read_PointerTods__SignatureType
#define soap_read_PointerTods__SignatureType(soap, data) ( ((data) ? (soap_default_PointerTods__SignatureType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__SignatureType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__SecurityContextTokenType(struct soap*, const char *, int, struct wsc__SecurityContextTokenType *const*, const char *);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_in_PointerTowsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsc__SecurityContextTokenType
#define soap_write_PointerTowsc__SecurityContextTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsc__SecurityContextTokenType(soap, data), 0) || soap_put_PointerTowsc__SecurityContextTokenType(soap, data, "wsc:SecurityContextTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_get_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType **, const char*, const char*);

#ifndef soap_read_PointerTowsc__SecurityContextTokenType
#define soap_read_PointerTowsc__SecurityContextTokenType(soap, data) ( ((data) ? (soap_default_PointerTowsc__SecurityContextTokenType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTowsc__SecurityContextTokenType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptedKeyType
#define soap_write_PointerToxenc__EncryptedKeyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptedKeyType(soap, data), 0) || soap_put_PointerToxenc__EncryptedKeyType(soap, data, "xenc:EncryptedKeyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptedKeyType
#define soap_read_PointerToxenc__EncryptedKeyType(soap, data) ( ((data) ? (soap_default_PointerToxenc__EncryptedKeyType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptedKeyType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap*, const char *, int, struct _wsse__BinarySecurityToken *const*, const char *);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__BinarySecurityToken
#define soap_write_PointerTo_wsse__BinarySecurityToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__BinarySecurityToken(soap, data), 0) || soap_put_PointerTo_wsse__BinarySecurityToken(soap, data, "wsse:BinarySecurityToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__BinarySecurityToken
#define soap_read_PointerTo_wsse__BinarySecurityToken(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__BinarySecurityToken(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__BinarySecurityToken(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken
#define SOAP_TYPE_PointerTo_wsse__UsernameToken (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap*, const char *, int, struct _wsse__UsernameToken *const*, const char *);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__UsernameToken
#define soap_write_PointerTo_wsse__UsernameToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__UsernameToken(soap, data), 0) || soap_put_PointerTo_wsse__UsernameToken(soap, data, "wsse:UsernameToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__UsernameToken
#define soap_read_PointerTo_wsse__UsernameToken(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__UsernameToken(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__UsernameToken(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp
#define SOAP_TYPE_PointerTo_wsu__Timestamp (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap*, const char *, int, struct _wsu__Timestamp *const*, const char *);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsu__Timestamp
#define soap_write_PointerTo_wsu__Timestamp(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsu__Timestamp(soap, data), 0) || soap_put_PointerTo_wsu__Timestamp(soap, data, "wsu:Timestamp", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp **, const char*, const char*);

#ifndef soap_read_PointerTo_wsu__Timestamp
#define soap_read_PointerTo_wsu__Timestamp(soap, data) ( ((data) ? (soap_default_PointerTo_wsu__Timestamp(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsu__Timestamp(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char *, int, struct __wsc__DerivedKeyTokenType_sequence *const*, const char *);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*, const char*, const char*);

#ifndef soap_write_PointerTo__wsc__DerivedKeyTokenType_sequence
#define soap_write_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data), 0) || soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data, "-wsc:DerivedKeyTokenType-sequence", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence **, const char*, const char*);

#ifndef soap_read_PointerTo__wsc__DerivedKeyTokenType_sequence
#define soap_read_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data) ( ((data) ? (soap_default_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToULONG64
#define SOAP_TYPE_PointerToULONG64 (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap*, ULONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerToULONG64
#define soap_write_PointerToULONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToULONG64(soap, data), 0) || soap_put_PointerToULONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap*, ULONG64 **, const char*, const char*);

#ifndef soap_read_PointerToULONG64
#define soap_read_PointerToULONG64(soap, data) ( ((data) ? (soap_default_PointerToULONG64(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToULONG64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsc__PropertiesType
#define SOAP_TYPE_PointerTowsc__PropertiesType (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap*, const char *, int, struct wsc__PropertiesType *const*, const char *);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsc__PropertiesType
#define soap_write_PointerTowsc__PropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsc__PropertiesType(soap, data), 0) || soap_put_PointerTowsc__PropertiesType(soap, data, "wsc:PropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType **, const char*, const char*);

#ifndef soap_read_PointerTowsc__PropertiesType
#define soap_read_PointerTowsc__PropertiesType(soap, data) ( ((data) ? (soap_default_PointerTowsc__PropertiesType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTowsc__PropertiesType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType (82)
#endif

#define soap_default_wsc__FaultCodeOpenEnumType(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap*, char *const*);

#define soap_wsc__FaultCodeOpenEnumType2s soap_string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsc__FaultCodeOpenEnumType soap_s2string

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_wsc__FaultCodeOpenEnumType
#define soap_write_wsc__FaultCodeOpenEnumType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__FaultCodeOpenEnumType(soap, data), 0) || soap_put_wsc__FaultCodeOpenEnumType(soap, data, "wsc:FaultCodeOpenEnumType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap*, char **, const char*, const char*);

#ifndef soap_read_wsc__FaultCodeOpenEnumType
#define soap_read_wsc__FaultCodeOpenEnumType(soap, data) ( ((data) ? (soap_default_wsc__FaultCodeOpenEnumType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_wsc__FaultCodeOpenEnumType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList
#define SOAP_TYPE_PointerTo_xenc__ReferenceList (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap*, const char *, int, struct _xenc__ReferenceList *const*, const char *);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xenc__ReferenceList
#define soap_write_PointerTo_xenc__ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xenc__ReferenceList(soap, data), 0) || soap_put_PointerTo_xenc__ReferenceList(soap, data, "xenc:ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList **, const char*, const char*);

#ifndef soap_read_PointerTo_xenc__ReferenceList
#define soap_read_PointerTo_xenc__ReferenceList(soap, data) ( ((data) ? (soap_default_PointerTo_xenc__ReferenceList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_xenc__ReferenceList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap*, const char *, int, struct __xenc__union_ReferenceList *const*, const char *);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*, const char*, const char*);

#ifndef soap_write_PointerTo__xenc__union_ReferenceList
#define soap_write_PointerTo__xenc__union_ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__xenc__union_ReferenceList(soap, data), 0) || soap_put_PointerTo__xenc__union_ReferenceList(soap, data, "-xenc:union-ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList **, const char*, const char*);

#ifndef soap_read_PointerTo__xenc__union_ReferenceList
#define soap_read_PointerTo__xenc__union_ReferenceList(soap, data) ( ((data) ? (soap_default_PointerTo__xenc__union_ReferenceList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo__xenc__union_ReferenceList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__ReferenceType
#define SOAP_TYPE_PointerToxenc__ReferenceType (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap*, const char *, int, struct xenc__ReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__ReferenceType
#define soap_write_PointerToxenc__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__ReferenceType(soap, data), 0) || soap_put_PointerToxenc__ReferenceType(soap, data, "xenc:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__ReferenceType
#define soap_read_PointerToxenc__ReferenceType(soap, data) ( ((data) ? (soap_default_PointerToxenc__ReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__ReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap*, const char *, int, struct xenc__EncryptionPropertyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptionPropertyType
#define soap_write_PointerToxenc__EncryptionPropertyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptionPropertyType(soap, data), 0) || soap_put_PointerToxenc__EncryptionPropertyType(soap, data, "xenc:EncryptionPropertyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptionPropertyType
#define soap_read_PointerToxenc__EncryptionPropertyType(soap, data) ( ((data) ? (soap_default_PointerToxenc__EncryptionPropertyType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptionPropertyType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__TransformsType
#define SOAP_TYPE_PointerToxenc__TransformsType (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap*, const char *, int, struct xenc__TransformsType *const*, const char *);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__TransformsType
#define soap_write_PointerToxenc__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__TransformsType(soap, data), 0) || soap_put_PointerToxenc__TransformsType(soap, data, "xenc:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__TransformsType
#define soap_read_PointerToxenc__TransformsType(soap, data) ( ((data) ? (soap_default_PointerToxenc__TransformsType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__TransformsType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType
#define SOAP_TYPE_PointerToxenc__CipherReferenceType (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap*, const char *, int, struct xenc__CipherReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__CipherReferenceType
#define soap_write_PointerToxenc__CipherReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__CipherReferenceType(soap, data), 0) || soap_put_PointerToxenc__CipherReferenceType(soap, data, "xenc:CipherReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__CipherReferenceType
#define soap_read_PointerToxenc__CipherReferenceType(soap, data) ( ((data) ? (soap_default_PointerToxenc__CipherReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__CipherReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap*, const char *, int, struct xenc__EncryptionPropertiesType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptionPropertiesType
#define soap_write_PointerToxenc__EncryptionPropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, data), 0) || soap_put_PointerToxenc__EncryptionPropertiesType(soap, data, "xenc:EncryptionPropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptionPropertiesType
#define soap_read_PointerToxenc__EncryptionPropertiesType(soap, data) ( ((data) ? (soap_default_PointerToxenc__EncryptionPropertiesType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptionPropertiesType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__CipherDataType
#define SOAP_TYPE_PointerToxenc__CipherDataType (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap*, const char *, int, struct xenc__CipherDataType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__CipherDataType
#define soap_write_PointerToxenc__CipherDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__CipherDataType(soap, data), 0) || soap_put_PointerToxenc__CipherDataType(soap, data, "xenc:CipherDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__CipherDataType
#define soap_read_PointerToxenc__CipherDataType(soap, data) ( ((data) ? (soap_default_PointerToxenc__CipherDataType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__CipherDataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo
#define SOAP_TYPE_PointerTo_ds__KeyInfo (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ds__KeyInfo
#define soap_write_PointerTo_ds__KeyInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ds__KeyInfo(soap, data), 0) || soap_put_PointerTo_ds__KeyInfo(soap, data, "ds:KeyInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **, const char*, const char*);

#ifndef soap_read_PointerTo_ds__KeyInfo
#define soap_read_PointerTo_ds__KeyInfo(soap, data) ( ((data) ? (soap_default_PointerTo_ds__KeyInfo(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_ds__KeyInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap*, const char *, int, struct xenc__EncryptionMethodType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptionMethodType
#define soap_write_PointerToxenc__EncryptionMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptionMethodType(soap, data), 0) || soap_put_PointerToxenc__EncryptionMethodType(soap, data, "xenc:EncryptionMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptionMethodType
#define soap_read_PointerToxenc__EncryptionMethodType(soap, data) ( ((data) ? (soap_default_PointerToxenc__EncryptionMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptionMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType
#define SOAP_TYPE_PointerTods__X509IssuerSerialType (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap*, const char *, int, struct ds__X509IssuerSerialType *const*, const char *);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__X509IssuerSerialType
#define soap_write_PointerTods__X509IssuerSerialType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__X509IssuerSerialType(soap, data), 0) || soap_put_PointerTods__X509IssuerSerialType(soap, data, "ds:X509IssuerSerialType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType **, const char*, const char*);

#ifndef soap_read_PointerTods__X509IssuerSerialType
#define soap_read_PointerTods__X509IssuerSerialType(soap, data) ( ((data) ? (soap_default_PointerTods__X509IssuerSerialType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__X509IssuerSerialType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType
#define SOAP_TYPE_PointerTods__RSAKeyValueType (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap*, const char *, int, struct ds__RSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__RSAKeyValueType
#define soap_write_PointerTods__RSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__RSAKeyValueType(soap, data), 0) || soap_put_PointerTods__RSAKeyValueType(soap, data, "ds:RSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType **, const char*, const char*);

#ifndef soap_read_PointerTods__RSAKeyValueType
#define soap_read_PointerTods__RSAKeyValueType(soap, data) ( ((data) ? (soap_default_PointerTods__RSAKeyValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__RSAKeyValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType
#define SOAP_TYPE_PointerTods__DSAKeyValueType (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap*, const char *, int, struct ds__DSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__DSAKeyValueType
#define soap_write_PointerTods__DSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__DSAKeyValueType(soap, data), 0) || soap_put_PointerTods__DSAKeyValueType(soap, data, "ds:DSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType **, const char*, const char*);

#ifndef soap_read_PointerTods__DSAKeyValueType
#define soap_read_PointerTods__DSAKeyValueType(soap, data) ( ((data) ? (soap_default_PointerTods__DSAKeyValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__DSAKeyValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__TransformType
#define SOAP_TYPE_PointerTods__TransformType (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap*, const char *, int, struct ds__TransformType *const*, const char *);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap*, const char*, struct ds__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__TransformType
#define soap_write_PointerTods__TransformType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__TransformType(soap, data), 0) || soap_put_PointerTods__TransformType(soap, data, "ds:TransformType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap*, struct ds__TransformType **, const char*, const char*);

#ifndef soap_read_PointerTods__TransformType
#define soap_read_PointerTods__TransformType(soap, data) ( ((data) ? (soap_default_PointerTods__TransformType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__TransformType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__DigestMethodType
#define SOAP_TYPE_PointerTods__DigestMethodType (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap*, const char *, int, struct ds__DigestMethodType *const*, const char *);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__DigestMethodType
#define soap_write_PointerTods__DigestMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__DigestMethodType(soap, data), 0) || soap_put_PointerTods__DigestMethodType(soap, data, "ds:DigestMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__DigestMethodType
#define soap_read_PointerTods__DigestMethodType(soap, data) ( ((data) ? (soap_default_PointerTods__DigestMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__DigestMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__TransformsType
#define SOAP_TYPE_PointerTods__TransformsType (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap*, const char *, int, struct ds__TransformsType *const*, const char *);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap*, const char*, struct ds__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__TransformsType
#define soap_write_PointerTods__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__TransformsType(soap, data), 0) || soap_put_PointerTods__TransformsType(soap, data, "ds:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap*, struct ds__TransformsType **, const char*, const char*);

#ifndef soap_read_PointerTods__TransformsType
#define soap_read_PointerTods__TransformsType(soap, data) ( ((data) ? (soap_default_PointerTods__TransformsType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__TransformsType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( ((data) ? (soap_default_PointerToint(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToint(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType
#define SOAP_TYPE_PointerToPointerTods__ReferenceType (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType **const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTods__ReferenceType
#define soap_write_PointerToPointerTods__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTods__ReferenceType(soap, data), 0) || soap_put_PointerToPointerTods__ReferenceType(soap, data, "ds:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTods__ReferenceType
#define soap_read_PointerToPointerTods__ReferenceType(soap, data) ( ((data) ? (soap_default_PointerToPointerTods__ReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToPointerTods__ReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__ReferenceType
#define SOAP_TYPE_PointerTods__ReferenceType (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType *const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__ReferenceType
#define soap_write_PointerTods__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__ReferenceType(soap, data), 0) || soap_put_PointerTods__ReferenceType(soap, data, "ds:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTods__ReferenceType
#define soap_read_PointerTods__ReferenceType(soap, data) ( ((data) ? (soap_default_PointerTods__ReferenceType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__ReferenceType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__SignatureMethodType
#define SOAP_TYPE_PointerTods__SignatureMethodType (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap*, const char *, int, struct ds__SignatureMethodType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__SignatureMethodType
#define soap_write_PointerTods__SignatureMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__SignatureMethodType(soap, data), 0) || soap_put_PointerTods__SignatureMethodType(soap, data, "ds:SignatureMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__SignatureMethodType
#define soap_read_PointerTods__SignatureMethodType(soap, data) ( ((data) ? (soap_default_PointerTods__SignatureMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__SignatureMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap*, const char *, int, struct ds__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__CanonicalizationMethodType
#define soap_write_PointerTods__CanonicalizationMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__CanonicalizationMethodType(soap, data), 0) || soap_put_PointerTods__CanonicalizationMethodType(soap, data, "ds:CanonicalizationMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__CanonicalizationMethodType
#define soap_read_PointerTods__CanonicalizationMethodType(soap, data) ( ((data) ? (soap_default_PointerTods__CanonicalizationMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__CanonicalizationMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap*, const char *, int, struct _wsse__SecurityTokenReference *const*, const char *);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__SecurityTokenReference
#define soap_write_PointerTo_wsse__SecurityTokenReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__SecurityTokenReference(soap, data), 0) || soap_put_PointerTo_wsse__SecurityTokenReference(soap, data, "wsse:SecurityTokenReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__SecurityTokenReference
#define soap_read_PointerTo_wsse__SecurityTokenReference(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__SecurityTokenReference(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__SecurityTokenReference(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType
#define SOAP_TYPE_PointerTods__RetrievalMethodType (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap*, const char *, int, struct ds__RetrievalMethodType *const*, const char *);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__RetrievalMethodType
#define soap_write_PointerTods__RetrievalMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__RetrievalMethodType(soap, data), 0) || soap_put_PointerTods__RetrievalMethodType(soap, data, "ds:RetrievalMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__RetrievalMethodType
#define soap_read_PointerTods__RetrievalMethodType(soap, data) ( ((data) ? (soap_default_PointerTods__RetrievalMethodType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__RetrievalMethodType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__KeyValueType
#define SOAP_TYPE_PointerTods__KeyValueType (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap*, const char *, int, struct ds__KeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap*, const char*, struct ds__KeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__KeyValueType
#define soap_write_PointerTods__KeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__KeyValueType(soap, data), 0) || soap_put_PointerTods__KeyValueType(soap, data, "ds:KeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType **, const char*, const char*);

#ifndef soap_read_PointerTods__KeyValueType
#define soap_read_PointerTods__KeyValueType(soap, data) ( ((data) ? (soap_default_PointerTods__KeyValueType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__KeyValueType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char *, int, struct _c14n__InclusiveNamespaces *const*, const char *);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*, const char*, const char*);

#ifndef soap_write_PointerTo_c14n__InclusiveNamespaces
#define soap_write_PointerTo_c14n__InclusiveNamespaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_c14n__InclusiveNamespaces(soap, data), 0) || soap_put_PointerTo_c14n__InclusiveNamespaces(soap, data, "c14n:InclusiveNamespaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces **, const char*, const char*);

#ifndef soap_read_PointerTo_c14n__InclusiveNamespaces
#define soap_read_PointerTo_c14n__InclusiveNamespaces(soap, data) ( ((data) ? (soap_default_PointerTo_c14n__InclusiveNamespaces(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_c14n__InclusiveNamespaces(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__KeyInfoType
#define SOAP_TYPE_PointerTods__KeyInfoType (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__KeyInfoType
#define soap_write_PointerTods__KeyInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__KeyInfoType(soap, data), 0) || soap_put_PointerTods__KeyInfoType(soap, data, "ds:KeyInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType **, const char*, const char*);

#ifndef soap_read_PointerTods__KeyInfoType
#define soap_read_PointerTods__KeyInfoType(soap, data) ( ((data) ? (soap_default_PointerTods__KeyInfoType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__KeyInfoType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__SignedInfoType
#define SOAP_TYPE_PointerTods__SignedInfoType (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap*, const char *, int, struct ds__SignedInfoType *const*, const char *);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__SignedInfoType
#define soap_write_PointerTods__SignedInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__SignedInfoType(soap, data), 0) || soap_put_PointerTods__SignedInfoType(soap, data, "ds:SignedInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType **, const char*, const char*);

#ifndef soap_read_PointerTods__SignedInfoType
#define soap_read_PointerTods__SignedInfoType(soap, data) ( ((data) ? (soap_default_PointerTods__SignedInfoType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__SignedInfoType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__X509DataType
#define SOAP_TYPE_PointerTods__X509DataType (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap*, const char *, int, struct ds__X509DataType *const*, const char *);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap*, const char*, struct ds__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__X509DataType
#define soap_write_PointerTods__X509DataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__X509DataType(soap, data), 0) || soap_put_PointerTods__X509DataType(soap, data, "ds:X509DataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap*, struct ds__X509DataType **, const char*, const char*);

#ifndef soap_read_PointerTods__X509DataType
#define soap_read_PointerTods__X509DataType(soap, data) ( ((data) ? (soap_default_PointerTods__X509DataType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTods__X509DataType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Embedded
#define SOAP_TYPE_PointerTo_wsse__Embedded (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap*, const char *, int, struct _wsse__Embedded *const*, const char *);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Embedded
#define soap_write_PointerTo_wsse__Embedded(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Embedded(soap, data), 0) || soap_put_PointerTo_wsse__Embedded(soap, data, "wsse:Embedded", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Embedded
#define soap_read_PointerTo_wsse__Embedded(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__Embedded(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Embedded(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap*, const char *, int, struct _wsse__KeyIdentifier *const*, const char *);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__KeyIdentifier
#define soap_write_PointerTo_wsse__KeyIdentifier(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__KeyIdentifier(soap, data), 0) || soap_put_PointerTo_wsse__KeyIdentifier(soap, data, "wsse:KeyIdentifier", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__KeyIdentifier
#define soap_read_PointerTo_wsse__KeyIdentifier(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__KeyIdentifier(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__KeyIdentifier(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Reference
#define SOAP_TYPE_PointerTo_wsse__Reference (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap*, const char *, int, struct _wsse__Reference *const*, const char *);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap*, const char*, struct _wsse__Reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Reference
#define soap_write_PointerTo_wsse__Reference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Reference(soap, data), 0) || soap_put_PointerTo_wsse__Reference(soap, data, "wsse:Reference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Reference
#define soap_read_PointerTo_wsse__Reference(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__Reference(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Reference(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Password
#define SOAP_TYPE_PointerTo_wsse__Password (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap*, const char *, int, struct _wsse__Password *const*, const char *);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap*, const char*, struct _wsse__Password **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Password
#define soap_write_PointerTo_wsse__Password(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Password(soap, data), 0) || soap_put_PointerTo_wsse__Password(soap, data, "wsse:Password", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap*, struct _wsse__Password **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Password
#define soap_read_PointerTo_wsse__Password(soap, data) ( ((data) ? (soap_default_PointerTo_wsse__Password(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Password(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( ((data) ? (soap_default__QName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( ((data) ? (soap_default_string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__SubAttributeType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__SubAttributeType (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, std::vector<ns3__SubAttributeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, const std::vector<ns3__SubAttributeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, const char*, int, const std::vector<ns3__SubAttributeType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__SubAttributeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, const char*, std::vector<ns3__SubAttributeType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__SubAttributeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__SubAttributeType *>  * soap_new_std__vectorTemplateOfPointerTons3__SubAttributeType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__SubAttributeType(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns4__LegalActType
#define SOAP_TYPE_std__vectorTemplateOfns4__LegalActType (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns4__LegalActType(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns4__LegalActType(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns4__LegalActType(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns4__LegalActType(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns4__LegalActType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfns4__LegalActType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns4__LegalActType(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__ExtraIDType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__ExtraIDType (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, std::vector<ns3__ExtraIDType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, const std::vector<ns3__ExtraIDType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, const char*, int, const std::vector<ns3__ExtraIDType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ExtraIDType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, const char*, std::vector<ns3__ExtraIDType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ExtraIDType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ExtraIDType *>  * soap_new_std__vectorTemplateOfPointerTons3__ExtraIDType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__ExtraIDType(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeSupplierType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__AttributeSupplierType (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, std::vector<ns3__AttributeSupplierType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, const std::vector<ns3__AttributeSupplierType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, const char*, int, const std::vector<ns3__AttributeSupplierType *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AttributeSupplierType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, const char*, std::vector<ns3__AttributeSupplierType *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AttributeSupplierType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AttributeSupplierType *>  * soap_new_std__vectorTemplateOfPointerTons3__AttributeSupplierType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__AttributeSupplierType(soap, n, NULL, NULL, NULL); }

#endif

/* End of soapH.h */
